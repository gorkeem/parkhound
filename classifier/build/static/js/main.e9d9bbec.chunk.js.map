{"version":3,"sources":["generated/graphql.tsx","pages/Admin/AdminHome.tsx","pages/Admin/AdminSidebar.tsx","pages/Admin/AdminLayout.tsx","utils/DirectionsProvider.tsx","utils/formatDistance.ts","utils/getDistanceBetweenTwoPoints.ts","utils/useGeolocation.ts","components/BottomBarDetails.tsx","components/BottomBarDirections.tsx","components/SpacesNearYou.tsx","components/MapBottomBar.tsx","utils/googleMapStyles.ts","components/MapComponent.tsx","components/HomeOverlayButtons.tsx","components/FullPageLoading.tsx","components/MapDirections.tsx","pages/Home.tsx","components/ParkingSpacesHeader.tsx","components/FullPageError.tsx","components/ParkingSpace.tsx","components/ParkingLotMap.tsx","components/ParkingSpacesDetails.tsx","pages/ParkingLotSpaces.tsx","pages/Register.tsx","pages/Login.tsx","pages/Admin/AdminLotList.tsx","pages/Admin/AdminLot.tsx","pages/ParkingLotList.tsx","pages/Admin/AdminDrivers.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","Fonts.tsx","index.tsx"],"names":["Favorites_Constraint","Favorites_Select_Column","Favorites_Update_Column","Institution_Constraint","Institution_Select_Column","Institution_Update_Column","Knex_Migrations_Constraint","Knex_Migrations_Lock_Constraint","Knex_Migrations_Lock_Select_Column","Knex_Migrations_Lock_Update_Column","Knex_Migrations_Select_Column","Knex_Migrations_Update_Column","Location_Constraint","Location_Select_Column","Location_Update_Column","Lot_Row_Constraint","Lot_Row_Select_Column","Lot_Row_Update_Column","Order_By","Parking_Lot_Constraint","Parking_Lot_Select_Column","Parking_Lot_Update_Column","Parking_Space_Constraint","Parking_Space_Select_Column","Parking_Space_Update_Column","Past_Lot_Occupancy_Constraint","Past_Lot_Occupancy_Select_Column","Past_Lot_Occupancy_Update_Column","User_Constraint","User_Institution_Constraint","User_Institution_Select_Column","User_Institution_Update_Column","User_Select_Column","User_Update_Column","Vacant_Space_Select_Column","ParkingLotCardInfoFragmentDoc","gql","ParkingLotMapInfoFragmentDoc","ParkingSpaceInfoFragmentDoc","AddToFavoritesDocument","UpdateParkingLotDocument","UpdateParkingSpaceDocument","AdminDashboardDocument","DriversByInstitutionDocument","FavoritesDocument","NearbySpacesDocument","ParkingLotBottomBarByIdDocument","ParkingLotDetailsByIdDocument","useParkingLotDetailsByIdQuery","baseOptions","Apollo","ParkingLotListDocument","ParkingLotsDocument","ParkingLotsByInstitutionIdDocument","PastLotOccupancyDocument","usePastLotOccupancyQuery","AdminHome","data","variables","id","parseInt","localStorage","getItem","pastData1","pastData2","inst","user_by_pk","user_institutions","p","mb","institution","name","justify","spacing","bg","boxShadow","rounded","align","as","MdPeople","mr","fontSize","fontWeight","user_institutions_aggregate","aggregate","count","BiTrafficCone","parking_lots_aggregate","FaParking","parking_lots","reduce","acc","lot","vacant_space","vacant_count","mt","direction","w","type","labels","past_lot_occupancy","map","d","Date","updated_at","getHours","datasets","label","occupied","fill","backgroundColor","borderColor","MenuLink","path","displayName","selected","icon","RouterLink","to","display","alignItems","style","textDecoration","px","transition","h","color","_hover","background","AdminSidebar","location","useLocation","borderRight","borderBottom","pathname","AiOutlineDashboard","includes","GiSteeringWheel","AdminLayout","children","templateColumns","css","overflow","DirectionsContext","createContext","destinationLotId","destination","directions","setDestination","console","warn","setDirections","setDestinationLotId","cancelRoute","DirectionsProvider","useState","useCallback","Provider","value","useDirections","useContext","formatDistance","dist","Math","round","toFixed","getDistanceBetweenTwoPoints","lat1","lon1","lat2","lon2","c","cos","a","asin","sqrt","useGeolocation","error","setError","position","setPosition","useEffect","navigator","geolocation","getCurrentPosition","pos","lat","coords","latitude","lng","longitude","e","message","enableHighAccuracy","BottomBarDetails","address","availableSpace","capacity","placeItems","GrCar","lineHeight","GrLocation","FaCompass","size","leftIcon","colorScheme","renderIcon","maneuver","GrCycle","FiCornerUpRight","FiCornerUpLeft","BottomBarDirections","routes","legs","overflowY","divider","steps","step","i","ml","dangerouslySetInnerHTML","__html","instructions","SpacesNearYou","onCardClick","userLocation","overflowX","nearby_spaces","onClick","parking_lot","minW","borderWidth","distance","MotionBox","chakra","motion","div","spring","stiffness","damping","MapBottomBar","selectedLot","setSelectedLot","isOpen","setIsOpen","controls","useAnimation","prevIsOpen","previousValueRef","useRef","current","usePrevious","React","alertIsOpen","setAlertIsOpen","cancelRef","start","bottom","left","zIndex","pointerEvents","flexDirection","borderTopLeftRadius","borderTopRightRadius","drag","initial","animate","variants","visible","y","hidden","onDragEnd","event","info","velocity","point","dragConstraints","top","minH","variant","aria-label","parking_lot_by_pk","leastDestructiveRef","onClose","motionPreset","preserveScrollBarGap","ref","styles","featureType","elementType","stylers","visibility","CurrentLocationMarker","scale","fillOpacity","strokeWeight","fillColor","strokeColor","MapComponent","center","lots","onMarkerClick","currentPos","gmap","setGmap","renderedMarkers","useMemo","CustomMarker","is_full","filter","panTo","googleMapsApiKey","onLoad","options","disableDefaultUI","clickableIcons","mapContainerStyle","width","height","zoom","props","url","anchor","google","maps","Point","scaledSize","Size","memo","HomeOverlayButtons","useDisclosure","onOpen","btnRef","placement","finalFocusRef","MdMap","MdLocalParking","FullPageLoading","thickness","emptyColor","MapDirections","origin","travelMode","callback","resp","log","suppressMarkers","Home","lot_error","loading","isBottomBarOpen","setIsBottomBarOpen","mapCenter","setMapCenter","find","ParkingSpacesHeader","lot_name","lot_id","is_admin","history","useHistory","refetch","useAddToFavoritesMutation","uid","parking_lot_id","onCompleted","addFavorite","goBack","favorites","FullPageError","boxSize","RiEmotionSadLine","my","ParkingSpace","space","is_entry","is_exit","is_occupied","is_road","is_blank","space_id","is_disabled","rotation","is_down","is_selected","m","transform","textAlign","userSelect","MdArrowUpward","MdArrowDownward","border","MdErrorOutline","ParkingLotMap","lot_rows","onSpaceClick","selectedSpaceId","gridRef","ele","x","mouseMoveHandler","dx","clientX","dy","clientY","scrollTop","scrollLeft","mouseUpHandler","cursor","removeProperty","document","removeEventListener","mouseDownHandler","addEventListener","justifyContent","parking_spaces","length","gridTemplateRows","gridTemplateColumns","padding","row","j","ParkingSpacesDetails","setSelectedSpaceId","useMotionValue","pb","ParkingLotSpaces","useParams","md","borderTop","borderTopRadius","push","Register","firstname","lastname","email","password","rpt_password","setData","handleChange","target","onSubmit","preventDefault","onChange","placeholder","alignitem","Login","defaultIsChecked","AdminLotList","stack","maxW","institution_by_pk","replace","src","lot_image","fallbackSrc","AdminLot","selectedSpace","setSelectedSpace","pageLoading","update_parking_space_by_pk","updateSpace","spaceLoading","useUpdateParkingLotMutation","updateLot","showProcessed","setShowProcessed","pt","spaceData","_set","orientation","isLoading","ParkingLotList","key","AdminDrivers","py","user","user_id","first_name","last_name","App","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","hostname","match","Fonts","client","ApolloClient","uri","cache","InMemoryCache","setItem","theme","extendTheme","fonts","heading","body","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e9d9bbec.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  bigint: any;\n  json: any;\n  timestamptz: any;\n  uuid: any;\n};\n\n/** expression to compare columns of type Boolean. All fields are combined with logical 'AND'. */\nexport type Boolean_Comparison_Exp = {\n  _eq?: Maybe<Scalars['Boolean']>;\n  _gt?: Maybe<Scalars['Boolean']>;\n  _gte?: Maybe<Scalars['Boolean']>;\n  _in?: Maybe<Array<Scalars['Boolean']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['Boolean']>;\n  _lte?: Maybe<Scalars['Boolean']>;\n  _neq?: Maybe<Scalars['Boolean']>;\n  _nin?: Maybe<Array<Scalars['Boolean']>>;\n};\n\n/** expression to compare columns of type Float. All fields are combined with logical 'AND'. */\nexport type Float_Comparison_Exp = {\n  _eq?: Maybe<Scalars['Float']>;\n  _gt?: Maybe<Scalars['Float']>;\n  _gte?: Maybe<Scalars['Float']>;\n  _in?: Maybe<Array<Scalars['Float']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['Float']>;\n  _lte?: Maybe<Scalars['Float']>;\n  _neq?: Maybe<Scalars['Float']>;\n  _nin?: Maybe<Array<Scalars['Float']>>;\n};\n\n/** expression to compare columns of type Int. All fields are combined with logical 'AND'. */\nexport type Int_Comparison_Exp = {\n  _eq?: Maybe<Scalars['Int']>;\n  _gt?: Maybe<Scalars['Int']>;\n  _gte?: Maybe<Scalars['Int']>;\n  _in?: Maybe<Array<Scalars['Int']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['Int']>;\n  _lte?: Maybe<Scalars['Int']>;\n  _neq?: Maybe<Scalars['Int']>;\n  _nin?: Maybe<Array<Scalars['Int']>>;\n};\n\nexport type NearbySpacesInput = {\n  lat: Scalars['Float'];\n  lng: Scalars['Float'];\n};\n\nexport type NearbySpacesOutput = {\n  __typename?: 'NearbySpacesOutput';\n  distance: Scalars['Float'];\n  parking_lot?: Maybe<Parking_Lot>;\n  parking_lot_id: Scalars['Int'];\n};\n\n/** expression to compare columns of type String. All fields are combined with logical 'AND'. */\nexport type String_Comparison_Exp = {\n  _eq?: Maybe<Scalars['String']>;\n  _gt?: Maybe<Scalars['String']>;\n  _gte?: Maybe<Scalars['String']>;\n  _ilike?: Maybe<Scalars['String']>;\n  _in?: Maybe<Array<Scalars['String']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _like?: Maybe<Scalars['String']>;\n  _lt?: Maybe<Scalars['String']>;\n  _lte?: Maybe<Scalars['String']>;\n  _neq?: Maybe<Scalars['String']>;\n  _nilike?: Maybe<Scalars['String']>;\n  _nin?: Maybe<Array<Scalars['String']>>;\n  _nlike?: Maybe<Scalars['String']>;\n  _nsimilar?: Maybe<Scalars['String']>;\n  _similar?: Maybe<Scalars['String']>;\n};\n\n\n/** expression to compare columns of type bigint. All fields are combined with logical 'AND'. */\nexport type Bigint_Comparison_Exp = {\n  _eq?: Maybe<Scalars['bigint']>;\n  _gt?: Maybe<Scalars['bigint']>;\n  _gte?: Maybe<Scalars['bigint']>;\n  _in?: Maybe<Array<Scalars['bigint']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['bigint']>;\n  _lte?: Maybe<Scalars['bigint']>;\n  _neq?: Maybe<Scalars['bigint']>;\n  _nin?: Maybe<Array<Scalars['bigint']>>;\n};\n\n/** columns and relationships of \"favorites\" */\nexport type Favorites = {\n  __typename?: 'favorites';\n  /** An object relationship */\n  parking_lot: Parking_Lot;\n  parking_lot_id: Scalars['Int'];\n  /** An object relationship */\n  user: User;\n  user_id: Scalars['Int'];\n};\n\n/** aggregated selection of \"favorites\" */\nexport type Favorites_Aggregate = {\n  __typename?: 'favorites_aggregate';\n  aggregate?: Maybe<Favorites_Aggregate_Fields>;\n  nodes: Array<Favorites>;\n};\n\n/** aggregate fields of \"favorites\" */\nexport type Favorites_Aggregate_Fields = {\n  __typename?: 'favorites_aggregate_fields';\n  avg?: Maybe<Favorites_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Favorites_Max_Fields>;\n  min?: Maybe<Favorites_Min_Fields>;\n  stddev?: Maybe<Favorites_Stddev_Fields>;\n  stddev_pop?: Maybe<Favorites_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Favorites_Stddev_Samp_Fields>;\n  sum?: Maybe<Favorites_Sum_Fields>;\n  var_pop?: Maybe<Favorites_Var_Pop_Fields>;\n  var_samp?: Maybe<Favorites_Var_Samp_Fields>;\n  variance?: Maybe<Favorites_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"favorites\" */\nexport type Favorites_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Favorites_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"favorites\" */\nexport type Favorites_Aggregate_Order_By = {\n  avg?: Maybe<Favorites_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Favorites_Max_Order_By>;\n  min?: Maybe<Favorites_Min_Order_By>;\n  stddev?: Maybe<Favorites_Stddev_Order_By>;\n  stddev_pop?: Maybe<Favorites_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Favorites_Stddev_Samp_Order_By>;\n  sum?: Maybe<Favorites_Sum_Order_By>;\n  var_pop?: Maybe<Favorites_Var_Pop_Order_By>;\n  var_samp?: Maybe<Favorites_Var_Samp_Order_By>;\n  variance?: Maybe<Favorites_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"favorites\" */\nexport type Favorites_Arr_Rel_Insert_Input = {\n  data: Array<Favorites_Insert_Input>;\n  on_conflict?: Maybe<Favorites_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Favorites_Avg_Fields = {\n  __typename?: 'favorites_avg_fields';\n  parking_lot_id?: Maybe<Scalars['Float']>;\n  user_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"favorites\" */\nexport type Favorites_Avg_Order_By = {\n  parking_lot_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"favorites\". All fields are combined with a logical 'AND'. */\nexport type Favorites_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Favorites_Bool_Exp>>>;\n  _not?: Maybe<Favorites_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Favorites_Bool_Exp>>>;\n  parking_lot?: Maybe<Parking_Lot_Bool_Exp>;\n  parking_lot_id?: Maybe<Int_Comparison_Exp>;\n  user?: Maybe<User_Bool_Exp>;\n  user_id?: Maybe<Int_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"favorites\" */\nexport enum Favorites_Constraint {\n  /** unique or primary key constraint */\n  FavoritesUserIdParkingLotIdUnique = 'favorites_user_id_parking_lot_id_unique'\n}\n\n/** input type for incrementing integer column in table \"favorites\" */\nexport type Favorites_Inc_Input = {\n  parking_lot_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"favorites\" */\nexport type Favorites_Insert_Input = {\n  parking_lot?: Maybe<Parking_Lot_Obj_Rel_Insert_Input>;\n  parking_lot_id?: Maybe<Scalars['Int']>;\n  user?: Maybe<User_Obj_Rel_Insert_Input>;\n  user_id?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate max on columns */\nexport type Favorites_Max_Fields = {\n  __typename?: 'favorites_max_fields';\n  parking_lot_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by max() on columns of table \"favorites\" */\nexport type Favorites_Max_Order_By = {\n  parking_lot_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Favorites_Min_Fields = {\n  __typename?: 'favorites_min_fields';\n  parking_lot_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by min() on columns of table \"favorites\" */\nexport type Favorites_Min_Order_By = {\n  parking_lot_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"favorites\" */\nexport type Favorites_Mutation_Response = {\n  __typename?: 'favorites_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Favorites>;\n};\n\n/** input type for inserting object relation for remote table \"favorites\" */\nexport type Favorites_Obj_Rel_Insert_Input = {\n  data: Favorites_Insert_Input;\n  on_conflict?: Maybe<Favorites_On_Conflict>;\n};\n\n/** on conflict condition type for table \"favorites\" */\nexport type Favorites_On_Conflict = {\n  constraint: Favorites_Constraint;\n  update_columns: Array<Favorites_Update_Column>;\n  where?: Maybe<Favorites_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"favorites\" */\nexport type Favorites_Order_By = {\n  parking_lot?: Maybe<Parking_Lot_Order_By>;\n  parking_lot_id?: Maybe<Order_By>;\n  user?: Maybe<User_Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** select columns of table \"favorites\" */\nexport enum Favorites_Select_Column {\n  /** column name */\n  ParkingLotId = 'parking_lot_id',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** input type for updating data in table \"favorites\" */\nexport type Favorites_Set_Input = {\n  parking_lot_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate stddev on columns */\nexport type Favorites_Stddev_Fields = {\n  __typename?: 'favorites_stddev_fields';\n  parking_lot_id?: Maybe<Scalars['Float']>;\n  user_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"favorites\" */\nexport type Favorites_Stddev_Order_By = {\n  parking_lot_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Favorites_Stddev_Pop_Fields = {\n  __typename?: 'favorites_stddev_pop_fields';\n  parking_lot_id?: Maybe<Scalars['Float']>;\n  user_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"favorites\" */\nexport type Favorites_Stddev_Pop_Order_By = {\n  parking_lot_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Favorites_Stddev_Samp_Fields = {\n  __typename?: 'favorites_stddev_samp_fields';\n  parking_lot_id?: Maybe<Scalars['Float']>;\n  user_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"favorites\" */\nexport type Favorites_Stddev_Samp_Order_By = {\n  parking_lot_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Favorites_Sum_Fields = {\n  __typename?: 'favorites_sum_fields';\n  parking_lot_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"favorites\" */\nexport type Favorites_Sum_Order_By = {\n  parking_lot_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"favorites\" */\nexport enum Favorites_Update_Column {\n  /** column name */\n  ParkingLotId = 'parking_lot_id',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** aggregate var_pop on columns */\nexport type Favorites_Var_Pop_Fields = {\n  __typename?: 'favorites_var_pop_fields';\n  parking_lot_id?: Maybe<Scalars['Float']>;\n  user_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"favorites\" */\nexport type Favorites_Var_Pop_Order_By = {\n  parking_lot_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Favorites_Var_Samp_Fields = {\n  __typename?: 'favorites_var_samp_fields';\n  parking_lot_id?: Maybe<Scalars['Float']>;\n  user_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"favorites\" */\nexport type Favorites_Var_Samp_Order_By = {\n  parking_lot_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Favorites_Variance_Fields = {\n  __typename?: 'favorites_variance_fields';\n  parking_lot_id?: Maybe<Scalars['Float']>;\n  user_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"favorites\" */\nexport type Favorites_Variance_Order_By = {\n  parking_lot_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"institution\" */\nexport type Institution = {\n  __typename?: 'institution';\n  id: Scalars['Int'];\n  name: Scalars['String'];\n  /** An array relationship */\n  parking_lots: Array<Parking_Lot>;\n  /** An aggregated array relationship */\n  parking_lots_aggregate: Parking_Lot_Aggregate;\n  /** An array relationship */\n  user_institutions: Array<User_Institution>;\n  /** An aggregated array relationship */\n  user_institutions_aggregate: User_Institution_Aggregate;\n};\n\n\n/** columns and relationships of \"institution\" */\nexport type InstitutionParking_LotsArgs = {\n  distinct_on?: Maybe<Array<Parking_Lot_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Parking_Lot_Order_By>>;\n  where?: Maybe<Parking_Lot_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"institution\" */\nexport type InstitutionParking_Lots_AggregateArgs = {\n  distinct_on?: Maybe<Array<Parking_Lot_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Parking_Lot_Order_By>>;\n  where?: Maybe<Parking_Lot_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"institution\" */\nexport type InstitutionUser_InstitutionsArgs = {\n  distinct_on?: Maybe<Array<User_Institution_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Institution_Order_By>>;\n  where?: Maybe<User_Institution_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"institution\" */\nexport type InstitutionUser_Institutions_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Institution_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Institution_Order_By>>;\n  where?: Maybe<User_Institution_Bool_Exp>;\n};\n\n/** aggregated selection of \"institution\" */\nexport type Institution_Aggregate = {\n  __typename?: 'institution_aggregate';\n  aggregate?: Maybe<Institution_Aggregate_Fields>;\n  nodes: Array<Institution>;\n};\n\n/** aggregate fields of \"institution\" */\nexport type Institution_Aggregate_Fields = {\n  __typename?: 'institution_aggregate_fields';\n  avg?: Maybe<Institution_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Institution_Max_Fields>;\n  min?: Maybe<Institution_Min_Fields>;\n  stddev?: Maybe<Institution_Stddev_Fields>;\n  stddev_pop?: Maybe<Institution_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Institution_Stddev_Samp_Fields>;\n  sum?: Maybe<Institution_Sum_Fields>;\n  var_pop?: Maybe<Institution_Var_Pop_Fields>;\n  var_samp?: Maybe<Institution_Var_Samp_Fields>;\n  variance?: Maybe<Institution_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"institution\" */\nexport type Institution_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Institution_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"institution\" */\nexport type Institution_Aggregate_Order_By = {\n  avg?: Maybe<Institution_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Institution_Max_Order_By>;\n  min?: Maybe<Institution_Min_Order_By>;\n  stddev?: Maybe<Institution_Stddev_Order_By>;\n  stddev_pop?: Maybe<Institution_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Institution_Stddev_Samp_Order_By>;\n  sum?: Maybe<Institution_Sum_Order_By>;\n  var_pop?: Maybe<Institution_Var_Pop_Order_By>;\n  var_samp?: Maybe<Institution_Var_Samp_Order_By>;\n  variance?: Maybe<Institution_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"institution\" */\nexport type Institution_Arr_Rel_Insert_Input = {\n  data: Array<Institution_Insert_Input>;\n  on_conflict?: Maybe<Institution_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Institution_Avg_Fields = {\n  __typename?: 'institution_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"institution\" */\nexport type Institution_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"institution\". All fields are combined with a logical 'AND'. */\nexport type Institution_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Institution_Bool_Exp>>>;\n  _not?: Maybe<Institution_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Institution_Bool_Exp>>>;\n  id?: Maybe<Int_Comparison_Exp>;\n  name?: Maybe<String_Comparison_Exp>;\n  parking_lots?: Maybe<Parking_Lot_Bool_Exp>;\n  user_institutions?: Maybe<User_Institution_Bool_Exp>;\n};\n\n/** unique or primary key constraints on table \"institution\" */\nexport enum Institution_Constraint {\n  /** unique or primary key constraint */\n  InstitutionPkey = 'institution_pkey'\n}\n\n/** input type for incrementing integer column in table \"institution\" */\nexport type Institution_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"institution\" */\nexport type Institution_Insert_Input = {\n  id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  parking_lots?: Maybe<Parking_Lot_Arr_Rel_Insert_Input>;\n  user_institutions?: Maybe<User_Institution_Arr_Rel_Insert_Input>;\n};\n\n/** aggregate max on columns */\nexport type Institution_Max_Fields = {\n  __typename?: 'institution_max_fields';\n  id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"institution\" */\nexport type Institution_Max_Order_By = {\n  id?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Institution_Min_Fields = {\n  __typename?: 'institution_min_fields';\n  id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"institution\" */\nexport type Institution_Min_Order_By = {\n  id?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"institution\" */\nexport type Institution_Mutation_Response = {\n  __typename?: 'institution_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Institution>;\n};\n\n/** input type for inserting object relation for remote table \"institution\" */\nexport type Institution_Obj_Rel_Insert_Input = {\n  data: Institution_Insert_Input;\n  on_conflict?: Maybe<Institution_On_Conflict>;\n};\n\n/** on conflict condition type for table \"institution\" */\nexport type Institution_On_Conflict = {\n  constraint: Institution_Constraint;\n  update_columns: Array<Institution_Update_Column>;\n  where?: Maybe<Institution_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"institution\" */\nexport type Institution_Order_By = {\n  id?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n  parking_lots_aggregate?: Maybe<Parking_Lot_Aggregate_Order_By>;\n  user_institutions_aggregate?: Maybe<User_Institution_Aggregate_Order_By>;\n};\n\n/** primary key columns input for table: \"institution\" */\nexport type Institution_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"institution\" */\nexport enum Institution_Select_Column {\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Name = 'name'\n}\n\n/** input type for updating data in table \"institution\" */\nexport type Institution_Set_Input = {\n  id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type Institution_Stddev_Fields = {\n  __typename?: 'institution_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"institution\" */\nexport type Institution_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Institution_Stddev_Pop_Fields = {\n  __typename?: 'institution_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"institution\" */\nexport type Institution_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Institution_Stddev_Samp_Fields = {\n  __typename?: 'institution_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"institution\" */\nexport type Institution_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Institution_Sum_Fields = {\n  __typename?: 'institution_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"institution\" */\nexport type Institution_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"institution\" */\nexport enum Institution_Update_Column {\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Name = 'name'\n}\n\n/** aggregate var_pop on columns */\nexport type Institution_Var_Pop_Fields = {\n  __typename?: 'institution_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"institution\" */\nexport type Institution_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Institution_Var_Samp_Fields = {\n  __typename?: 'institution_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"institution\" */\nexport type Institution_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Institution_Variance_Fields = {\n  __typename?: 'institution_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"institution\" */\nexport type Institution_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n\n/** expression to compare columns of type json. All fields are combined with logical 'AND'. */\nexport type Json_Comparison_Exp = {\n  _eq?: Maybe<Scalars['json']>;\n  _gt?: Maybe<Scalars['json']>;\n  _gte?: Maybe<Scalars['json']>;\n  _in?: Maybe<Array<Scalars['json']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['json']>;\n  _lte?: Maybe<Scalars['json']>;\n  _neq?: Maybe<Scalars['json']>;\n  _nin?: Maybe<Array<Scalars['json']>>;\n};\n\n/** columns and relationships of \"knex_migrations\" */\nexport type Knex_Migrations = {\n  __typename?: 'knex_migrations';\n  batch?: Maybe<Scalars['Int']>;\n  id: Scalars['Int'];\n  migration_time?: Maybe<Scalars['timestamptz']>;\n  name?: Maybe<Scalars['String']>;\n};\n\n/** aggregated selection of \"knex_migrations\" */\nexport type Knex_Migrations_Aggregate = {\n  __typename?: 'knex_migrations_aggregate';\n  aggregate?: Maybe<Knex_Migrations_Aggregate_Fields>;\n  nodes: Array<Knex_Migrations>;\n};\n\n/** aggregate fields of \"knex_migrations\" */\nexport type Knex_Migrations_Aggregate_Fields = {\n  __typename?: 'knex_migrations_aggregate_fields';\n  avg?: Maybe<Knex_Migrations_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Knex_Migrations_Max_Fields>;\n  min?: Maybe<Knex_Migrations_Min_Fields>;\n  stddev?: Maybe<Knex_Migrations_Stddev_Fields>;\n  stddev_pop?: Maybe<Knex_Migrations_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Knex_Migrations_Stddev_Samp_Fields>;\n  sum?: Maybe<Knex_Migrations_Sum_Fields>;\n  var_pop?: Maybe<Knex_Migrations_Var_Pop_Fields>;\n  var_samp?: Maybe<Knex_Migrations_Var_Samp_Fields>;\n  variance?: Maybe<Knex_Migrations_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"knex_migrations\" */\nexport type Knex_Migrations_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Knex_Migrations_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"knex_migrations\" */\nexport type Knex_Migrations_Aggregate_Order_By = {\n  avg?: Maybe<Knex_Migrations_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Knex_Migrations_Max_Order_By>;\n  min?: Maybe<Knex_Migrations_Min_Order_By>;\n  stddev?: Maybe<Knex_Migrations_Stddev_Order_By>;\n  stddev_pop?: Maybe<Knex_Migrations_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Knex_Migrations_Stddev_Samp_Order_By>;\n  sum?: Maybe<Knex_Migrations_Sum_Order_By>;\n  var_pop?: Maybe<Knex_Migrations_Var_Pop_Order_By>;\n  var_samp?: Maybe<Knex_Migrations_Var_Samp_Order_By>;\n  variance?: Maybe<Knex_Migrations_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"knex_migrations\" */\nexport type Knex_Migrations_Arr_Rel_Insert_Input = {\n  data: Array<Knex_Migrations_Insert_Input>;\n  on_conflict?: Maybe<Knex_Migrations_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Knex_Migrations_Avg_Fields = {\n  __typename?: 'knex_migrations_avg_fields';\n  batch?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"knex_migrations\" */\nexport type Knex_Migrations_Avg_Order_By = {\n  batch?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"knex_migrations\". All fields are combined with a logical 'AND'. */\nexport type Knex_Migrations_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Knex_Migrations_Bool_Exp>>>;\n  _not?: Maybe<Knex_Migrations_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Knex_Migrations_Bool_Exp>>>;\n  batch?: Maybe<Int_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  migration_time?: Maybe<Timestamptz_Comparison_Exp>;\n  name?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"knex_migrations\" */\nexport enum Knex_Migrations_Constraint {\n  /** unique or primary key constraint */\n  KnexMigrationsPkey = 'knex_migrations_pkey'\n}\n\n/** input type for incrementing integer column in table \"knex_migrations\" */\nexport type Knex_Migrations_Inc_Input = {\n  batch?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"knex_migrations\" */\nexport type Knex_Migrations_Insert_Input = {\n  batch?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  migration_time?: Maybe<Scalars['timestamptz']>;\n  name?: Maybe<Scalars['String']>;\n};\n\n/** columns and relationships of \"knex_migrations_lock\" */\nexport type Knex_Migrations_Lock = {\n  __typename?: 'knex_migrations_lock';\n  index: Scalars['Int'];\n  is_locked?: Maybe<Scalars['Int']>;\n};\n\n/** aggregated selection of \"knex_migrations_lock\" */\nexport type Knex_Migrations_Lock_Aggregate = {\n  __typename?: 'knex_migrations_lock_aggregate';\n  aggregate?: Maybe<Knex_Migrations_Lock_Aggregate_Fields>;\n  nodes: Array<Knex_Migrations_Lock>;\n};\n\n/** aggregate fields of \"knex_migrations_lock\" */\nexport type Knex_Migrations_Lock_Aggregate_Fields = {\n  __typename?: 'knex_migrations_lock_aggregate_fields';\n  avg?: Maybe<Knex_Migrations_Lock_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Knex_Migrations_Lock_Max_Fields>;\n  min?: Maybe<Knex_Migrations_Lock_Min_Fields>;\n  stddev?: Maybe<Knex_Migrations_Lock_Stddev_Fields>;\n  stddev_pop?: Maybe<Knex_Migrations_Lock_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Knex_Migrations_Lock_Stddev_Samp_Fields>;\n  sum?: Maybe<Knex_Migrations_Lock_Sum_Fields>;\n  var_pop?: Maybe<Knex_Migrations_Lock_Var_Pop_Fields>;\n  var_samp?: Maybe<Knex_Migrations_Lock_Var_Samp_Fields>;\n  variance?: Maybe<Knex_Migrations_Lock_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"knex_migrations_lock\" */\nexport type Knex_Migrations_Lock_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Knex_Migrations_Lock_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"knex_migrations_lock\" */\nexport type Knex_Migrations_Lock_Aggregate_Order_By = {\n  avg?: Maybe<Knex_Migrations_Lock_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Knex_Migrations_Lock_Max_Order_By>;\n  min?: Maybe<Knex_Migrations_Lock_Min_Order_By>;\n  stddev?: Maybe<Knex_Migrations_Lock_Stddev_Order_By>;\n  stddev_pop?: Maybe<Knex_Migrations_Lock_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Knex_Migrations_Lock_Stddev_Samp_Order_By>;\n  sum?: Maybe<Knex_Migrations_Lock_Sum_Order_By>;\n  var_pop?: Maybe<Knex_Migrations_Lock_Var_Pop_Order_By>;\n  var_samp?: Maybe<Knex_Migrations_Lock_Var_Samp_Order_By>;\n  variance?: Maybe<Knex_Migrations_Lock_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"knex_migrations_lock\" */\nexport type Knex_Migrations_Lock_Arr_Rel_Insert_Input = {\n  data: Array<Knex_Migrations_Lock_Insert_Input>;\n  on_conflict?: Maybe<Knex_Migrations_Lock_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Knex_Migrations_Lock_Avg_Fields = {\n  __typename?: 'knex_migrations_lock_avg_fields';\n  index?: Maybe<Scalars['Float']>;\n  is_locked?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"knex_migrations_lock\" */\nexport type Knex_Migrations_Lock_Avg_Order_By = {\n  index?: Maybe<Order_By>;\n  is_locked?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"knex_migrations_lock\". All fields are combined with a logical 'AND'. */\nexport type Knex_Migrations_Lock_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Knex_Migrations_Lock_Bool_Exp>>>;\n  _not?: Maybe<Knex_Migrations_Lock_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Knex_Migrations_Lock_Bool_Exp>>>;\n  index?: Maybe<Int_Comparison_Exp>;\n  is_locked?: Maybe<Int_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"knex_migrations_lock\" */\nexport enum Knex_Migrations_Lock_Constraint {\n  /** unique or primary key constraint */\n  KnexMigrationsLockPkey = 'knex_migrations_lock_pkey'\n}\n\n/** input type for incrementing integer column in table \"knex_migrations_lock\" */\nexport type Knex_Migrations_Lock_Inc_Input = {\n  index?: Maybe<Scalars['Int']>;\n  is_locked?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"knex_migrations_lock\" */\nexport type Knex_Migrations_Lock_Insert_Input = {\n  index?: Maybe<Scalars['Int']>;\n  is_locked?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate max on columns */\nexport type Knex_Migrations_Lock_Max_Fields = {\n  __typename?: 'knex_migrations_lock_max_fields';\n  index?: Maybe<Scalars['Int']>;\n  is_locked?: Maybe<Scalars['Int']>;\n};\n\n/** order by max() on columns of table \"knex_migrations_lock\" */\nexport type Knex_Migrations_Lock_Max_Order_By = {\n  index?: Maybe<Order_By>;\n  is_locked?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Knex_Migrations_Lock_Min_Fields = {\n  __typename?: 'knex_migrations_lock_min_fields';\n  index?: Maybe<Scalars['Int']>;\n  is_locked?: Maybe<Scalars['Int']>;\n};\n\n/** order by min() on columns of table \"knex_migrations_lock\" */\nexport type Knex_Migrations_Lock_Min_Order_By = {\n  index?: Maybe<Order_By>;\n  is_locked?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"knex_migrations_lock\" */\nexport type Knex_Migrations_Lock_Mutation_Response = {\n  __typename?: 'knex_migrations_lock_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Knex_Migrations_Lock>;\n};\n\n/** input type for inserting object relation for remote table \"knex_migrations_lock\" */\nexport type Knex_Migrations_Lock_Obj_Rel_Insert_Input = {\n  data: Knex_Migrations_Lock_Insert_Input;\n  on_conflict?: Maybe<Knex_Migrations_Lock_On_Conflict>;\n};\n\n/** on conflict condition type for table \"knex_migrations_lock\" */\nexport type Knex_Migrations_Lock_On_Conflict = {\n  constraint: Knex_Migrations_Lock_Constraint;\n  update_columns: Array<Knex_Migrations_Lock_Update_Column>;\n  where?: Maybe<Knex_Migrations_Lock_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"knex_migrations_lock\" */\nexport type Knex_Migrations_Lock_Order_By = {\n  index?: Maybe<Order_By>;\n  is_locked?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"knex_migrations_lock\" */\nexport type Knex_Migrations_Lock_Pk_Columns_Input = {\n  index: Scalars['Int'];\n};\n\n/** select columns of table \"knex_migrations_lock\" */\nexport enum Knex_Migrations_Lock_Select_Column {\n  /** column name */\n  Index = 'index',\n  /** column name */\n  IsLocked = 'is_locked'\n}\n\n/** input type for updating data in table \"knex_migrations_lock\" */\nexport type Knex_Migrations_Lock_Set_Input = {\n  index?: Maybe<Scalars['Int']>;\n  is_locked?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate stddev on columns */\nexport type Knex_Migrations_Lock_Stddev_Fields = {\n  __typename?: 'knex_migrations_lock_stddev_fields';\n  index?: Maybe<Scalars['Float']>;\n  is_locked?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"knex_migrations_lock\" */\nexport type Knex_Migrations_Lock_Stddev_Order_By = {\n  index?: Maybe<Order_By>;\n  is_locked?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Knex_Migrations_Lock_Stddev_Pop_Fields = {\n  __typename?: 'knex_migrations_lock_stddev_pop_fields';\n  index?: Maybe<Scalars['Float']>;\n  is_locked?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"knex_migrations_lock\" */\nexport type Knex_Migrations_Lock_Stddev_Pop_Order_By = {\n  index?: Maybe<Order_By>;\n  is_locked?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Knex_Migrations_Lock_Stddev_Samp_Fields = {\n  __typename?: 'knex_migrations_lock_stddev_samp_fields';\n  index?: Maybe<Scalars['Float']>;\n  is_locked?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"knex_migrations_lock\" */\nexport type Knex_Migrations_Lock_Stddev_Samp_Order_By = {\n  index?: Maybe<Order_By>;\n  is_locked?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Knex_Migrations_Lock_Sum_Fields = {\n  __typename?: 'knex_migrations_lock_sum_fields';\n  index?: Maybe<Scalars['Int']>;\n  is_locked?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"knex_migrations_lock\" */\nexport type Knex_Migrations_Lock_Sum_Order_By = {\n  index?: Maybe<Order_By>;\n  is_locked?: Maybe<Order_By>;\n};\n\n/** update columns of table \"knex_migrations_lock\" */\nexport enum Knex_Migrations_Lock_Update_Column {\n  /** column name */\n  Index = 'index',\n  /** column name */\n  IsLocked = 'is_locked'\n}\n\n/** aggregate var_pop on columns */\nexport type Knex_Migrations_Lock_Var_Pop_Fields = {\n  __typename?: 'knex_migrations_lock_var_pop_fields';\n  index?: Maybe<Scalars['Float']>;\n  is_locked?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"knex_migrations_lock\" */\nexport type Knex_Migrations_Lock_Var_Pop_Order_By = {\n  index?: Maybe<Order_By>;\n  is_locked?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Knex_Migrations_Lock_Var_Samp_Fields = {\n  __typename?: 'knex_migrations_lock_var_samp_fields';\n  index?: Maybe<Scalars['Float']>;\n  is_locked?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"knex_migrations_lock\" */\nexport type Knex_Migrations_Lock_Var_Samp_Order_By = {\n  index?: Maybe<Order_By>;\n  is_locked?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Knex_Migrations_Lock_Variance_Fields = {\n  __typename?: 'knex_migrations_lock_variance_fields';\n  index?: Maybe<Scalars['Float']>;\n  is_locked?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"knex_migrations_lock\" */\nexport type Knex_Migrations_Lock_Variance_Order_By = {\n  index?: Maybe<Order_By>;\n  is_locked?: Maybe<Order_By>;\n};\n\n/** aggregate max on columns */\nexport type Knex_Migrations_Max_Fields = {\n  __typename?: 'knex_migrations_max_fields';\n  batch?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  migration_time?: Maybe<Scalars['timestamptz']>;\n  name?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"knex_migrations\" */\nexport type Knex_Migrations_Max_Order_By = {\n  batch?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  migration_time?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Knex_Migrations_Min_Fields = {\n  __typename?: 'knex_migrations_min_fields';\n  batch?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  migration_time?: Maybe<Scalars['timestamptz']>;\n  name?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"knex_migrations\" */\nexport type Knex_Migrations_Min_Order_By = {\n  batch?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  migration_time?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"knex_migrations\" */\nexport type Knex_Migrations_Mutation_Response = {\n  __typename?: 'knex_migrations_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Knex_Migrations>;\n};\n\n/** input type for inserting object relation for remote table \"knex_migrations\" */\nexport type Knex_Migrations_Obj_Rel_Insert_Input = {\n  data: Knex_Migrations_Insert_Input;\n  on_conflict?: Maybe<Knex_Migrations_On_Conflict>;\n};\n\n/** on conflict condition type for table \"knex_migrations\" */\nexport type Knex_Migrations_On_Conflict = {\n  constraint: Knex_Migrations_Constraint;\n  update_columns: Array<Knex_Migrations_Update_Column>;\n  where?: Maybe<Knex_Migrations_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"knex_migrations\" */\nexport type Knex_Migrations_Order_By = {\n  batch?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  migration_time?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"knex_migrations\" */\nexport type Knex_Migrations_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"knex_migrations\" */\nexport enum Knex_Migrations_Select_Column {\n  /** column name */\n  Batch = 'batch',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  MigrationTime = 'migration_time',\n  /** column name */\n  Name = 'name'\n}\n\n/** input type for updating data in table \"knex_migrations\" */\nexport type Knex_Migrations_Set_Input = {\n  batch?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  migration_time?: Maybe<Scalars['timestamptz']>;\n  name?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type Knex_Migrations_Stddev_Fields = {\n  __typename?: 'knex_migrations_stddev_fields';\n  batch?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"knex_migrations\" */\nexport type Knex_Migrations_Stddev_Order_By = {\n  batch?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Knex_Migrations_Stddev_Pop_Fields = {\n  __typename?: 'knex_migrations_stddev_pop_fields';\n  batch?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"knex_migrations\" */\nexport type Knex_Migrations_Stddev_Pop_Order_By = {\n  batch?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Knex_Migrations_Stddev_Samp_Fields = {\n  __typename?: 'knex_migrations_stddev_samp_fields';\n  batch?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"knex_migrations\" */\nexport type Knex_Migrations_Stddev_Samp_Order_By = {\n  batch?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Knex_Migrations_Sum_Fields = {\n  __typename?: 'knex_migrations_sum_fields';\n  batch?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"knex_migrations\" */\nexport type Knex_Migrations_Sum_Order_By = {\n  batch?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"knex_migrations\" */\nexport enum Knex_Migrations_Update_Column {\n  /** column name */\n  Batch = 'batch',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  MigrationTime = 'migration_time',\n  /** column name */\n  Name = 'name'\n}\n\n/** aggregate var_pop on columns */\nexport type Knex_Migrations_Var_Pop_Fields = {\n  __typename?: 'knex_migrations_var_pop_fields';\n  batch?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"knex_migrations\" */\nexport type Knex_Migrations_Var_Pop_Order_By = {\n  batch?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Knex_Migrations_Var_Samp_Fields = {\n  __typename?: 'knex_migrations_var_samp_fields';\n  batch?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"knex_migrations\" */\nexport type Knex_Migrations_Var_Samp_Order_By = {\n  batch?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Knex_Migrations_Variance_Fields = {\n  __typename?: 'knex_migrations_variance_fields';\n  batch?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"knex_migrations\" */\nexport type Knex_Migrations_Variance_Order_By = {\n  batch?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"location\" */\nexport type Location = {\n  __typename?: 'location';\n  address?: Maybe<Scalars['String']>;\n  id: Scalars['Int'];\n  latitude: Scalars['Float'];\n  longitude: Scalars['Float'];\n  /** An array relationship */\n  parking_lots: Array<Parking_Lot>;\n  /** An aggregated array relationship */\n  parking_lots_aggregate: Parking_Lot_Aggregate;\n};\n\n\n/** columns and relationships of \"location\" */\nexport type LocationParking_LotsArgs = {\n  distinct_on?: Maybe<Array<Parking_Lot_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Parking_Lot_Order_By>>;\n  where?: Maybe<Parking_Lot_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"location\" */\nexport type LocationParking_Lots_AggregateArgs = {\n  distinct_on?: Maybe<Array<Parking_Lot_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Parking_Lot_Order_By>>;\n  where?: Maybe<Parking_Lot_Bool_Exp>;\n};\n\n/** aggregated selection of \"location\" */\nexport type Location_Aggregate = {\n  __typename?: 'location_aggregate';\n  aggregate?: Maybe<Location_Aggregate_Fields>;\n  nodes: Array<Location>;\n};\n\n/** aggregate fields of \"location\" */\nexport type Location_Aggregate_Fields = {\n  __typename?: 'location_aggregate_fields';\n  avg?: Maybe<Location_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Location_Max_Fields>;\n  min?: Maybe<Location_Min_Fields>;\n  stddev?: Maybe<Location_Stddev_Fields>;\n  stddev_pop?: Maybe<Location_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Location_Stddev_Samp_Fields>;\n  sum?: Maybe<Location_Sum_Fields>;\n  var_pop?: Maybe<Location_Var_Pop_Fields>;\n  var_samp?: Maybe<Location_Var_Samp_Fields>;\n  variance?: Maybe<Location_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"location\" */\nexport type Location_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Location_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"location\" */\nexport type Location_Aggregate_Order_By = {\n  avg?: Maybe<Location_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Location_Max_Order_By>;\n  min?: Maybe<Location_Min_Order_By>;\n  stddev?: Maybe<Location_Stddev_Order_By>;\n  stddev_pop?: Maybe<Location_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Location_Stddev_Samp_Order_By>;\n  sum?: Maybe<Location_Sum_Order_By>;\n  var_pop?: Maybe<Location_Var_Pop_Order_By>;\n  var_samp?: Maybe<Location_Var_Samp_Order_By>;\n  variance?: Maybe<Location_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"location\" */\nexport type Location_Arr_Rel_Insert_Input = {\n  data: Array<Location_Insert_Input>;\n  on_conflict?: Maybe<Location_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Location_Avg_Fields = {\n  __typename?: 'location_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"location\" */\nexport type Location_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n  latitude?: Maybe<Order_By>;\n  longitude?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"location\". All fields are combined with a logical 'AND'. */\nexport type Location_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Location_Bool_Exp>>>;\n  _not?: Maybe<Location_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Location_Bool_Exp>>>;\n  address?: Maybe<String_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  latitude?: Maybe<Float_Comparison_Exp>;\n  longitude?: Maybe<Float_Comparison_Exp>;\n  parking_lots?: Maybe<Parking_Lot_Bool_Exp>;\n};\n\n/** unique or primary key constraints on table \"location\" */\nexport enum Location_Constraint {\n  /** unique or primary key constraint */\n  LocationPkey = 'location_pkey'\n}\n\n/** input type for incrementing integer column in table \"location\" */\nexport type Location_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n};\n\n/** input type for inserting data into table \"location\" */\nexport type Location_Insert_Input = {\n  address?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n  parking_lots?: Maybe<Parking_Lot_Arr_Rel_Insert_Input>;\n};\n\n/** aggregate max on columns */\nexport type Location_Max_Fields = {\n  __typename?: 'location_max_fields';\n  address?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n};\n\n/** order by max() on columns of table \"location\" */\nexport type Location_Max_Order_By = {\n  address?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  latitude?: Maybe<Order_By>;\n  longitude?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Location_Min_Fields = {\n  __typename?: 'location_min_fields';\n  address?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n};\n\n/** order by min() on columns of table \"location\" */\nexport type Location_Min_Order_By = {\n  address?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  latitude?: Maybe<Order_By>;\n  longitude?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"location\" */\nexport type Location_Mutation_Response = {\n  __typename?: 'location_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Location>;\n};\n\n/** input type for inserting object relation for remote table \"location\" */\nexport type Location_Obj_Rel_Insert_Input = {\n  data: Location_Insert_Input;\n  on_conflict?: Maybe<Location_On_Conflict>;\n};\n\n/** on conflict condition type for table \"location\" */\nexport type Location_On_Conflict = {\n  constraint: Location_Constraint;\n  update_columns: Array<Location_Update_Column>;\n  where?: Maybe<Location_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"location\" */\nexport type Location_Order_By = {\n  address?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  latitude?: Maybe<Order_By>;\n  longitude?: Maybe<Order_By>;\n  parking_lots_aggregate?: Maybe<Parking_Lot_Aggregate_Order_By>;\n};\n\n/** primary key columns input for table: \"location\" */\nexport type Location_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"location\" */\nexport enum Location_Select_Column {\n  /** column name */\n  Address = 'address',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Latitude = 'latitude',\n  /** column name */\n  Longitude = 'longitude'\n}\n\n/** input type for updating data in table \"location\" */\nexport type Location_Set_Input = {\n  address?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev on columns */\nexport type Location_Stddev_Fields = {\n  __typename?: 'location_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"location\" */\nexport type Location_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n  latitude?: Maybe<Order_By>;\n  longitude?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Location_Stddev_Pop_Fields = {\n  __typename?: 'location_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"location\" */\nexport type Location_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  latitude?: Maybe<Order_By>;\n  longitude?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Location_Stddev_Samp_Fields = {\n  __typename?: 'location_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"location\" */\nexport type Location_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  latitude?: Maybe<Order_By>;\n  longitude?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Location_Sum_Fields = {\n  __typename?: 'location_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n};\n\n/** order by sum() on columns of table \"location\" */\nexport type Location_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n  latitude?: Maybe<Order_By>;\n  longitude?: Maybe<Order_By>;\n};\n\n/** update columns of table \"location\" */\nexport enum Location_Update_Column {\n  /** column name */\n  Address = 'address',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Latitude = 'latitude',\n  /** column name */\n  Longitude = 'longitude'\n}\n\n/** aggregate var_pop on columns */\nexport type Location_Var_Pop_Fields = {\n  __typename?: 'location_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"location\" */\nexport type Location_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  latitude?: Maybe<Order_By>;\n  longitude?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Location_Var_Samp_Fields = {\n  __typename?: 'location_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"location\" */\nexport type Location_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  latitude?: Maybe<Order_By>;\n  longitude?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Location_Variance_Fields = {\n  __typename?: 'location_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"location\" */\nexport type Location_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n  latitude?: Maybe<Order_By>;\n  longitude?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"lot_row\" */\nexport type Lot_Row = {\n  __typename?: 'lot_row';\n  id: Scalars['Int'];\n  /** An object relationship */\n  parking_lot: Parking_Lot;\n  parking_lot_id: Scalars['Int'];\n  /** An array relationship */\n  parking_spaces: Array<Parking_Space>;\n  /** An aggregated array relationship */\n  parking_spaces_aggregate: Parking_Space_Aggregate;\n};\n\n\n/** columns and relationships of \"lot_row\" */\nexport type Lot_RowParking_SpacesArgs = {\n  distinct_on?: Maybe<Array<Parking_Space_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Parking_Space_Order_By>>;\n  where?: Maybe<Parking_Space_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"lot_row\" */\nexport type Lot_RowParking_Spaces_AggregateArgs = {\n  distinct_on?: Maybe<Array<Parking_Space_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Parking_Space_Order_By>>;\n  where?: Maybe<Parking_Space_Bool_Exp>;\n};\n\n/** aggregated selection of \"lot_row\" */\nexport type Lot_Row_Aggregate = {\n  __typename?: 'lot_row_aggregate';\n  aggregate?: Maybe<Lot_Row_Aggregate_Fields>;\n  nodes: Array<Lot_Row>;\n};\n\n/** aggregate fields of \"lot_row\" */\nexport type Lot_Row_Aggregate_Fields = {\n  __typename?: 'lot_row_aggregate_fields';\n  avg?: Maybe<Lot_Row_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Lot_Row_Max_Fields>;\n  min?: Maybe<Lot_Row_Min_Fields>;\n  stddev?: Maybe<Lot_Row_Stddev_Fields>;\n  stddev_pop?: Maybe<Lot_Row_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Lot_Row_Stddev_Samp_Fields>;\n  sum?: Maybe<Lot_Row_Sum_Fields>;\n  var_pop?: Maybe<Lot_Row_Var_Pop_Fields>;\n  var_samp?: Maybe<Lot_Row_Var_Samp_Fields>;\n  variance?: Maybe<Lot_Row_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"lot_row\" */\nexport type Lot_Row_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Lot_Row_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"lot_row\" */\nexport type Lot_Row_Aggregate_Order_By = {\n  avg?: Maybe<Lot_Row_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Lot_Row_Max_Order_By>;\n  min?: Maybe<Lot_Row_Min_Order_By>;\n  stddev?: Maybe<Lot_Row_Stddev_Order_By>;\n  stddev_pop?: Maybe<Lot_Row_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Lot_Row_Stddev_Samp_Order_By>;\n  sum?: Maybe<Lot_Row_Sum_Order_By>;\n  var_pop?: Maybe<Lot_Row_Var_Pop_Order_By>;\n  var_samp?: Maybe<Lot_Row_Var_Samp_Order_By>;\n  variance?: Maybe<Lot_Row_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"lot_row\" */\nexport type Lot_Row_Arr_Rel_Insert_Input = {\n  data: Array<Lot_Row_Insert_Input>;\n  on_conflict?: Maybe<Lot_Row_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Lot_Row_Avg_Fields = {\n  __typename?: 'lot_row_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n  parking_lot_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"lot_row\" */\nexport type Lot_Row_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n  parking_lot_id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"lot_row\". All fields are combined with a logical 'AND'. */\nexport type Lot_Row_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Lot_Row_Bool_Exp>>>;\n  _not?: Maybe<Lot_Row_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Lot_Row_Bool_Exp>>>;\n  id?: Maybe<Int_Comparison_Exp>;\n  parking_lot?: Maybe<Parking_Lot_Bool_Exp>;\n  parking_lot_id?: Maybe<Int_Comparison_Exp>;\n  parking_spaces?: Maybe<Parking_Space_Bool_Exp>;\n};\n\n/** unique or primary key constraints on table \"lot_row\" */\nexport enum Lot_Row_Constraint {\n  /** unique or primary key constraint */\n  LotRowPkey = 'lot_row_pkey'\n}\n\n/** input type for incrementing integer column in table \"lot_row\" */\nexport type Lot_Row_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n  parking_lot_id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"lot_row\" */\nexport type Lot_Row_Insert_Input = {\n  id?: Maybe<Scalars['Int']>;\n  parking_lot?: Maybe<Parking_Lot_Obj_Rel_Insert_Input>;\n  parking_lot_id?: Maybe<Scalars['Int']>;\n  parking_spaces?: Maybe<Parking_Space_Arr_Rel_Insert_Input>;\n};\n\n/** aggregate max on columns */\nexport type Lot_Row_Max_Fields = {\n  __typename?: 'lot_row_max_fields';\n  id?: Maybe<Scalars['Int']>;\n  parking_lot_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by max() on columns of table \"lot_row\" */\nexport type Lot_Row_Max_Order_By = {\n  id?: Maybe<Order_By>;\n  parking_lot_id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Lot_Row_Min_Fields = {\n  __typename?: 'lot_row_min_fields';\n  id?: Maybe<Scalars['Int']>;\n  parking_lot_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by min() on columns of table \"lot_row\" */\nexport type Lot_Row_Min_Order_By = {\n  id?: Maybe<Order_By>;\n  parking_lot_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"lot_row\" */\nexport type Lot_Row_Mutation_Response = {\n  __typename?: 'lot_row_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Lot_Row>;\n};\n\n/** input type for inserting object relation for remote table \"lot_row\" */\nexport type Lot_Row_Obj_Rel_Insert_Input = {\n  data: Lot_Row_Insert_Input;\n  on_conflict?: Maybe<Lot_Row_On_Conflict>;\n};\n\n/** on conflict condition type for table \"lot_row\" */\nexport type Lot_Row_On_Conflict = {\n  constraint: Lot_Row_Constraint;\n  update_columns: Array<Lot_Row_Update_Column>;\n  where?: Maybe<Lot_Row_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"lot_row\" */\nexport type Lot_Row_Order_By = {\n  id?: Maybe<Order_By>;\n  parking_lot?: Maybe<Parking_Lot_Order_By>;\n  parking_lot_id?: Maybe<Order_By>;\n  parking_spaces_aggregate?: Maybe<Parking_Space_Aggregate_Order_By>;\n};\n\n/** primary key columns input for table: \"lot_row\" */\nexport type Lot_Row_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"lot_row\" */\nexport enum Lot_Row_Select_Column {\n  /** column name */\n  Id = 'id',\n  /** column name */\n  ParkingLotId = 'parking_lot_id'\n}\n\n/** input type for updating data in table \"lot_row\" */\nexport type Lot_Row_Set_Input = {\n  id?: Maybe<Scalars['Int']>;\n  parking_lot_id?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate stddev on columns */\nexport type Lot_Row_Stddev_Fields = {\n  __typename?: 'lot_row_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n  parking_lot_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"lot_row\" */\nexport type Lot_Row_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n  parking_lot_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Lot_Row_Stddev_Pop_Fields = {\n  __typename?: 'lot_row_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  parking_lot_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"lot_row\" */\nexport type Lot_Row_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  parking_lot_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Lot_Row_Stddev_Samp_Fields = {\n  __typename?: 'lot_row_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  parking_lot_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"lot_row\" */\nexport type Lot_Row_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  parking_lot_id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Lot_Row_Sum_Fields = {\n  __typename?: 'lot_row_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n  parking_lot_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"lot_row\" */\nexport type Lot_Row_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n  parking_lot_id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"lot_row\" */\nexport enum Lot_Row_Update_Column {\n  /** column name */\n  Id = 'id',\n  /** column name */\n  ParkingLotId = 'parking_lot_id'\n}\n\n/** aggregate var_pop on columns */\nexport type Lot_Row_Var_Pop_Fields = {\n  __typename?: 'lot_row_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  parking_lot_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"lot_row\" */\nexport type Lot_Row_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  parking_lot_id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Lot_Row_Var_Samp_Fields = {\n  __typename?: 'lot_row_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  parking_lot_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"lot_row\" */\nexport type Lot_Row_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  parking_lot_id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Lot_Row_Variance_Fields = {\n  __typename?: 'lot_row_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n  parking_lot_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"lot_row\" */\nexport type Lot_Row_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n  parking_lot_id?: Maybe<Order_By>;\n};\n\n/** mutation root */\nexport type Mutation_Root = {\n  __typename?: 'mutation_root';\n  /** delete data from the table: \"favorites\" */\n  delete_favorites?: Maybe<Favorites_Mutation_Response>;\n  /** delete data from the table: \"institution\" */\n  delete_institution?: Maybe<Institution_Mutation_Response>;\n  /** delete single row from the table: \"institution\" */\n  delete_institution_by_pk?: Maybe<Institution>;\n  /** delete data from the table: \"knex_migrations\" */\n  delete_knex_migrations?: Maybe<Knex_Migrations_Mutation_Response>;\n  /** delete single row from the table: \"knex_migrations\" */\n  delete_knex_migrations_by_pk?: Maybe<Knex_Migrations>;\n  /** delete data from the table: \"knex_migrations_lock\" */\n  delete_knex_migrations_lock?: Maybe<Knex_Migrations_Lock_Mutation_Response>;\n  /** delete single row from the table: \"knex_migrations_lock\" */\n  delete_knex_migrations_lock_by_pk?: Maybe<Knex_Migrations_Lock>;\n  /** delete data from the table: \"location\" */\n  delete_location?: Maybe<Location_Mutation_Response>;\n  /** delete single row from the table: \"location\" */\n  delete_location_by_pk?: Maybe<Location>;\n  /** delete data from the table: \"lot_row\" */\n  delete_lot_row?: Maybe<Lot_Row_Mutation_Response>;\n  /** delete single row from the table: \"lot_row\" */\n  delete_lot_row_by_pk?: Maybe<Lot_Row>;\n  /** delete data from the table: \"parking_lot\" */\n  delete_parking_lot?: Maybe<Parking_Lot_Mutation_Response>;\n  /** delete single row from the table: \"parking_lot\" */\n  delete_parking_lot_by_pk?: Maybe<Parking_Lot>;\n  /** delete data from the table: \"parking_space\" */\n  delete_parking_space?: Maybe<Parking_Space_Mutation_Response>;\n  /** delete single row from the table: \"parking_space\" */\n  delete_parking_space_by_pk?: Maybe<Parking_Space>;\n  /** delete data from the table: \"past_lot_occupancy\" */\n  delete_past_lot_occupancy?: Maybe<Past_Lot_Occupancy_Mutation_Response>;\n  /** delete single row from the table: \"past_lot_occupancy\" */\n  delete_past_lot_occupancy_by_pk?: Maybe<Past_Lot_Occupancy>;\n  /** delete data from the table: \"user\" */\n  delete_user?: Maybe<User_Mutation_Response>;\n  /** delete single row from the table: \"user\" */\n  delete_user_by_pk?: Maybe<User>;\n  /** delete data from the table: \"user_institution\" */\n  delete_user_institution?: Maybe<User_Institution_Mutation_Response>;\n  /** insert data into the table: \"favorites\" */\n  insert_favorites?: Maybe<Favorites_Mutation_Response>;\n  /** insert a single row into the table: \"favorites\" */\n  insert_favorites_one?: Maybe<Favorites>;\n  /** insert data into the table: \"institution\" */\n  insert_institution?: Maybe<Institution_Mutation_Response>;\n  /** insert a single row into the table: \"institution\" */\n  insert_institution_one?: Maybe<Institution>;\n  /** insert data into the table: \"knex_migrations\" */\n  insert_knex_migrations?: Maybe<Knex_Migrations_Mutation_Response>;\n  /** insert data into the table: \"knex_migrations_lock\" */\n  insert_knex_migrations_lock?: Maybe<Knex_Migrations_Lock_Mutation_Response>;\n  /** insert a single row into the table: \"knex_migrations_lock\" */\n  insert_knex_migrations_lock_one?: Maybe<Knex_Migrations_Lock>;\n  /** insert a single row into the table: \"knex_migrations\" */\n  insert_knex_migrations_one?: Maybe<Knex_Migrations>;\n  /** insert data into the table: \"location\" */\n  insert_location?: Maybe<Location_Mutation_Response>;\n  /** insert a single row into the table: \"location\" */\n  insert_location_one?: Maybe<Location>;\n  /** insert data into the table: \"lot_row\" */\n  insert_lot_row?: Maybe<Lot_Row_Mutation_Response>;\n  /** insert a single row into the table: \"lot_row\" */\n  insert_lot_row_one?: Maybe<Lot_Row>;\n  /** insert data into the table: \"parking_lot\" */\n  insert_parking_lot?: Maybe<Parking_Lot_Mutation_Response>;\n  /** insert a single row into the table: \"parking_lot\" */\n  insert_parking_lot_one?: Maybe<Parking_Lot>;\n  /** insert data into the table: \"parking_space\" */\n  insert_parking_space?: Maybe<Parking_Space_Mutation_Response>;\n  /** insert a single row into the table: \"parking_space\" */\n  insert_parking_space_one?: Maybe<Parking_Space>;\n  /** insert data into the table: \"past_lot_occupancy\" */\n  insert_past_lot_occupancy?: Maybe<Past_Lot_Occupancy_Mutation_Response>;\n  /** insert a single row into the table: \"past_lot_occupancy\" */\n  insert_past_lot_occupancy_one?: Maybe<Past_Lot_Occupancy>;\n  /** insert data into the table: \"user\" */\n  insert_user?: Maybe<User_Mutation_Response>;\n  /** insert data into the table: \"user_institution\" */\n  insert_user_institution?: Maybe<User_Institution_Mutation_Response>;\n  /** insert a single row into the table: \"user_institution\" */\n  insert_user_institution_one?: Maybe<User_Institution>;\n  /** insert a single row into the table: \"user\" */\n  insert_user_one?: Maybe<User>;\n  /** update data of the table: \"favorites\" */\n  update_favorites?: Maybe<Favorites_Mutation_Response>;\n  /** update data of the table: \"institution\" */\n  update_institution?: Maybe<Institution_Mutation_Response>;\n  /** update single row of the table: \"institution\" */\n  update_institution_by_pk?: Maybe<Institution>;\n  /** update data of the table: \"knex_migrations\" */\n  update_knex_migrations?: Maybe<Knex_Migrations_Mutation_Response>;\n  /** update single row of the table: \"knex_migrations\" */\n  update_knex_migrations_by_pk?: Maybe<Knex_Migrations>;\n  /** update data of the table: \"knex_migrations_lock\" */\n  update_knex_migrations_lock?: Maybe<Knex_Migrations_Lock_Mutation_Response>;\n  /** update single row of the table: \"knex_migrations_lock\" */\n  update_knex_migrations_lock_by_pk?: Maybe<Knex_Migrations_Lock>;\n  /** update data of the table: \"location\" */\n  update_location?: Maybe<Location_Mutation_Response>;\n  /** update single row of the table: \"location\" */\n  update_location_by_pk?: Maybe<Location>;\n  /** update data of the table: \"lot_row\" */\n  update_lot_row?: Maybe<Lot_Row_Mutation_Response>;\n  /** update single row of the table: \"lot_row\" */\n  update_lot_row_by_pk?: Maybe<Lot_Row>;\n  /** update data of the table: \"parking_lot\" */\n  update_parking_lot?: Maybe<Parking_Lot_Mutation_Response>;\n  /** update single row of the table: \"parking_lot\" */\n  update_parking_lot_by_pk?: Maybe<Parking_Lot>;\n  /** update data of the table: \"parking_space\" */\n  update_parking_space?: Maybe<Parking_Space_Mutation_Response>;\n  /** update single row of the table: \"parking_space\" */\n  update_parking_space_by_pk?: Maybe<Parking_Space>;\n  /** update data of the table: \"past_lot_occupancy\" */\n  update_past_lot_occupancy?: Maybe<Past_Lot_Occupancy_Mutation_Response>;\n  /** update single row of the table: \"past_lot_occupancy\" */\n  update_past_lot_occupancy_by_pk?: Maybe<Past_Lot_Occupancy>;\n  /** update data of the table: \"user\" */\n  update_user?: Maybe<User_Mutation_Response>;\n  /** update single row of the table: \"user\" */\n  update_user_by_pk?: Maybe<User>;\n  /** update data of the table: \"user_institution\" */\n  update_user_institution?: Maybe<User_Institution_Mutation_Response>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_FavoritesArgs = {\n  where: Favorites_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_InstitutionArgs = {\n  where: Institution_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Institution_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Knex_MigrationsArgs = {\n  where: Knex_Migrations_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Knex_Migrations_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Knex_Migrations_LockArgs = {\n  where: Knex_Migrations_Lock_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Knex_Migrations_Lock_By_PkArgs = {\n  index: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_LocationArgs = {\n  where: Location_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Location_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Lot_RowArgs = {\n  where: Lot_Row_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Lot_Row_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Parking_LotArgs = {\n  where: Parking_Lot_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Parking_Lot_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Parking_SpaceArgs = {\n  where: Parking_Space_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Parking_Space_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Past_Lot_OccupancyArgs = {\n  where: Past_Lot_Occupancy_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Past_Lot_Occupancy_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_UserArgs = {\n  where: User_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_User_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_User_InstitutionArgs = {\n  where: User_Institution_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_FavoritesArgs = {\n  objects: Array<Favorites_Insert_Input>;\n  on_conflict?: Maybe<Favorites_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Favorites_OneArgs = {\n  object: Favorites_Insert_Input;\n  on_conflict?: Maybe<Favorites_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_InstitutionArgs = {\n  objects: Array<Institution_Insert_Input>;\n  on_conflict?: Maybe<Institution_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Institution_OneArgs = {\n  object: Institution_Insert_Input;\n  on_conflict?: Maybe<Institution_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Knex_MigrationsArgs = {\n  objects: Array<Knex_Migrations_Insert_Input>;\n  on_conflict?: Maybe<Knex_Migrations_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Knex_Migrations_LockArgs = {\n  objects: Array<Knex_Migrations_Lock_Insert_Input>;\n  on_conflict?: Maybe<Knex_Migrations_Lock_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Knex_Migrations_Lock_OneArgs = {\n  object: Knex_Migrations_Lock_Insert_Input;\n  on_conflict?: Maybe<Knex_Migrations_Lock_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Knex_Migrations_OneArgs = {\n  object: Knex_Migrations_Insert_Input;\n  on_conflict?: Maybe<Knex_Migrations_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_LocationArgs = {\n  objects: Array<Location_Insert_Input>;\n  on_conflict?: Maybe<Location_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Location_OneArgs = {\n  object: Location_Insert_Input;\n  on_conflict?: Maybe<Location_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Lot_RowArgs = {\n  objects: Array<Lot_Row_Insert_Input>;\n  on_conflict?: Maybe<Lot_Row_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Lot_Row_OneArgs = {\n  object: Lot_Row_Insert_Input;\n  on_conflict?: Maybe<Lot_Row_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Parking_LotArgs = {\n  objects: Array<Parking_Lot_Insert_Input>;\n  on_conflict?: Maybe<Parking_Lot_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Parking_Lot_OneArgs = {\n  object: Parking_Lot_Insert_Input;\n  on_conflict?: Maybe<Parking_Lot_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Parking_SpaceArgs = {\n  objects: Array<Parking_Space_Insert_Input>;\n  on_conflict?: Maybe<Parking_Space_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Parking_Space_OneArgs = {\n  object: Parking_Space_Insert_Input;\n  on_conflict?: Maybe<Parking_Space_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Past_Lot_OccupancyArgs = {\n  objects: Array<Past_Lot_Occupancy_Insert_Input>;\n  on_conflict?: Maybe<Past_Lot_Occupancy_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Past_Lot_Occupancy_OneArgs = {\n  object: Past_Lot_Occupancy_Insert_Input;\n  on_conflict?: Maybe<Past_Lot_Occupancy_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_UserArgs = {\n  objects: Array<User_Insert_Input>;\n  on_conflict?: Maybe<User_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_InstitutionArgs = {\n  objects: Array<User_Institution_Insert_Input>;\n  on_conflict?: Maybe<User_Institution_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_Institution_OneArgs = {\n  object: User_Institution_Insert_Input;\n  on_conflict?: Maybe<User_Institution_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_OneArgs = {\n  object: User_Insert_Input;\n  on_conflict?: Maybe<User_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_FavoritesArgs = {\n  _inc?: Maybe<Favorites_Inc_Input>;\n  _set?: Maybe<Favorites_Set_Input>;\n  where: Favorites_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_InstitutionArgs = {\n  _inc?: Maybe<Institution_Inc_Input>;\n  _set?: Maybe<Institution_Set_Input>;\n  where: Institution_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Institution_By_PkArgs = {\n  _inc?: Maybe<Institution_Inc_Input>;\n  _set?: Maybe<Institution_Set_Input>;\n  pk_columns: Institution_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Knex_MigrationsArgs = {\n  _inc?: Maybe<Knex_Migrations_Inc_Input>;\n  _set?: Maybe<Knex_Migrations_Set_Input>;\n  where: Knex_Migrations_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Knex_Migrations_By_PkArgs = {\n  _inc?: Maybe<Knex_Migrations_Inc_Input>;\n  _set?: Maybe<Knex_Migrations_Set_Input>;\n  pk_columns: Knex_Migrations_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Knex_Migrations_LockArgs = {\n  _inc?: Maybe<Knex_Migrations_Lock_Inc_Input>;\n  _set?: Maybe<Knex_Migrations_Lock_Set_Input>;\n  where: Knex_Migrations_Lock_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Knex_Migrations_Lock_By_PkArgs = {\n  _inc?: Maybe<Knex_Migrations_Lock_Inc_Input>;\n  _set?: Maybe<Knex_Migrations_Lock_Set_Input>;\n  pk_columns: Knex_Migrations_Lock_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_LocationArgs = {\n  _inc?: Maybe<Location_Inc_Input>;\n  _set?: Maybe<Location_Set_Input>;\n  where: Location_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Location_By_PkArgs = {\n  _inc?: Maybe<Location_Inc_Input>;\n  _set?: Maybe<Location_Set_Input>;\n  pk_columns: Location_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Lot_RowArgs = {\n  _inc?: Maybe<Lot_Row_Inc_Input>;\n  _set?: Maybe<Lot_Row_Set_Input>;\n  where: Lot_Row_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Lot_Row_By_PkArgs = {\n  _inc?: Maybe<Lot_Row_Inc_Input>;\n  _set?: Maybe<Lot_Row_Set_Input>;\n  pk_columns: Lot_Row_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Parking_LotArgs = {\n  _inc?: Maybe<Parking_Lot_Inc_Input>;\n  _set?: Maybe<Parking_Lot_Set_Input>;\n  where: Parking_Lot_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Parking_Lot_By_PkArgs = {\n  _inc?: Maybe<Parking_Lot_Inc_Input>;\n  _set?: Maybe<Parking_Lot_Set_Input>;\n  pk_columns: Parking_Lot_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Parking_SpaceArgs = {\n  _inc?: Maybe<Parking_Space_Inc_Input>;\n  _set?: Maybe<Parking_Space_Set_Input>;\n  where: Parking_Space_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Parking_Space_By_PkArgs = {\n  _inc?: Maybe<Parking_Space_Inc_Input>;\n  _set?: Maybe<Parking_Space_Set_Input>;\n  pk_columns: Parking_Space_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Past_Lot_OccupancyArgs = {\n  _inc?: Maybe<Past_Lot_Occupancy_Inc_Input>;\n  _set?: Maybe<Past_Lot_Occupancy_Set_Input>;\n  where: Past_Lot_Occupancy_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Past_Lot_Occupancy_By_PkArgs = {\n  _inc?: Maybe<Past_Lot_Occupancy_Inc_Input>;\n  _set?: Maybe<Past_Lot_Occupancy_Set_Input>;\n  pk_columns: Past_Lot_Occupancy_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_UserArgs = {\n  _inc?: Maybe<User_Inc_Input>;\n  _set?: Maybe<User_Set_Input>;\n  where: User_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_By_PkArgs = {\n  _inc?: Maybe<User_Inc_Input>;\n  _set?: Maybe<User_Set_Input>;\n  pk_columns: User_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_InstitutionArgs = {\n  _inc?: Maybe<User_Institution_Inc_Input>;\n  _set?: Maybe<User_Institution_Set_Input>;\n  where: User_Institution_Bool_Exp;\n};\n\n/** column ordering options */\nexport enum Order_By {\n  /** in the ascending order, nulls last */\n  Asc = 'asc',\n  /** in the ascending order, nulls first */\n  AscNullsFirst = 'asc_nulls_first',\n  /** in the ascending order, nulls last */\n  AscNullsLast = 'asc_nulls_last',\n  /** in the descending order, nulls first */\n  Desc = 'desc',\n  /** in the descending order, nulls first */\n  DescNullsFirst = 'desc_nulls_first',\n  /** in the descending order, nulls last */\n  DescNullsLast = 'desc_nulls_last'\n}\n\n/** columns and relationships of \"parking_lot\" */\nexport type Parking_Lot = {\n  __typename?: 'parking_lot';\n  /** An array relationship */\n  favorites: Array<Favorites>;\n  /** An aggregated array relationship */\n  favorites_aggregate: Favorites_Aggregate;\n  id: Scalars['Int'];\n  /** An object relationship */\n  institution: Institution;\n  institution_id: Scalars['Int'];\n  is_disabled: Scalars['Boolean'];\n  /** An object relationship */\n  location: Location;\n  location_id: Scalars['Int'];\n  lot_image?: Maybe<Scalars['String']>;\n  /** An array relationship */\n  lot_rows: Array<Lot_Row>;\n  /** An aggregated array relationship */\n  lot_rows_aggregate: Lot_Row_Aggregate;\n  name: Scalars['String'];\n  /** An object relationship */\n  vacant_space?: Maybe<Vacant_Space>;\n};\n\n\n/** columns and relationships of \"parking_lot\" */\nexport type Parking_LotFavoritesArgs = {\n  distinct_on?: Maybe<Array<Favorites_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Favorites_Order_By>>;\n  where?: Maybe<Favorites_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"parking_lot\" */\nexport type Parking_LotFavorites_AggregateArgs = {\n  distinct_on?: Maybe<Array<Favorites_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Favorites_Order_By>>;\n  where?: Maybe<Favorites_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"parking_lot\" */\nexport type Parking_LotLot_RowsArgs = {\n  distinct_on?: Maybe<Array<Lot_Row_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Lot_Row_Order_By>>;\n  where?: Maybe<Lot_Row_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"parking_lot\" */\nexport type Parking_LotLot_Rows_AggregateArgs = {\n  distinct_on?: Maybe<Array<Lot_Row_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Lot_Row_Order_By>>;\n  where?: Maybe<Lot_Row_Bool_Exp>;\n};\n\n/** aggregated selection of \"parking_lot\" */\nexport type Parking_Lot_Aggregate = {\n  __typename?: 'parking_lot_aggregate';\n  aggregate?: Maybe<Parking_Lot_Aggregate_Fields>;\n  nodes: Array<Parking_Lot>;\n};\n\n/** aggregate fields of \"parking_lot\" */\nexport type Parking_Lot_Aggregate_Fields = {\n  __typename?: 'parking_lot_aggregate_fields';\n  avg?: Maybe<Parking_Lot_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Parking_Lot_Max_Fields>;\n  min?: Maybe<Parking_Lot_Min_Fields>;\n  stddev?: Maybe<Parking_Lot_Stddev_Fields>;\n  stddev_pop?: Maybe<Parking_Lot_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Parking_Lot_Stddev_Samp_Fields>;\n  sum?: Maybe<Parking_Lot_Sum_Fields>;\n  var_pop?: Maybe<Parking_Lot_Var_Pop_Fields>;\n  var_samp?: Maybe<Parking_Lot_Var_Samp_Fields>;\n  variance?: Maybe<Parking_Lot_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"parking_lot\" */\nexport type Parking_Lot_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Parking_Lot_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"parking_lot\" */\nexport type Parking_Lot_Aggregate_Order_By = {\n  avg?: Maybe<Parking_Lot_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Parking_Lot_Max_Order_By>;\n  min?: Maybe<Parking_Lot_Min_Order_By>;\n  stddev?: Maybe<Parking_Lot_Stddev_Order_By>;\n  stddev_pop?: Maybe<Parking_Lot_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Parking_Lot_Stddev_Samp_Order_By>;\n  sum?: Maybe<Parking_Lot_Sum_Order_By>;\n  var_pop?: Maybe<Parking_Lot_Var_Pop_Order_By>;\n  var_samp?: Maybe<Parking_Lot_Var_Samp_Order_By>;\n  variance?: Maybe<Parking_Lot_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"parking_lot\" */\nexport type Parking_Lot_Arr_Rel_Insert_Input = {\n  data: Array<Parking_Lot_Insert_Input>;\n  on_conflict?: Maybe<Parking_Lot_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Parking_Lot_Avg_Fields = {\n  __typename?: 'parking_lot_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n  institution_id?: Maybe<Scalars['Float']>;\n  location_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"parking_lot\" */\nexport type Parking_Lot_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n  institution_id?: Maybe<Order_By>;\n  location_id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"parking_lot\". All fields are combined with a logical 'AND'. */\nexport type Parking_Lot_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Parking_Lot_Bool_Exp>>>;\n  _not?: Maybe<Parking_Lot_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Parking_Lot_Bool_Exp>>>;\n  favorites?: Maybe<Favorites_Bool_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  institution?: Maybe<Institution_Bool_Exp>;\n  institution_id?: Maybe<Int_Comparison_Exp>;\n  is_disabled?: Maybe<Boolean_Comparison_Exp>;\n  location?: Maybe<Location_Bool_Exp>;\n  location_id?: Maybe<Int_Comparison_Exp>;\n  lot_image?: Maybe<String_Comparison_Exp>;\n  lot_rows?: Maybe<Lot_Row_Bool_Exp>;\n  name?: Maybe<String_Comparison_Exp>;\n  vacant_space?: Maybe<Vacant_Space_Bool_Exp>;\n};\n\n/** unique or primary key constraints on table \"parking_lot\" */\nexport enum Parking_Lot_Constraint {\n  /** unique or primary key constraint */\n  ParkingLotPkey = 'parking_lot_pkey'\n}\n\n/** input type for incrementing integer column in table \"parking_lot\" */\nexport type Parking_Lot_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n  institution_id?: Maybe<Scalars['Int']>;\n  location_id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"parking_lot\" */\nexport type Parking_Lot_Insert_Input = {\n  favorites?: Maybe<Favorites_Arr_Rel_Insert_Input>;\n  id?: Maybe<Scalars['Int']>;\n  institution?: Maybe<Institution_Obj_Rel_Insert_Input>;\n  institution_id?: Maybe<Scalars['Int']>;\n  is_disabled?: Maybe<Scalars['Boolean']>;\n  location?: Maybe<Location_Obj_Rel_Insert_Input>;\n  location_id?: Maybe<Scalars['Int']>;\n  lot_image?: Maybe<Scalars['String']>;\n  lot_rows?: Maybe<Lot_Row_Arr_Rel_Insert_Input>;\n  name?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type Parking_Lot_Max_Fields = {\n  __typename?: 'parking_lot_max_fields';\n  id?: Maybe<Scalars['Int']>;\n  institution_id?: Maybe<Scalars['Int']>;\n  location_id?: Maybe<Scalars['Int']>;\n  lot_image?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"parking_lot\" */\nexport type Parking_Lot_Max_Order_By = {\n  id?: Maybe<Order_By>;\n  institution_id?: Maybe<Order_By>;\n  location_id?: Maybe<Order_By>;\n  lot_image?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Parking_Lot_Min_Fields = {\n  __typename?: 'parking_lot_min_fields';\n  id?: Maybe<Scalars['Int']>;\n  institution_id?: Maybe<Scalars['Int']>;\n  location_id?: Maybe<Scalars['Int']>;\n  lot_image?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"parking_lot\" */\nexport type Parking_Lot_Min_Order_By = {\n  id?: Maybe<Order_By>;\n  institution_id?: Maybe<Order_By>;\n  location_id?: Maybe<Order_By>;\n  lot_image?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"parking_lot\" */\nexport type Parking_Lot_Mutation_Response = {\n  __typename?: 'parking_lot_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Parking_Lot>;\n};\n\n/** input type for inserting object relation for remote table \"parking_lot\" */\nexport type Parking_Lot_Obj_Rel_Insert_Input = {\n  data: Parking_Lot_Insert_Input;\n  on_conflict?: Maybe<Parking_Lot_On_Conflict>;\n};\n\n/** on conflict condition type for table \"parking_lot\" */\nexport type Parking_Lot_On_Conflict = {\n  constraint: Parking_Lot_Constraint;\n  update_columns: Array<Parking_Lot_Update_Column>;\n  where?: Maybe<Parking_Lot_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"parking_lot\" */\nexport type Parking_Lot_Order_By = {\n  favorites_aggregate?: Maybe<Favorites_Aggregate_Order_By>;\n  id?: Maybe<Order_By>;\n  institution?: Maybe<Institution_Order_By>;\n  institution_id?: Maybe<Order_By>;\n  is_disabled?: Maybe<Order_By>;\n  location?: Maybe<Location_Order_By>;\n  location_id?: Maybe<Order_By>;\n  lot_image?: Maybe<Order_By>;\n  lot_rows_aggregate?: Maybe<Lot_Row_Aggregate_Order_By>;\n  name?: Maybe<Order_By>;\n  vacant_space?: Maybe<Vacant_Space_Order_By>;\n};\n\n/** primary key columns input for table: \"parking_lot\" */\nexport type Parking_Lot_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"parking_lot\" */\nexport enum Parking_Lot_Select_Column {\n  /** column name */\n  Id = 'id',\n  /** column name */\n  InstitutionId = 'institution_id',\n  /** column name */\n  IsDisabled = 'is_disabled',\n  /** column name */\n  LocationId = 'location_id',\n  /** column name */\n  LotImage = 'lot_image',\n  /** column name */\n  Name = 'name'\n}\n\n/** input type for updating data in table \"parking_lot\" */\nexport type Parking_Lot_Set_Input = {\n  id?: Maybe<Scalars['Int']>;\n  institution_id?: Maybe<Scalars['Int']>;\n  is_disabled?: Maybe<Scalars['Boolean']>;\n  location_id?: Maybe<Scalars['Int']>;\n  lot_image?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type Parking_Lot_Stddev_Fields = {\n  __typename?: 'parking_lot_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n  institution_id?: Maybe<Scalars['Float']>;\n  location_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"parking_lot\" */\nexport type Parking_Lot_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n  institution_id?: Maybe<Order_By>;\n  location_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Parking_Lot_Stddev_Pop_Fields = {\n  __typename?: 'parking_lot_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  institution_id?: Maybe<Scalars['Float']>;\n  location_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"parking_lot\" */\nexport type Parking_Lot_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  institution_id?: Maybe<Order_By>;\n  location_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Parking_Lot_Stddev_Samp_Fields = {\n  __typename?: 'parking_lot_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  institution_id?: Maybe<Scalars['Float']>;\n  location_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"parking_lot\" */\nexport type Parking_Lot_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  institution_id?: Maybe<Order_By>;\n  location_id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Parking_Lot_Sum_Fields = {\n  __typename?: 'parking_lot_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n  institution_id?: Maybe<Scalars['Int']>;\n  location_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"parking_lot\" */\nexport type Parking_Lot_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n  institution_id?: Maybe<Order_By>;\n  location_id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"parking_lot\" */\nexport enum Parking_Lot_Update_Column {\n  /** column name */\n  Id = 'id',\n  /** column name */\n  InstitutionId = 'institution_id',\n  /** column name */\n  IsDisabled = 'is_disabled',\n  /** column name */\n  LocationId = 'location_id',\n  /** column name */\n  LotImage = 'lot_image',\n  /** column name */\n  Name = 'name'\n}\n\n/** aggregate var_pop on columns */\nexport type Parking_Lot_Var_Pop_Fields = {\n  __typename?: 'parking_lot_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  institution_id?: Maybe<Scalars['Float']>;\n  location_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"parking_lot\" */\nexport type Parking_Lot_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  institution_id?: Maybe<Order_By>;\n  location_id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Parking_Lot_Var_Samp_Fields = {\n  __typename?: 'parking_lot_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  institution_id?: Maybe<Scalars['Float']>;\n  location_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"parking_lot\" */\nexport type Parking_Lot_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  institution_id?: Maybe<Order_By>;\n  location_id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Parking_Lot_Variance_Fields = {\n  __typename?: 'parking_lot_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n  institution_id?: Maybe<Scalars['Float']>;\n  location_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"parking_lot\" */\nexport type Parking_Lot_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n  institution_id?: Maybe<Order_By>;\n  location_id?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"parking_space\" */\nexport type Parking_Space = {\n  __typename?: 'parking_space';\n  id: Scalars['Int'];\n  is_blank: Scalars['Boolean'];\n  is_disabled: Scalars['Boolean'];\n  is_driver_disabled_parking: Scalars['Boolean'];\n  is_entry: Scalars['Boolean'];\n  is_exit: Scalars['Boolean'];\n  is_occupied: Scalars['Boolean'];\n  is_road: Scalars['Boolean'];\n  is_space: Scalars['Boolean'];\n  /** An object relationship */\n  lot_row: Lot_Row;\n  lot_row_id: Scalars['Int'];\n  rotation: Scalars['Int'];\n  space_id?: Maybe<Scalars['Int']>;\n};\n\n/** aggregated selection of \"parking_space\" */\nexport type Parking_Space_Aggregate = {\n  __typename?: 'parking_space_aggregate';\n  aggregate?: Maybe<Parking_Space_Aggregate_Fields>;\n  nodes: Array<Parking_Space>;\n};\n\n/** aggregate fields of \"parking_space\" */\nexport type Parking_Space_Aggregate_Fields = {\n  __typename?: 'parking_space_aggregate_fields';\n  avg?: Maybe<Parking_Space_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Parking_Space_Max_Fields>;\n  min?: Maybe<Parking_Space_Min_Fields>;\n  stddev?: Maybe<Parking_Space_Stddev_Fields>;\n  stddev_pop?: Maybe<Parking_Space_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Parking_Space_Stddev_Samp_Fields>;\n  sum?: Maybe<Parking_Space_Sum_Fields>;\n  var_pop?: Maybe<Parking_Space_Var_Pop_Fields>;\n  var_samp?: Maybe<Parking_Space_Var_Samp_Fields>;\n  variance?: Maybe<Parking_Space_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"parking_space\" */\nexport type Parking_Space_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Parking_Space_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"parking_space\" */\nexport type Parking_Space_Aggregate_Order_By = {\n  avg?: Maybe<Parking_Space_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Parking_Space_Max_Order_By>;\n  min?: Maybe<Parking_Space_Min_Order_By>;\n  stddev?: Maybe<Parking_Space_Stddev_Order_By>;\n  stddev_pop?: Maybe<Parking_Space_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Parking_Space_Stddev_Samp_Order_By>;\n  sum?: Maybe<Parking_Space_Sum_Order_By>;\n  var_pop?: Maybe<Parking_Space_Var_Pop_Order_By>;\n  var_samp?: Maybe<Parking_Space_Var_Samp_Order_By>;\n  variance?: Maybe<Parking_Space_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"parking_space\" */\nexport type Parking_Space_Arr_Rel_Insert_Input = {\n  data: Array<Parking_Space_Insert_Input>;\n  on_conflict?: Maybe<Parking_Space_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Parking_Space_Avg_Fields = {\n  __typename?: 'parking_space_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n  lot_row_id?: Maybe<Scalars['Float']>;\n  rotation?: Maybe<Scalars['Float']>;\n  space_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"parking_space\" */\nexport type Parking_Space_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n  lot_row_id?: Maybe<Order_By>;\n  rotation?: Maybe<Order_By>;\n  space_id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"parking_space\". All fields are combined with a logical 'AND'. */\nexport type Parking_Space_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Parking_Space_Bool_Exp>>>;\n  _not?: Maybe<Parking_Space_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Parking_Space_Bool_Exp>>>;\n  id?: Maybe<Int_Comparison_Exp>;\n  is_blank?: Maybe<Boolean_Comparison_Exp>;\n  is_disabled?: Maybe<Boolean_Comparison_Exp>;\n  is_driver_disabled_parking?: Maybe<Boolean_Comparison_Exp>;\n  is_entry?: Maybe<Boolean_Comparison_Exp>;\n  is_exit?: Maybe<Boolean_Comparison_Exp>;\n  is_occupied?: Maybe<Boolean_Comparison_Exp>;\n  is_road?: Maybe<Boolean_Comparison_Exp>;\n  is_space?: Maybe<Boolean_Comparison_Exp>;\n  lot_row?: Maybe<Lot_Row_Bool_Exp>;\n  lot_row_id?: Maybe<Int_Comparison_Exp>;\n  rotation?: Maybe<Int_Comparison_Exp>;\n  space_id?: Maybe<Int_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"parking_space\" */\nexport enum Parking_Space_Constraint {\n  /** unique or primary key constraint */\n  ParkingSpacePkey = 'parking_space_pkey'\n}\n\n/** input type for incrementing integer column in table \"parking_space\" */\nexport type Parking_Space_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n  lot_row_id?: Maybe<Scalars['Int']>;\n  rotation?: Maybe<Scalars['Int']>;\n  space_id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"parking_space\" */\nexport type Parking_Space_Insert_Input = {\n  id?: Maybe<Scalars['Int']>;\n  is_blank?: Maybe<Scalars['Boolean']>;\n  is_disabled?: Maybe<Scalars['Boolean']>;\n  is_driver_disabled_parking?: Maybe<Scalars['Boolean']>;\n  is_entry?: Maybe<Scalars['Boolean']>;\n  is_exit?: Maybe<Scalars['Boolean']>;\n  is_occupied?: Maybe<Scalars['Boolean']>;\n  is_road?: Maybe<Scalars['Boolean']>;\n  is_space?: Maybe<Scalars['Boolean']>;\n  lot_row?: Maybe<Lot_Row_Obj_Rel_Insert_Input>;\n  lot_row_id?: Maybe<Scalars['Int']>;\n  rotation?: Maybe<Scalars['Int']>;\n  space_id?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate max on columns */\nexport type Parking_Space_Max_Fields = {\n  __typename?: 'parking_space_max_fields';\n  id?: Maybe<Scalars['Int']>;\n  lot_row_id?: Maybe<Scalars['Int']>;\n  rotation?: Maybe<Scalars['Int']>;\n  space_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by max() on columns of table \"parking_space\" */\nexport type Parking_Space_Max_Order_By = {\n  id?: Maybe<Order_By>;\n  lot_row_id?: Maybe<Order_By>;\n  rotation?: Maybe<Order_By>;\n  space_id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Parking_Space_Min_Fields = {\n  __typename?: 'parking_space_min_fields';\n  id?: Maybe<Scalars['Int']>;\n  lot_row_id?: Maybe<Scalars['Int']>;\n  rotation?: Maybe<Scalars['Int']>;\n  space_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by min() on columns of table \"parking_space\" */\nexport type Parking_Space_Min_Order_By = {\n  id?: Maybe<Order_By>;\n  lot_row_id?: Maybe<Order_By>;\n  rotation?: Maybe<Order_By>;\n  space_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"parking_space\" */\nexport type Parking_Space_Mutation_Response = {\n  __typename?: 'parking_space_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Parking_Space>;\n};\n\n/** input type for inserting object relation for remote table \"parking_space\" */\nexport type Parking_Space_Obj_Rel_Insert_Input = {\n  data: Parking_Space_Insert_Input;\n  on_conflict?: Maybe<Parking_Space_On_Conflict>;\n};\n\n/** on conflict condition type for table \"parking_space\" */\nexport type Parking_Space_On_Conflict = {\n  constraint: Parking_Space_Constraint;\n  update_columns: Array<Parking_Space_Update_Column>;\n  where?: Maybe<Parking_Space_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"parking_space\" */\nexport type Parking_Space_Order_By = {\n  id?: Maybe<Order_By>;\n  is_blank?: Maybe<Order_By>;\n  is_disabled?: Maybe<Order_By>;\n  is_driver_disabled_parking?: Maybe<Order_By>;\n  is_entry?: Maybe<Order_By>;\n  is_exit?: Maybe<Order_By>;\n  is_occupied?: Maybe<Order_By>;\n  is_road?: Maybe<Order_By>;\n  is_space?: Maybe<Order_By>;\n  lot_row?: Maybe<Lot_Row_Order_By>;\n  lot_row_id?: Maybe<Order_By>;\n  rotation?: Maybe<Order_By>;\n  space_id?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"parking_space\" */\nexport type Parking_Space_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"parking_space\" */\nexport enum Parking_Space_Select_Column {\n  /** column name */\n  Id = 'id',\n  /** column name */\n  IsBlank = 'is_blank',\n  /** column name */\n  IsDisabled = 'is_disabled',\n  /** column name */\n  IsDriverDisabledParking = 'is_driver_disabled_parking',\n  /** column name */\n  IsEntry = 'is_entry',\n  /** column name */\n  IsExit = 'is_exit',\n  /** column name */\n  IsOccupied = 'is_occupied',\n  /** column name */\n  IsRoad = 'is_road',\n  /** column name */\n  IsSpace = 'is_space',\n  /** column name */\n  LotRowId = 'lot_row_id',\n  /** column name */\n  Rotation = 'rotation',\n  /** column name */\n  SpaceId = 'space_id'\n}\n\n/** input type for updating data in table \"parking_space\" */\nexport type Parking_Space_Set_Input = {\n  id?: Maybe<Scalars['Int']>;\n  is_blank?: Maybe<Scalars['Boolean']>;\n  is_disabled?: Maybe<Scalars['Boolean']>;\n  is_driver_disabled_parking?: Maybe<Scalars['Boolean']>;\n  is_entry?: Maybe<Scalars['Boolean']>;\n  is_exit?: Maybe<Scalars['Boolean']>;\n  is_occupied?: Maybe<Scalars['Boolean']>;\n  is_road?: Maybe<Scalars['Boolean']>;\n  is_space?: Maybe<Scalars['Boolean']>;\n  lot_row_id?: Maybe<Scalars['Int']>;\n  rotation?: Maybe<Scalars['Int']>;\n  space_id?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate stddev on columns */\nexport type Parking_Space_Stddev_Fields = {\n  __typename?: 'parking_space_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n  lot_row_id?: Maybe<Scalars['Float']>;\n  rotation?: Maybe<Scalars['Float']>;\n  space_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"parking_space\" */\nexport type Parking_Space_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n  lot_row_id?: Maybe<Order_By>;\n  rotation?: Maybe<Order_By>;\n  space_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Parking_Space_Stddev_Pop_Fields = {\n  __typename?: 'parking_space_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  lot_row_id?: Maybe<Scalars['Float']>;\n  rotation?: Maybe<Scalars['Float']>;\n  space_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"parking_space\" */\nexport type Parking_Space_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  lot_row_id?: Maybe<Order_By>;\n  rotation?: Maybe<Order_By>;\n  space_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Parking_Space_Stddev_Samp_Fields = {\n  __typename?: 'parking_space_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  lot_row_id?: Maybe<Scalars['Float']>;\n  rotation?: Maybe<Scalars['Float']>;\n  space_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"parking_space\" */\nexport type Parking_Space_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  lot_row_id?: Maybe<Order_By>;\n  rotation?: Maybe<Order_By>;\n  space_id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Parking_Space_Sum_Fields = {\n  __typename?: 'parking_space_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n  lot_row_id?: Maybe<Scalars['Int']>;\n  rotation?: Maybe<Scalars['Int']>;\n  space_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"parking_space\" */\nexport type Parking_Space_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n  lot_row_id?: Maybe<Order_By>;\n  rotation?: Maybe<Order_By>;\n  space_id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"parking_space\" */\nexport enum Parking_Space_Update_Column {\n  /** column name */\n  Id = 'id',\n  /** column name */\n  IsBlank = 'is_blank',\n  /** column name */\n  IsDisabled = 'is_disabled',\n  /** column name */\n  IsDriverDisabledParking = 'is_driver_disabled_parking',\n  /** column name */\n  IsEntry = 'is_entry',\n  /** column name */\n  IsExit = 'is_exit',\n  /** column name */\n  IsOccupied = 'is_occupied',\n  /** column name */\n  IsRoad = 'is_road',\n  /** column name */\n  IsSpace = 'is_space',\n  /** column name */\n  LotRowId = 'lot_row_id',\n  /** column name */\n  Rotation = 'rotation',\n  /** column name */\n  SpaceId = 'space_id'\n}\n\n/** aggregate var_pop on columns */\nexport type Parking_Space_Var_Pop_Fields = {\n  __typename?: 'parking_space_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  lot_row_id?: Maybe<Scalars['Float']>;\n  rotation?: Maybe<Scalars['Float']>;\n  space_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"parking_space\" */\nexport type Parking_Space_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  lot_row_id?: Maybe<Order_By>;\n  rotation?: Maybe<Order_By>;\n  space_id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Parking_Space_Var_Samp_Fields = {\n  __typename?: 'parking_space_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  lot_row_id?: Maybe<Scalars['Float']>;\n  rotation?: Maybe<Scalars['Float']>;\n  space_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"parking_space\" */\nexport type Parking_Space_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  lot_row_id?: Maybe<Order_By>;\n  rotation?: Maybe<Order_By>;\n  space_id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Parking_Space_Variance_Fields = {\n  __typename?: 'parking_space_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n  lot_row_id?: Maybe<Scalars['Float']>;\n  rotation?: Maybe<Scalars['Float']>;\n  space_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"parking_space\" */\nexport type Parking_Space_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n  lot_row_id?: Maybe<Order_By>;\n  rotation?: Maybe<Order_By>;\n  space_id?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"past_lot_occupancy\" */\nexport type Past_Lot_Occupancy = {\n  __typename?: 'past_lot_occupancy';\n  id: Scalars['Int'];\n  occupied: Scalars['Int'];\n  /** An object relationship */\n  parking_lot: Parking_Lot;\n  parking_lot_id: Scalars['Int'];\n  updated_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** aggregated selection of \"past_lot_occupancy\" */\nexport type Past_Lot_Occupancy_Aggregate = {\n  __typename?: 'past_lot_occupancy_aggregate';\n  aggregate?: Maybe<Past_Lot_Occupancy_Aggregate_Fields>;\n  nodes: Array<Past_Lot_Occupancy>;\n};\n\n/** aggregate fields of \"past_lot_occupancy\" */\nexport type Past_Lot_Occupancy_Aggregate_Fields = {\n  __typename?: 'past_lot_occupancy_aggregate_fields';\n  avg?: Maybe<Past_Lot_Occupancy_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Past_Lot_Occupancy_Max_Fields>;\n  min?: Maybe<Past_Lot_Occupancy_Min_Fields>;\n  stddev?: Maybe<Past_Lot_Occupancy_Stddev_Fields>;\n  stddev_pop?: Maybe<Past_Lot_Occupancy_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Past_Lot_Occupancy_Stddev_Samp_Fields>;\n  sum?: Maybe<Past_Lot_Occupancy_Sum_Fields>;\n  var_pop?: Maybe<Past_Lot_Occupancy_Var_Pop_Fields>;\n  var_samp?: Maybe<Past_Lot_Occupancy_Var_Samp_Fields>;\n  variance?: Maybe<Past_Lot_Occupancy_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"past_lot_occupancy\" */\nexport type Past_Lot_Occupancy_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Past_Lot_Occupancy_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"past_lot_occupancy\" */\nexport type Past_Lot_Occupancy_Aggregate_Order_By = {\n  avg?: Maybe<Past_Lot_Occupancy_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Past_Lot_Occupancy_Max_Order_By>;\n  min?: Maybe<Past_Lot_Occupancy_Min_Order_By>;\n  stddev?: Maybe<Past_Lot_Occupancy_Stddev_Order_By>;\n  stddev_pop?: Maybe<Past_Lot_Occupancy_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Past_Lot_Occupancy_Stddev_Samp_Order_By>;\n  sum?: Maybe<Past_Lot_Occupancy_Sum_Order_By>;\n  var_pop?: Maybe<Past_Lot_Occupancy_Var_Pop_Order_By>;\n  var_samp?: Maybe<Past_Lot_Occupancy_Var_Samp_Order_By>;\n  variance?: Maybe<Past_Lot_Occupancy_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"past_lot_occupancy\" */\nexport type Past_Lot_Occupancy_Arr_Rel_Insert_Input = {\n  data: Array<Past_Lot_Occupancy_Insert_Input>;\n  on_conflict?: Maybe<Past_Lot_Occupancy_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Past_Lot_Occupancy_Avg_Fields = {\n  __typename?: 'past_lot_occupancy_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n  occupied?: Maybe<Scalars['Float']>;\n  parking_lot_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"past_lot_occupancy\" */\nexport type Past_Lot_Occupancy_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n  occupied?: Maybe<Order_By>;\n  parking_lot_id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"past_lot_occupancy\". All fields are combined with a logical 'AND'. */\nexport type Past_Lot_Occupancy_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Past_Lot_Occupancy_Bool_Exp>>>;\n  _not?: Maybe<Past_Lot_Occupancy_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Past_Lot_Occupancy_Bool_Exp>>>;\n  id?: Maybe<Int_Comparison_Exp>;\n  occupied?: Maybe<Int_Comparison_Exp>;\n  parking_lot?: Maybe<Parking_Lot_Bool_Exp>;\n  parking_lot_id?: Maybe<Int_Comparison_Exp>;\n  updated_at?: Maybe<Timestamptz_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"past_lot_occupancy\" */\nexport enum Past_Lot_Occupancy_Constraint {\n  /** unique or primary key constraint */\n  PastLotOccupancyPkey = 'past_lot_occupancy_pkey'\n}\n\n/** input type for incrementing integer column in table \"past_lot_occupancy\" */\nexport type Past_Lot_Occupancy_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n  occupied?: Maybe<Scalars['Int']>;\n  parking_lot_id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"past_lot_occupancy\" */\nexport type Past_Lot_Occupancy_Insert_Input = {\n  id?: Maybe<Scalars['Int']>;\n  occupied?: Maybe<Scalars['Int']>;\n  parking_lot?: Maybe<Parking_Lot_Obj_Rel_Insert_Input>;\n  parking_lot_id?: Maybe<Scalars['Int']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** aggregate max on columns */\nexport type Past_Lot_Occupancy_Max_Fields = {\n  __typename?: 'past_lot_occupancy_max_fields';\n  id?: Maybe<Scalars['Int']>;\n  occupied?: Maybe<Scalars['Int']>;\n  parking_lot_id?: Maybe<Scalars['Int']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** order by max() on columns of table \"past_lot_occupancy\" */\nexport type Past_Lot_Occupancy_Max_Order_By = {\n  id?: Maybe<Order_By>;\n  occupied?: Maybe<Order_By>;\n  parking_lot_id?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Past_Lot_Occupancy_Min_Fields = {\n  __typename?: 'past_lot_occupancy_min_fields';\n  id?: Maybe<Scalars['Int']>;\n  occupied?: Maybe<Scalars['Int']>;\n  parking_lot_id?: Maybe<Scalars['Int']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** order by min() on columns of table \"past_lot_occupancy\" */\nexport type Past_Lot_Occupancy_Min_Order_By = {\n  id?: Maybe<Order_By>;\n  occupied?: Maybe<Order_By>;\n  parking_lot_id?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"past_lot_occupancy\" */\nexport type Past_Lot_Occupancy_Mutation_Response = {\n  __typename?: 'past_lot_occupancy_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Past_Lot_Occupancy>;\n};\n\n/** input type for inserting object relation for remote table \"past_lot_occupancy\" */\nexport type Past_Lot_Occupancy_Obj_Rel_Insert_Input = {\n  data: Past_Lot_Occupancy_Insert_Input;\n  on_conflict?: Maybe<Past_Lot_Occupancy_On_Conflict>;\n};\n\n/** on conflict condition type for table \"past_lot_occupancy\" */\nexport type Past_Lot_Occupancy_On_Conflict = {\n  constraint: Past_Lot_Occupancy_Constraint;\n  update_columns: Array<Past_Lot_Occupancy_Update_Column>;\n  where?: Maybe<Past_Lot_Occupancy_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"past_lot_occupancy\" */\nexport type Past_Lot_Occupancy_Order_By = {\n  id?: Maybe<Order_By>;\n  occupied?: Maybe<Order_By>;\n  parking_lot?: Maybe<Parking_Lot_Order_By>;\n  parking_lot_id?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"past_lot_occupancy\" */\nexport type Past_Lot_Occupancy_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"past_lot_occupancy\" */\nexport enum Past_Lot_Occupancy_Select_Column {\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Occupied = 'occupied',\n  /** column name */\n  ParkingLotId = 'parking_lot_id',\n  /** column name */\n  UpdatedAt = 'updated_at'\n}\n\n/** input type for updating data in table \"past_lot_occupancy\" */\nexport type Past_Lot_Occupancy_Set_Input = {\n  id?: Maybe<Scalars['Int']>;\n  occupied?: Maybe<Scalars['Int']>;\n  parking_lot_id?: Maybe<Scalars['Int']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** aggregate stddev on columns */\nexport type Past_Lot_Occupancy_Stddev_Fields = {\n  __typename?: 'past_lot_occupancy_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n  occupied?: Maybe<Scalars['Float']>;\n  parking_lot_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"past_lot_occupancy\" */\nexport type Past_Lot_Occupancy_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n  occupied?: Maybe<Order_By>;\n  parking_lot_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Past_Lot_Occupancy_Stddev_Pop_Fields = {\n  __typename?: 'past_lot_occupancy_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  occupied?: Maybe<Scalars['Float']>;\n  parking_lot_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"past_lot_occupancy\" */\nexport type Past_Lot_Occupancy_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  occupied?: Maybe<Order_By>;\n  parking_lot_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Past_Lot_Occupancy_Stddev_Samp_Fields = {\n  __typename?: 'past_lot_occupancy_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  occupied?: Maybe<Scalars['Float']>;\n  parking_lot_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"past_lot_occupancy\" */\nexport type Past_Lot_Occupancy_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  occupied?: Maybe<Order_By>;\n  parking_lot_id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Past_Lot_Occupancy_Sum_Fields = {\n  __typename?: 'past_lot_occupancy_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n  occupied?: Maybe<Scalars['Int']>;\n  parking_lot_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"past_lot_occupancy\" */\nexport type Past_Lot_Occupancy_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n  occupied?: Maybe<Order_By>;\n  parking_lot_id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"past_lot_occupancy\" */\nexport enum Past_Lot_Occupancy_Update_Column {\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Occupied = 'occupied',\n  /** column name */\n  ParkingLotId = 'parking_lot_id',\n  /** column name */\n  UpdatedAt = 'updated_at'\n}\n\n/** aggregate var_pop on columns */\nexport type Past_Lot_Occupancy_Var_Pop_Fields = {\n  __typename?: 'past_lot_occupancy_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  occupied?: Maybe<Scalars['Float']>;\n  parking_lot_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"past_lot_occupancy\" */\nexport type Past_Lot_Occupancy_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  occupied?: Maybe<Order_By>;\n  parking_lot_id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Past_Lot_Occupancy_Var_Samp_Fields = {\n  __typename?: 'past_lot_occupancy_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  occupied?: Maybe<Scalars['Float']>;\n  parking_lot_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"past_lot_occupancy\" */\nexport type Past_Lot_Occupancy_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  occupied?: Maybe<Order_By>;\n  parking_lot_id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Past_Lot_Occupancy_Variance_Fields = {\n  __typename?: 'past_lot_occupancy_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n  occupied?: Maybe<Scalars['Float']>;\n  parking_lot_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"past_lot_occupancy\" */\nexport type Past_Lot_Occupancy_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n  occupied?: Maybe<Order_By>;\n  parking_lot_id?: Maybe<Order_By>;\n};\n\n/** query root */\nexport type Query_Root = {\n  __typename?: 'query_root';\n  /** fetch data from the table: \"favorites\" */\n  favorites: Array<Favorites>;\n  /** fetch aggregated fields from the table: \"favorites\" */\n  favorites_aggregate: Favorites_Aggregate;\n  /** fetch data from the table: \"institution\" */\n  institution: Array<Institution>;\n  /** fetch aggregated fields from the table: \"institution\" */\n  institution_aggregate: Institution_Aggregate;\n  /** fetch data from the table: \"institution\" using primary key columns */\n  institution_by_pk?: Maybe<Institution>;\n  /** fetch data from the table: \"knex_migrations\" */\n  knex_migrations: Array<Knex_Migrations>;\n  /** fetch aggregated fields from the table: \"knex_migrations\" */\n  knex_migrations_aggregate: Knex_Migrations_Aggregate;\n  /** fetch data from the table: \"knex_migrations\" using primary key columns */\n  knex_migrations_by_pk?: Maybe<Knex_Migrations>;\n  /** fetch data from the table: \"knex_migrations_lock\" */\n  knex_migrations_lock: Array<Knex_Migrations_Lock>;\n  /** fetch aggregated fields from the table: \"knex_migrations_lock\" */\n  knex_migrations_lock_aggregate: Knex_Migrations_Lock_Aggregate;\n  /** fetch data from the table: \"knex_migrations_lock\" using primary key columns */\n  knex_migrations_lock_by_pk?: Maybe<Knex_Migrations_Lock>;\n  /** fetch data from the table: \"location\" */\n  location: Array<Location>;\n  /** fetch aggregated fields from the table: \"location\" */\n  location_aggregate: Location_Aggregate;\n  /** fetch data from the table: \"location\" using primary key columns */\n  location_by_pk?: Maybe<Location>;\n  /** fetch data from the table: \"lot_row\" */\n  lot_row: Array<Lot_Row>;\n  /** fetch aggregated fields from the table: \"lot_row\" */\n  lot_row_aggregate: Lot_Row_Aggregate;\n  /** fetch data from the table: \"lot_row\" using primary key columns */\n  lot_row_by_pk?: Maybe<Lot_Row>;\n  /** perform the action: \"nearby_spaces\" */\n  nearby_spaces?: Maybe<Array<Maybe<NearbySpacesOutput>>>;\n  /** fetch data from the table: \"parking_lot\" */\n  parking_lot: Array<Parking_Lot>;\n  /** fetch aggregated fields from the table: \"parking_lot\" */\n  parking_lot_aggregate: Parking_Lot_Aggregate;\n  /** fetch data from the table: \"parking_lot\" using primary key columns */\n  parking_lot_by_pk?: Maybe<Parking_Lot>;\n  /** fetch data from the table: \"parking_space\" */\n  parking_space: Array<Parking_Space>;\n  /** fetch aggregated fields from the table: \"parking_space\" */\n  parking_space_aggregate: Parking_Space_Aggregate;\n  /** fetch data from the table: \"parking_space\" using primary key columns */\n  parking_space_by_pk?: Maybe<Parking_Space>;\n  /** fetch data from the table: \"past_lot_occupancy\" */\n  past_lot_occupancy: Array<Past_Lot_Occupancy>;\n  /** fetch aggregated fields from the table: \"past_lot_occupancy\" */\n  past_lot_occupancy_aggregate: Past_Lot_Occupancy_Aggregate;\n  /** fetch data from the table: \"past_lot_occupancy\" using primary key columns */\n  past_lot_occupancy_by_pk?: Maybe<Past_Lot_Occupancy>;\n  /** fetch data from the table: \"user\" */\n  user: Array<User>;\n  /** fetch aggregated fields from the table: \"user\" */\n  user_aggregate: User_Aggregate;\n  /** fetch data from the table: \"user\" using primary key columns */\n  user_by_pk?: Maybe<User>;\n  /** fetch data from the table: \"user_institution\" */\n  user_institution: Array<User_Institution>;\n  /** fetch aggregated fields from the table: \"user_institution\" */\n  user_institution_aggregate: User_Institution_Aggregate;\n  /** fetch data from the table: \"vacant_space\" */\n  vacant_space: Array<Vacant_Space>;\n  /** fetch aggregated fields from the table: \"vacant_space\" */\n  vacant_space_aggregate: Vacant_Space_Aggregate;\n};\n\n\n/** query root */\nexport type Query_RootFavoritesArgs = {\n  distinct_on?: Maybe<Array<Favorites_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Favorites_Order_By>>;\n  where?: Maybe<Favorites_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootFavorites_AggregateArgs = {\n  distinct_on?: Maybe<Array<Favorites_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Favorites_Order_By>>;\n  where?: Maybe<Favorites_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootInstitutionArgs = {\n  distinct_on?: Maybe<Array<Institution_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Institution_Order_By>>;\n  where?: Maybe<Institution_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootInstitution_AggregateArgs = {\n  distinct_on?: Maybe<Array<Institution_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Institution_Order_By>>;\n  where?: Maybe<Institution_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootInstitution_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootKnex_MigrationsArgs = {\n  distinct_on?: Maybe<Array<Knex_Migrations_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Knex_Migrations_Order_By>>;\n  where?: Maybe<Knex_Migrations_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootKnex_Migrations_AggregateArgs = {\n  distinct_on?: Maybe<Array<Knex_Migrations_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Knex_Migrations_Order_By>>;\n  where?: Maybe<Knex_Migrations_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootKnex_Migrations_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootKnex_Migrations_LockArgs = {\n  distinct_on?: Maybe<Array<Knex_Migrations_Lock_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Knex_Migrations_Lock_Order_By>>;\n  where?: Maybe<Knex_Migrations_Lock_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootKnex_Migrations_Lock_AggregateArgs = {\n  distinct_on?: Maybe<Array<Knex_Migrations_Lock_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Knex_Migrations_Lock_Order_By>>;\n  where?: Maybe<Knex_Migrations_Lock_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootKnex_Migrations_Lock_By_PkArgs = {\n  index: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootLocationArgs = {\n  distinct_on?: Maybe<Array<Location_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Location_Order_By>>;\n  where?: Maybe<Location_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootLocation_AggregateArgs = {\n  distinct_on?: Maybe<Array<Location_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Location_Order_By>>;\n  where?: Maybe<Location_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootLocation_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootLot_RowArgs = {\n  distinct_on?: Maybe<Array<Lot_Row_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Lot_Row_Order_By>>;\n  where?: Maybe<Lot_Row_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootLot_Row_AggregateArgs = {\n  distinct_on?: Maybe<Array<Lot_Row_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Lot_Row_Order_By>>;\n  where?: Maybe<Lot_Row_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootLot_Row_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootNearby_SpacesArgs = {\n  arg1: NearbySpacesInput;\n};\n\n\n/** query root */\nexport type Query_RootParking_LotArgs = {\n  distinct_on?: Maybe<Array<Parking_Lot_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Parking_Lot_Order_By>>;\n  where?: Maybe<Parking_Lot_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootParking_Lot_AggregateArgs = {\n  distinct_on?: Maybe<Array<Parking_Lot_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Parking_Lot_Order_By>>;\n  where?: Maybe<Parking_Lot_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootParking_Lot_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootParking_SpaceArgs = {\n  distinct_on?: Maybe<Array<Parking_Space_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Parking_Space_Order_By>>;\n  where?: Maybe<Parking_Space_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootParking_Space_AggregateArgs = {\n  distinct_on?: Maybe<Array<Parking_Space_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Parking_Space_Order_By>>;\n  where?: Maybe<Parking_Space_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootParking_Space_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootPast_Lot_OccupancyArgs = {\n  distinct_on?: Maybe<Array<Past_Lot_Occupancy_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Past_Lot_Occupancy_Order_By>>;\n  where?: Maybe<Past_Lot_Occupancy_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootPast_Lot_Occupancy_AggregateArgs = {\n  distinct_on?: Maybe<Array<Past_Lot_Occupancy_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Past_Lot_Occupancy_Order_By>>;\n  where?: Maybe<Past_Lot_Occupancy_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootPast_Lot_Occupancy_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootUserArgs = {\n  distinct_on?: Maybe<Array<User_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Order_By>>;\n  where?: Maybe<User_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Order_By>>;\n  where?: Maybe<User_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootUser_InstitutionArgs = {\n  distinct_on?: Maybe<Array<User_Institution_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Institution_Order_By>>;\n  where?: Maybe<User_Institution_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_Institution_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Institution_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Institution_Order_By>>;\n  where?: Maybe<User_Institution_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootVacant_SpaceArgs = {\n  distinct_on?: Maybe<Array<Vacant_Space_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Vacant_Space_Order_By>>;\n  where?: Maybe<Vacant_Space_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootVacant_Space_AggregateArgs = {\n  distinct_on?: Maybe<Array<Vacant_Space_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Vacant_Space_Order_By>>;\n  where?: Maybe<Vacant_Space_Bool_Exp>;\n};\n\n/** subscription root */\nexport type Subscription_Root = {\n  __typename?: 'subscription_root';\n  /** fetch data from the table: \"favorites\" */\n  favorites: Array<Favorites>;\n  /** fetch aggregated fields from the table: \"favorites\" */\n  favorites_aggregate: Favorites_Aggregate;\n  /** fetch data from the table: \"institution\" */\n  institution: Array<Institution>;\n  /** fetch aggregated fields from the table: \"institution\" */\n  institution_aggregate: Institution_Aggregate;\n  /** fetch data from the table: \"institution\" using primary key columns */\n  institution_by_pk?: Maybe<Institution>;\n  /** fetch data from the table: \"knex_migrations\" */\n  knex_migrations: Array<Knex_Migrations>;\n  /** fetch aggregated fields from the table: \"knex_migrations\" */\n  knex_migrations_aggregate: Knex_Migrations_Aggregate;\n  /** fetch data from the table: \"knex_migrations\" using primary key columns */\n  knex_migrations_by_pk?: Maybe<Knex_Migrations>;\n  /** fetch data from the table: \"knex_migrations_lock\" */\n  knex_migrations_lock: Array<Knex_Migrations_Lock>;\n  /** fetch aggregated fields from the table: \"knex_migrations_lock\" */\n  knex_migrations_lock_aggregate: Knex_Migrations_Lock_Aggregate;\n  /** fetch data from the table: \"knex_migrations_lock\" using primary key columns */\n  knex_migrations_lock_by_pk?: Maybe<Knex_Migrations_Lock>;\n  /** fetch data from the table: \"location\" */\n  location: Array<Location>;\n  /** fetch aggregated fields from the table: \"location\" */\n  location_aggregate: Location_Aggregate;\n  /** fetch data from the table: \"location\" using primary key columns */\n  location_by_pk?: Maybe<Location>;\n  /** fetch data from the table: \"lot_row\" */\n  lot_row: Array<Lot_Row>;\n  /** fetch aggregated fields from the table: \"lot_row\" */\n  lot_row_aggregate: Lot_Row_Aggregate;\n  /** fetch data from the table: \"lot_row\" using primary key columns */\n  lot_row_by_pk?: Maybe<Lot_Row>;\n  /** perform the action: \"nearby_spaces\" */\n  nearby_spaces?: Maybe<Array<Maybe<NearbySpacesOutput>>>;\n  /** fetch data from the table: \"parking_lot\" */\n  parking_lot: Array<Parking_Lot>;\n  /** fetch aggregated fields from the table: \"parking_lot\" */\n  parking_lot_aggregate: Parking_Lot_Aggregate;\n  /** fetch data from the table: \"parking_lot\" using primary key columns */\n  parking_lot_by_pk?: Maybe<Parking_Lot>;\n  /** fetch data from the table: \"parking_space\" */\n  parking_space: Array<Parking_Space>;\n  /** fetch aggregated fields from the table: \"parking_space\" */\n  parking_space_aggregate: Parking_Space_Aggregate;\n  /** fetch data from the table: \"parking_space\" using primary key columns */\n  parking_space_by_pk?: Maybe<Parking_Space>;\n  /** fetch data from the table: \"past_lot_occupancy\" */\n  past_lot_occupancy: Array<Past_Lot_Occupancy>;\n  /** fetch aggregated fields from the table: \"past_lot_occupancy\" */\n  past_lot_occupancy_aggregate: Past_Lot_Occupancy_Aggregate;\n  /** fetch data from the table: \"past_lot_occupancy\" using primary key columns */\n  past_lot_occupancy_by_pk?: Maybe<Past_Lot_Occupancy>;\n  /** fetch data from the table: \"user\" */\n  user: Array<User>;\n  /** fetch aggregated fields from the table: \"user\" */\n  user_aggregate: User_Aggregate;\n  /** fetch data from the table: \"user\" using primary key columns */\n  user_by_pk?: Maybe<User>;\n  /** fetch data from the table: \"user_institution\" */\n  user_institution: Array<User_Institution>;\n  /** fetch aggregated fields from the table: \"user_institution\" */\n  user_institution_aggregate: User_Institution_Aggregate;\n  /** fetch data from the table: \"vacant_space\" */\n  vacant_space: Array<Vacant_Space>;\n  /** fetch aggregated fields from the table: \"vacant_space\" */\n  vacant_space_aggregate: Vacant_Space_Aggregate;\n};\n\n\n/** subscription root */\nexport type Subscription_RootFavoritesArgs = {\n  distinct_on?: Maybe<Array<Favorites_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Favorites_Order_By>>;\n  where?: Maybe<Favorites_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootFavorites_AggregateArgs = {\n  distinct_on?: Maybe<Array<Favorites_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Favorites_Order_By>>;\n  where?: Maybe<Favorites_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootInstitutionArgs = {\n  distinct_on?: Maybe<Array<Institution_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Institution_Order_By>>;\n  where?: Maybe<Institution_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootInstitution_AggregateArgs = {\n  distinct_on?: Maybe<Array<Institution_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Institution_Order_By>>;\n  where?: Maybe<Institution_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootInstitution_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootKnex_MigrationsArgs = {\n  distinct_on?: Maybe<Array<Knex_Migrations_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Knex_Migrations_Order_By>>;\n  where?: Maybe<Knex_Migrations_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootKnex_Migrations_AggregateArgs = {\n  distinct_on?: Maybe<Array<Knex_Migrations_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Knex_Migrations_Order_By>>;\n  where?: Maybe<Knex_Migrations_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootKnex_Migrations_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootKnex_Migrations_LockArgs = {\n  distinct_on?: Maybe<Array<Knex_Migrations_Lock_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Knex_Migrations_Lock_Order_By>>;\n  where?: Maybe<Knex_Migrations_Lock_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootKnex_Migrations_Lock_AggregateArgs = {\n  distinct_on?: Maybe<Array<Knex_Migrations_Lock_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Knex_Migrations_Lock_Order_By>>;\n  where?: Maybe<Knex_Migrations_Lock_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootKnex_Migrations_Lock_By_PkArgs = {\n  index: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootLocationArgs = {\n  distinct_on?: Maybe<Array<Location_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Location_Order_By>>;\n  where?: Maybe<Location_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootLocation_AggregateArgs = {\n  distinct_on?: Maybe<Array<Location_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Location_Order_By>>;\n  where?: Maybe<Location_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootLocation_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootLot_RowArgs = {\n  distinct_on?: Maybe<Array<Lot_Row_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Lot_Row_Order_By>>;\n  where?: Maybe<Lot_Row_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootLot_Row_AggregateArgs = {\n  distinct_on?: Maybe<Array<Lot_Row_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Lot_Row_Order_By>>;\n  where?: Maybe<Lot_Row_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootLot_Row_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootNearby_SpacesArgs = {\n  arg1: NearbySpacesInput;\n};\n\n\n/** subscription root */\nexport type Subscription_RootParking_LotArgs = {\n  distinct_on?: Maybe<Array<Parking_Lot_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Parking_Lot_Order_By>>;\n  where?: Maybe<Parking_Lot_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootParking_Lot_AggregateArgs = {\n  distinct_on?: Maybe<Array<Parking_Lot_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Parking_Lot_Order_By>>;\n  where?: Maybe<Parking_Lot_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootParking_Lot_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootParking_SpaceArgs = {\n  distinct_on?: Maybe<Array<Parking_Space_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Parking_Space_Order_By>>;\n  where?: Maybe<Parking_Space_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootParking_Space_AggregateArgs = {\n  distinct_on?: Maybe<Array<Parking_Space_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Parking_Space_Order_By>>;\n  where?: Maybe<Parking_Space_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootParking_Space_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootPast_Lot_OccupancyArgs = {\n  distinct_on?: Maybe<Array<Past_Lot_Occupancy_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Past_Lot_Occupancy_Order_By>>;\n  where?: Maybe<Past_Lot_Occupancy_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootPast_Lot_Occupancy_AggregateArgs = {\n  distinct_on?: Maybe<Array<Past_Lot_Occupancy_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Past_Lot_Occupancy_Order_By>>;\n  where?: Maybe<Past_Lot_Occupancy_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootPast_Lot_Occupancy_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootUserArgs = {\n  distinct_on?: Maybe<Array<User_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Order_By>>;\n  where?: Maybe<User_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Order_By>>;\n  where?: Maybe<User_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_InstitutionArgs = {\n  distinct_on?: Maybe<Array<User_Institution_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Institution_Order_By>>;\n  where?: Maybe<User_Institution_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_Institution_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Institution_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Institution_Order_By>>;\n  where?: Maybe<User_Institution_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootVacant_SpaceArgs = {\n  distinct_on?: Maybe<Array<Vacant_Space_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Vacant_Space_Order_By>>;\n  where?: Maybe<Vacant_Space_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootVacant_Space_AggregateArgs = {\n  distinct_on?: Maybe<Array<Vacant_Space_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Vacant_Space_Order_By>>;\n  where?: Maybe<Vacant_Space_Bool_Exp>;\n};\n\n\n/** expression to compare columns of type timestamptz. All fields are combined with logical 'AND'. */\nexport type Timestamptz_Comparison_Exp = {\n  _eq?: Maybe<Scalars['timestamptz']>;\n  _gt?: Maybe<Scalars['timestamptz']>;\n  _gte?: Maybe<Scalars['timestamptz']>;\n  _in?: Maybe<Array<Scalars['timestamptz']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['timestamptz']>;\n  _lte?: Maybe<Scalars['timestamptz']>;\n  _neq?: Maybe<Scalars['timestamptz']>;\n  _nin?: Maybe<Array<Scalars['timestamptz']>>;\n};\n\n/** columns and relationships of \"user\" */\nexport type User = {\n  __typename?: 'user';\n  created_at: Scalars['timestamptz'];\n  email?: Maybe<Scalars['String']>;\n  /** An array relationship */\n  favorites: Array<Favorites>;\n  /** An aggregated array relationship */\n  favorites_aggregate: Favorites_Aggregate;\n  first_name: Scalars['String'];\n  id: Scalars['Int'];\n  last_name: Scalars['String'];\n  password: Scalars['String'];\n  updated_at: Scalars['timestamptz'];\n  /** An array relationship */\n  user_institutions: Array<User_Institution>;\n  /** An aggregated array relationship */\n  user_institutions_aggregate: User_Institution_Aggregate;\n};\n\n\n/** columns and relationships of \"user\" */\nexport type UserFavoritesArgs = {\n  distinct_on?: Maybe<Array<Favorites_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Favorites_Order_By>>;\n  where?: Maybe<Favorites_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"user\" */\nexport type UserFavorites_AggregateArgs = {\n  distinct_on?: Maybe<Array<Favorites_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Favorites_Order_By>>;\n  where?: Maybe<Favorites_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"user\" */\nexport type UserUser_InstitutionsArgs = {\n  distinct_on?: Maybe<Array<User_Institution_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Institution_Order_By>>;\n  where?: Maybe<User_Institution_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"user\" */\nexport type UserUser_Institutions_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Institution_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Institution_Order_By>>;\n  where?: Maybe<User_Institution_Bool_Exp>;\n};\n\n/** aggregated selection of \"user\" */\nexport type User_Aggregate = {\n  __typename?: 'user_aggregate';\n  aggregate?: Maybe<User_Aggregate_Fields>;\n  nodes: Array<User>;\n};\n\n/** aggregate fields of \"user\" */\nexport type User_Aggregate_Fields = {\n  __typename?: 'user_aggregate_fields';\n  avg?: Maybe<User_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<User_Max_Fields>;\n  min?: Maybe<User_Min_Fields>;\n  stddev?: Maybe<User_Stddev_Fields>;\n  stddev_pop?: Maybe<User_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<User_Stddev_Samp_Fields>;\n  sum?: Maybe<User_Sum_Fields>;\n  var_pop?: Maybe<User_Var_Pop_Fields>;\n  var_samp?: Maybe<User_Var_Samp_Fields>;\n  variance?: Maybe<User_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"user\" */\nexport type User_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<User_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"user\" */\nexport type User_Aggregate_Order_By = {\n  avg?: Maybe<User_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<User_Max_Order_By>;\n  min?: Maybe<User_Min_Order_By>;\n  stddev?: Maybe<User_Stddev_Order_By>;\n  stddev_pop?: Maybe<User_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<User_Stddev_Samp_Order_By>;\n  sum?: Maybe<User_Sum_Order_By>;\n  var_pop?: Maybe<User_Var_Pop_Order_By>;\n  var_samp?: Maybe<User_Var_Samp_Order_By>;\n  variance?: Maybe<User_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"user\" */\nexport type User_Arr_Rel_Insert_Input = {\n  data: Array<User_Insert_Input>;\n  on_conflict?: Maybe<User_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type User_Avg_Fields = {\n  __typename?: 'user_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"user\" */\nexport type User_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"user\". All fields are combined with a logical 'AND'. */\nexport type User_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<User_Bool_Exp>>>;\n  _not?: Maybe<User_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<User_Bool_Exp>>>;\n  created_at?: Maybe<Timestamptz_Comparison_Exp>;\n  email?: Maybe<String_Comparison_Exp>;\n  favorites?: Maybe<Favorites_Bool_Exp>;\n  first_name?: Maybe<String_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  last_name?: Maybe<String_Comparison_Exp>;\n  password?: Maybe<String_Comparison_Exp>;\n  updated_at?: Maybe<Timestamptz_Comparison_Exp>;\n  user_institutions?: Maybe<User_Institution_Bool_Exp>;\n};\n\n/** unique or primary key constraints on table \"user\" */\nexport enum User_Constraint {\n  /** unique or primary key constraint */\n  UserEmailUnique = 'user_email_unique',\n  /** unique or primary key constraint */\n  UserPkey = 'user_pkey'\n}\n\n/** input type for incrementing integer column in table \"user\" */\nexport type User_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"user\" */\nexport type User_Insert_Input = {\n  created_at?: Maybe<Scalars['timestamptz']>;\n  email?: Maybe<Scalars['String']>;\n  favorites?: Maybe<Favorites_Arr_Rel_Insert_Input>;\n  first_name?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_name?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n  user_institutions?: Maybe<User_Institution_Arr_Rel_Insert_Input>;\n};\n\n/** columns and relationships of \"user_institution\" */\nexport type User_Institution = {\n  __typename?: 'user_institution';\n  /** An object relationship */\n  institution: Institution;\n  institution_id: Scalars['Int'];\n  is_admin: Scalars['Boolean'];\n  /** An object relationship */\n  user: User;\n  user_id: Scalars['Int'];\n};\n\n/** aggregated selection of \"user_institution\" */\nexport type User_Institution_Aggregate = {\n  __typename?: 'user_institution_aggregate';\n  aggregate?: Maybe<User_Institution_Aggregate_Fields>;\n  nodes: Array<User_Institution>;\n};\n\n/** aggregate fields of \"user_institution\" */\nexport type User_Institution_Aggregate_Fields = {\n  __typename?: 'user_institution_aggregate_fields';\n  avg?: Maybe<User_Institution_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<User_Institution_Max_Fields>;\n  min?: Maybe<User_Institution_Min_Fields>;\n  stddev?: Maybe<User_Institution_Stddev_Fields>;\n  stddev_pop?: Maybe<User_Institution_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<User_Institution_Stddev_Samp_Fields>;\n  sum?: Maybe<User_Institution_Sum_Fields>;\n  var_pop?: Maybe<User_Institution_Var_Pop_Fields>;\n  var_samp?: Maybe<User_Institution_Var_Samp_Fields>;\n  variance?: Maybe<User_Institution_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"user_institution\" */\nexport type User_Institution_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<User_Institution_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"user_institution\" */\nexport type User_Institution_Aggregate_Order_By = {\n  avg?: Maybe<User_Institution_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<User_Institution_Max_Order_By>;\n  min?: Maybe<User_Institution_Min_Order_By>;\n  stddev?: Maybe<User_Institution_Stddev_Order_By>;\n  stddev_pop?: Maybe<User_Institution_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<User_Institution_Stddev_Samp_Order_By>;\n  sum?: Maybe<User_Institution_Sum_Order_By>;\n  var_pop?: Maybe<User_Institution_Var_Pop_Order_By>;\n  var_samp?: Maybe<User_Institution_Var_Samp_Order_By>;\n  variance?: Maybe<User_Institution_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"user_institution\" */\nexport type User_Institution_Arr_Rel_Insert_Input = {\n  data: Array<User_Institution_Insert_Input>;\n  on_conflict?: Maybe<User_Institution_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type User_Institution_Avg_Fields = {\n  __typename?: 'user_institution_avg_fields';\n  institution_id?: Maybe<Scalars['Float']>;\n  user_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"user_institution\" */\nexport type User_Institution_Avg_Order_By = {\n  institution_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"user_institution\". All fields are combined with a logical 'AND'. */\nexport type User_Institution_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<User_Institution_Bool_Exp>>>;\n  _not?: Maybe<User_Institution_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<User_Institution_Bool_Exp>>>;\n  institution?: Maybe<Institution_Bool_Exp>;\n  institution_id?: Maybe<Int_Comparison_Exp>;\n  is_admin?: Maybe<Boolean_Comparison_Exp>;\n  user?: Maybe<User_Bool_Exp>;\n  user_id?: Maybe<Int_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"user_institution\" */\nexport enum User_Institution_Constraint {\n  /** unique or primary key constraint */\n  UserInstitutionUserIdInstitutionIdUnique = 'user_institution_user_id_institution_id_unique'\n}\n\n/** input type for incrementing integer column in table \"user_institution\" */\nexport type User_Institution_Inc_Input = {\n  institution_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"user_institution\" */\nexport type User_Institution_Insert_Input = {\n  institution?: Maybe<Institution_Obj_Rel_Insert_Input>;\n  institution_id?: Maybe<Scalars['Int']>;\n  is_admin?: Maybe<Scalars['Boolean']>;\n  user?: Maybe<User_Obj_Rel_Insert_Input>;\n  user_id?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate max on columns */\nexport type User_Institution_Max_Fields = {\n  __typename?: 'user_institution_max_fields';\n  institution_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by max() on columns of table \"user_institution\" */\nexport type User_Institution_Max_Order_By = {\n  institution_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type User_Institution_Min_Fields = {\n  __typename?: 'user_institution_min_fields';\n  institution_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by min() on columns of table \"user_institution\" */\nexport type User_Institution_Min_Order_By = {\n  institution_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"user_institution\" */\nexport type User_Institution_Mutation_Response = {\n  __typename?: 'user_institution_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<User_Institution>;\n};\n\n/** input type for inserting object relation for remote table \"user_institution\" */\nexport type User_Institution_Obj_Rel_Insert_Input = {\n  data: User_Institution_Insert_Input;\n  on_conflict?: Maybe<User_Institution_On_Conflict>;\n};\n\n/** on conflict condition type for table \"user_institution\" */\nexport type User_Institution_On_Conflict = {\n  constraint: User_Institution_Constraint;\n  update_columns: Array<User_Institution_Update_Column>;\n  where?: Maybe<User_Institution_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"user_institution\" */\nexport type User_Institution_Order_By = {\n  institution?: Maybe<Institution_Order_By>;\n  institution_id?: Maybe<Order_By>;\n  is_admin?: Maybe<Order_By>;\n  user?: Maybe<User_Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** select columns of table \"user_institution\" */\nexport enum User_Institution_Select_Column {\n  /** column name */\n  InstitutionId = 'institution_id',\n  /** column name */\n  IsAdmin = 'is_admin',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** input type for updating data in table \"user_institution\" */\nexport type User_Institution_Set_Input = {\n  institution_id?: Maybe<Scalars['Int']>;\n  is_admin?: Maybe<Scalars['Boolean']>;\n  user_id?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate stddev on columns */\nexport type User_Institution_Stddev_Fields = {\n  __typename?: 'user_institution_stddev_fields';\n  institution_id?: Maybe<Scalars['Float']>;\n  user_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"user_institution\" */\nexport type User_Institution_Stddev_Order_By = {\n  institution_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type User_Institution_Stddev_Pop_Fields = {\n  __typename?: 'user_institution_stddev_pop_fields';\n  institution_id?: Maybe<Scalars['Float']>;\n  user_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"user_institution\" */\nexport type User_Institution_Stddev_Pop_Order_By = {\n  institution_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type User_Institution_Stddev_Samp_Fields = {\n  __typename?: 'user_institution_stddev_samp_fields';\n  institution_id?: Maybe<Scalars['Float']>;\n  user_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"user_institution\" */\nexport type User_Institution_Stddev_Samp_Order_By = {\n  institution_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type User_Institution_Sum_Fields = {\n  __typename?: 'user_institution_sum_fields';\n  institution_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"user_institution\" */\nexport type User_Institution_Sum_Order_By = {\n  institution_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"user_institution\" */\nexport enum User_Institution_Update_Column {\n  /** column name */\n  InstitutionId = 'institution_id',\n  /** column name */\n  IsAdmin = 'is_admin',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** aggregate var_pop on columns */\nexport type User_Institution_Var_Pop_Fields = {\n  __typename?: 'user_institution_var_pop_fields';\n  institution_id?: Maybe<Scalars['Float']>;\n  user_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"user_institution\" */\nexport type User_Institution_Var_Pop_Order_By = {\n  institution_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type User_Institution_Var_Samp_Fields = {\n  __typename?: 'user_institution_var_samp_fields';\n  institution_id?: Maybe<Scalars['Float']>;\n  user_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"user_institution\" */\nexport type User_Institution_Var_Samp_Order_By = {\n  institution_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type User_Institution_Variance_Fields = {\n  __typename?: 'user_institution_variance_fields';\n  institution_id?: Maybe<Scalars['Float']>;\n  user_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"user_institution\" */\nexport type User_Institution_Variance_Order_By = {\n  institution_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** aggregate max on columns */\nexport type User_Max_Fields = {\n  __typename?: 'user_max_fields';\n  created_at?: Maybe<Scalars['timestamptz']>;\n  email?: Maybe<Scalars['String']>;\n  first_name?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_name?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** order by max() on columns of table \"user\" */\nexport type User_Max_Order_By = {\n  created_at?: Maybe<Order_By>;\n  email?: Maybe<Order_By>;\n  first_name?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_name?: Maybe<Order_By>;\n  password?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type User_Min_Fields = {\n  __typename?: 'user_min_fields';\n  created_at?: Maybe<Scalars['timestamptz']>;\n  email?: Maybe<Scalars['String']>;\n  first_name?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_name?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** order by min() on columns of table \"user\" */\nexport type User_Min_Order_By = {\n  created_at?: Maybe<Order_By>;\n  email?: Maybe<Order_By>;\n  first_name?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_name?: Maybe<Order_By>;\n  password?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"user\" */\nexport type User_Mutation_Response = {\n  __typename?: 'user_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<User>;\n};\n\n/** input type for inserting object relation for remote table \"user\" */\nexport type User_Obj_Rel_Insert_Input = {\n  data: User_Insert_Input;\n  on_conflict?: Maybe<User_On_Conflict>;\n};\n\n/** on conflict condition type for table \"user\" */\nexport type User_On_Conflict = {\n  constraint: User_Constraint;\n  update_columns: Array<User_Update_Column>;\n  where?: Maybe<User_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"user\" */\nexport type User_Order_By = {\n  created_at?: Maybe<Order_By>;\n  email?: Maybe<Order_By>;\n  favorites_aggregate?: Maybe<Favorites_Aggregate_Order_By>;\n  first_name?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_name?: Maybe<Order_By>;\n  password?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n  user_institutions_aggregate?: Maybe<User_Institution_Aggregate_Order_By>;\n};\n\n/** primary key columns input for table: \"user\" */\nexport type User_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"user\" */\nexport enum User_Select_Column {\n  /** column name */\n  CreatedAt = 'created_at',\n  /** column name */\n  Email = 'email',\n  /** column name */\n  FirstName = 'first_name',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  LastName = 'last_name',\n  /** column name */\n  Password = 'password',\n  /** column name */\n  UpdatedAt = 'updated_at'\n}\n\n/** input type for updating data in table \"user\" */\nexport type User_Set_Input = {\n  created_at?: Maybe<Scalars['timestamptz']>;\n  email?: Maybe<Scalars['String']>;\n  first_name?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_name?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** aggregate stddev on columns */\nexport type User_Stddev_Fields = {\n  __typename?: 'user_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"user\" */\nexport type User_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type User_Stddev_Pop_Fields = {\n  __typename?: 'user_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"user\" */\nexport type User_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type User_Stddev_Samp_Fields = {\n  __typename?: 'user_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"user\" */\nexport type User_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type User_Sum_Fields = {\n  __typename?: 'user_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"user\" */\nexport type User_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"user\" */\nexport enum User_Update_Column {\n  /** column name */\n  CreatedAt = 'created_at',\n  /** column name */\n  Email = 'email',\n  /** column name */\n  FirstName = 'first_name',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  LastName = 'last_name',\n  /** column name */\n  Password = 'password',\n  /** column name */\n  UpdatedAt = 'updated_at'\n}\n\n/** aggregate var_pop on columns */\nexport type User_Var_Pop_Fields = {\n  __typename?: 'user_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"user\" */\nexport type User_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type User_Var_Samp_Fields = {\n  __typename?: 'user_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"user\" */\nexport type User_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type User_Variance_Fields = {\n  __typename?: 'user_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"user\" */\nexport type User_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n\n/** columns and relationships of \"vacant_space\" */\nexport type Vacant_Space = {\n  __typename?: 'vacant_space';\n  capacity?: Maybe<Scalars['bigint']>;\n  id?: Maybe<Scalars['Int']>;\n  /** An object relationship */\n  parking_lot?: Maybe<Parking_Lot>;\n  vacant_count?: Maybe<Scalars['bigint']>;\n};\n\n/** aggregated selection of \"vacant_space\" */\nexport type Vacant_Space_Aggregate = {\n  __typename?: 'vacant_space_aggregate';\n  aggregate?: Maybe<Vacant_Space_Aggregate_Fields>;\n  nodes: Array<Vacant_Space>;\n};\n\n/** aggregate fields of \"vacant_space\" */\nexport type Vacant_Space_Aggregate_Fields = {\n  __typename?: 'vacant_space_aggregate_fields';\n  avg?: Maybe<Vacant_Space_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Vacant_Space_Max_Fields>;\n  min?: Maybe<Vacant_Space_Min_Fields>;\n  stddev?: Maybe<Vacant_Space_Stddev_Fields>;\n  stddev_pop?: Maybe<Vacant_Space_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Vacant_Space_Stddev_Samp_Fields>;\n  sum?: Maybe<Vacant_Space_Sum_Fields>;\n  var_pop?: Maybe<Vacant_Space_Var_Pop_Fields>;\n  var_samp?: Maybe<Vacant_Space_Var_Samp_Fields>;\n  variance?: Maybe<Vacant_Space_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"vacant_space\" */\nexport type Vacant_Space_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Vacant_Space_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"vacant_space\" */\nexport type Vacant_Space_Aggregate_Order_By = {\n  avg?: Maybe<Vacant_Space_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Vacant_Space_Max_Order_By>;\n  min?: Maybe<Vacant_Space_Min_Order_By>;\n  stddev?: Maybe<Vacant_Space_Stddev_Order_By>;\n  stddev_pop?: Maybe<Vacant_Space_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Vacant_Space_Stddev_Samp_Order_By>;\n  sum?: Maybe<Vacant_Space_Sum_Order_By>;\n  var_pop?: Maybe<Vacant_Space_Var_Pop_Order_By>;\n  var_samp?: Maybe<Vacant_Space_Var_Samp_Order_By>;\n  variance?: Maybe<Vacant_Space_Variance_Order_By>;\n};\n\n/** aggregate avg on columns */\nexport type Vacant_Space_Avg_Fields = {\n  __typename?: 'vacant_space_avg_fields';\n  capacity?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  vacant_count?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"vacant_space\" */\nexport type Vacant_Space_Avg_Order_By = {\n  capacity?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  vacant_count?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"vacant_space\". All fields are combined with a logical 'AND'. */\nexport type Vacant_Space_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Vacant_Space_Bool_Exp>>>;\n  _not?: Maybe<Vacant_Space_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Vacant_Space_Bool_Exp>>>;\n  capacity?: Maybe<Bigint_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  parking_lot?: Maybe<Parking_Lot_Bool_Exp>;\n  vacant_count?: Maybe<Bigint_Comparison_Exp>;\n};\n\n/** aggregate max on columns */\nexport type Vacant_Space_Max_Fields = {\n  __typename?: 'vacant_space_max_fields';\n  capacity?: Maybe<Scalars['bigint']>;\n  id?: Maybe<Scalars['Int']>;\n  vacant_count?: Maybe<Scalars['bigint']>;\n};\n\n/** order by max() on columns of table \"vacant_space\" */\nexport type Vacant_Space_Max_Order_By = {\n  capacity?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  vacant_count?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Vacant_Space_Min_Fields = {\n  __typename?: 'vacant_space_min_fields';\n  capacity?: Maybe<Scalars['bigint']>;\n  id?: Maybe<Scalars['Int']>;\n  vacant_count?: Maybe<Scalars['bigint']>;\n};\n\n/** order by min() on columns of table \"vacant_space\" */\nexport type Vacant_Space_Min_Order_By = {\n  capacity?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  vacant_count?: Maybe<Order_By>;\n};\n\n/** ordering options when selecting data from \"vacant_space\" */\nexport type Vacant_Space_Order_By = {\n  capacity?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  parking_lot?: Maybe<Parking_Lot_Order_By>;\n  vacant_count?: Maybe<Order_By>;\n};\n\n/** select columns of table \"vacant_space\" */\nexport enum Vacant_Space_Select_Column {\n  /** column name */\n  Capacity = 'capacity',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  VacantCount = 'vacant_count'\n}\n\n/** aggregate stddev on columns */\nexport type Vacant_Space_Stddev_Fields = {\n  __typename?: 'vacant_space_stddev_fields';\n  capacity?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  vacant_count?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"vacant_space\" */\nexport type Vacant_Space_Stddev_Order_By = {\n  capacity?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  vacant_count?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Vacant_Space_Stddev_Pop_Fields = {\n  __typename?: 'vacant_space_stddev_pop_fields';\n  capacity?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  vacant_count?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"vacant_space\" */\nexport type Vacant_Space_Stddev_Pop_Order_By = {\n  capacity?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  vacant_count?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Vacant_Space_Stddev_Samp_Fields = {\n  __typename?: 'vacant_space_stddev_samp_fields';\n  capacity?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  vacant_count?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"vacant_space\" */\nexport type Vacant_Space_Stddev_Samp_Order_By = {\n  capacity?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  vacant_count?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Vacant_Space_Sum_Fields = {\n  __typename?: 'vacant_space_sum_fields';\n  capacity?: Maybe<Scalars['bigint']>;\n  id?: Maybe<Scalars['Int']>;\n  vacant_count?: Maybe<Scalars['bigint']>;\n};\n\n/** order by sum() on columns of table \"vacant_space\" */\nexport type Vacant_Space_Sum_Order_By = {\n  capacity?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  vacant_count?: Maybe<Order_By>;\n};\n\n/** aggregate var_pop on columns */\nexport type Vacant_Space_Var_Pop_Fields = {\n  __typename?: 'vacant_space_var_pop_fields';\n  capacity?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  vacant_count?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"vacant_space\" */\nexport type Vacant_Space_Var_Pop_Order_By = {\n  capacity?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  vacant_count?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Vacant_Space_Var_Samp_Fields = {\n  __typename?: 'vacant_space_var_samp_fields';\n  capacity?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  vacant_count?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"vacant_space\" */\nexport type Vacant_Space_Var_Samp_Order_By = {\n  capacity?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  vacant_count?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Vacant_Space_Variance_Fields = {\n  __typename?: 'vacant_space_variance_fields';\n  capacity?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  vacant_count?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"vacant_space\" */\nexport type Vacant_Space_Variance_Order_By = {\n  capacity?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  vacant_count?: Maybe<Order_By>;\n};\n\nexport type ParkingLotCardInfoFragment = (\n  { __typename?: 'parking_lot' }\n  & Pick<Parking_Lot, 'id' | 'name' | 'lot_image'>\n  & { vacant_space?: Maybe<(\n    { __typename?: 'vacant_space' }\n    & Pick<Vacant_Space, 'vacant_count'>\n  )> }\n);\n\nexport type ParkingLotMapInfoFragment = (\n  { __typename?: 'parking_lot' }\n  & Pick<Parking_Lot, 'id'>\n  & { location: (\n    { __typename?: 'location' }\n    & Pick<Location, 'id' | 'latitude' | 'longitude'>\n  ), vacant_space?: Maybe<(\n    { __typename?: 'vacant_space' }\n    & Pick<Vacant_Space, 'vacant_count' | 'capacity'>\n  )> }\n);\n\nexport type ParkingSpaceInfoFragment = (\n  { __typename?: 'parking_space' }\n  & Pick<Parking_Space, 'id' | 'space_id' | 'is_road' | 'is_occupied' | 'is_entry' | 'is_exit' | 'is_blank' | 'is_disabled' | 'is_driver_disabled_parking' | 'rotation'>\n);\n\nexport type AddToFavoritesMutationVariables = Exact<{\n  uid: Scalars['Int'];\n  parking_lot_id: Scalars['Int'];\n}>;\n\n\nexport type AddToFavoritesMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_favorites_one?: Maybe<(\n    { __typename?: 'favorites' }\n    & Pick<Favorites, 'user_id' | 'parking_lot_id'>\n    & { user: (\n      { __typename?: 'user' }\n      & { favorites: Array<(\n        { __typename?: 'favorites' }\n        & { parking_lot: (\n          { __typename?: 'parking_lot' }\n          & Pick<Parking_Lot, 'id'>\n        ) }\n      )> }\n    ) }\n  )> }\n);\n\nexport type UpdateParkingLotMutationVariables = Exact<{\n  id: Scalars['Int'];\n  _set?: Maybe<Parking_Lot_Set_Input>;\n}>;\n\n\nexport type UpdateParkingLotMutation = (\n  { __typename?: 'mutation_root' }\n  & { update_parking_lot_by_pk?: Maybe<(\n    { __typename?: 'parking_lot' }\n    & Pick<Parking_Lot, 'id' | 'is_disabled'>\n  )> }\n);\n\nexport type UpdateParkingSpaceMutationVariables = Exact<{\n  id: Scalars['Int'];\n  _set?: Maybe<Parking_Space_Set_Input>;\n}>;\n\n\nexport type UpdateParkingSpaceMutation = (\n  { __typename?: 'mutation_root' }\n  & { update_parking_space_by_pk?: Maybe<(\n    { __typename?: 'parking_space' }\n    & ParkingSpaceInfoFragment\n  )> }\n);\n\nexport type AdminDashboardQueryVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type AdminDashboardQuery = (\n  { __typename?: 'query_root' }\n  & { user_by_pk?: Maybe<(\n    { __typename?: 'user' }\n    & { user_institutions: Array<(\n      { __typename?: 'user_institution' }\n      & { institution: (\n        { __typename?: 'institution' }\n        & Pick<Institution, 'name'>\n        & { user_institutions_aggregate: (\n          { __typename?: 'user_institution_aggregate' }\n          & { aggregate?: Maybe<(\n            { __typename?: 'user_institution_aggregate_fields' }\n            & Pick<User_Institution_Aggregate_Fields, 'count'>\n          )> }\n        ), parking_lots: Array<(\n          { __typename?: 'parking_lot' }\n          & Pick<Parking_Lot, 'name'>\n          & { vacant_space?: Maybe<(\n            { __typename?: 'vacant_space' }\n            & Pick<Vacant_Space, 'vacant_count'>\n          )> }\n        )>, parking_lots_aggregate: (\n          { __typename?: 'parking_lot_aggregate' }\n          & { aggregate?: Maybe<(\n            { __typename?: 'parking_lot_aggregate_fields' }\n            & Pick<Parking_Lot_Aggregate_Fields, 'count'>\n          )> }\n        ) }\n      ) }\n    )> }\n  )> }\n);\n\nexport type DriversByInstitutionQueryVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type DriversByInstitutionQuery = (\n  { __typename?: 'query_root' }\n  & { institution_by_pk?: Maybe<(\n    { __typename?: 'institution' }\n    & { user_institutions: Array<(\n      { __typename?: 'user_institution' }\n      & Pick<User_Institution, 'user_id' | 'is_admin'>\n      & { user: (\n        { __typename?: 'user' }\n        & Pick<User, 'first_name' | 'last_name' | 'email'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type FavoritesQueryVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type FavoritesQuery = (\n  { __typename?: 'query_root' }\n  & { user_by_pk?: Maybe<(\n    { __typename?: 'user' }\n    & { favorites: Array<(\n      { __typename?: 'favorites' }\n      & { parking_lot: (\n        { __typename?: 'parking_lot' }\n        & Pick<Parking_Lot, 'id'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type NearbySpacesQueryVariables = Exact<{\n  userLocation: NearbySpacesInput;\n}>;\n\n\nexport type NearbySpacesQuery = (\n  { __typename?: 'query_root' }\n  & { nearby_spaces?: Maybe<Array<Maybe<(\n    { __typename?: 'NearbySpacesOutput' }\n    & Pick<NearbySpacesOutput, 'distance'>\n    & { parking_lot?: Maybe<(\n      { __typename?: 'parking_lot' }\n      & ParkingLotCardInfoFragment\n    )> }\n  )>>> }\n);\n\nexport type ParkingLotBottomBarByIdQueryVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type ParkingLotBottomBarByIdQuery = (\n  { __typename?: 'query_root' }\n  & { parking_lot_by_pk?: Maybe<(\n    { __typename?: 'parking_lot' }\n    & Pick<Parking_Lot, 'id' | 'name'>\n    & { location: (\n      { __typename?: 'location' }\n      & Pick<Location, 'id' | 'address' | 'latitude' | 'longitude'>\n    ), vacant_space?: Maybe<(\n      { __typename?: 'vacant_space' }\n      & Pick<Vacant_Space, 'vacant_count' | 'capacity'>\n    )> }\n  )> }\n);\n\nexport type ParkingLotDetailsByIdQueryVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type ParkingLotDetailsByIdQuery = (\n  { __typename?: 'query_root' }\n  & { parking_lot_by_pk?: Maybe<(\n    { __typename?: 'parking_lot' }\n    & Pick<Parking_Lot, 'id' | 'name' | 'is_disabled'>\n    & { vacant_space?: Maybe<(\n      { __typename?: 'vacant_space' }\n      & Pick<Vacant_Space, 'vacant_count'>\n    )>, location: (\n      { __typename?: 'location' }\n      & Pick<Location, 'latitude' | 'longitude'>\n    ), lot_rows: Array<(\n      { __typename?: 'lot_row' }\n      & Pick<Lot_Row, 'id'>\n      & { parking_spaces: Array<(\n        { __typename?: 'parking_space' }\n        & ParkingSpaceInfoFragment\n      )> }\n    )> }\n  )> }\n);\n\nexport type ParkingLotListQueryVariables = Exact<{\n  uid: Scalars['Int'];\n  userLocation: NearbySpacesInput;\n}>;\n\n\nexport type ParkingLotListQuery = (\n  { __typename?: 'query_root' }\n  & { nearby_spaces?: Maybe<Array<Maybe<(\n    { __typename?: 'NearbySpacesOutput' }\n    & Pick<NearbySpacesOutput, 'distance'>\n    & { parking_lot?: Maybe<(\n      { __typename?: 'parking_lot' }\n      & Pick<Parking_Lot, 'id'>\n      & { favorites: Array<(\n        { __typename?: 'favorites' }\n        & Pick<Favorites, 'user_id'>\n      )> }\n      & ParkingLotCardInfoFragment\n    )> }\n  )>>> }\n);\n\nexport type ParkingLotsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ParkingLotsQuery = (\n  { __typename?: 'query_root' }\n  & { parking_lot: Array<(\n    { __typename?: 'parking_lot' }\n    & ParkingLotMapInfoFragment\n  )> }\n);\n\nexport type ParkingLotsByInstitutionIdQueryVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type ParkingLotsByInstitutionIdQuery = (\n  { __typename?: 'query_root' }\n  & { institution_by_pk?: Maybe<(\n    { __typename?: 'institution' }\n    & { parking_lots: Array<(\n      { __typename?: 'parking_lot' }\n      & ParkingLotCardInfoFragment\n    )> }\n  )> }\n);\n\nexport type PastLotOccupancyQueryVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type PastLotOccupancyQuery = (\n  { __typename?: 'query_root' }\n  & { past_lot_occupancy: Array<(\n    { __typename?: 'past_lot_occupancy' }\n    & Pick<Past_Lot_Occupancy, 'occupied' | 'updated_at'>\n  )> }\n);\n\nexport const ParkingLotCardInfoFragmentDoc = gql`\n    fragment ParkingLotCardInfo on parking_lot {\n  id\n  name\n  lot_image\n  vacant_space {\n    vacant_count\n  }\n}\n    `;\nexport const ParkingLotMapInfoFragmentDoc = gql`\n    fragment ParkingLotMapInfo on parking_lot {\n  id\n  location {\n    id\n    latitude\n    longitude\n  }\n  vacant_space {\n    vacant_count\n    capacity\n  }\n}\n    `;\nexport const ParkingSpaceInfoFragmentDoc = gql`\n    fragment ParkingSpaceInfo on parking_space {\n  id\n  space_id\n  is_road\n  is_occupied\n  is_entry\n  is_exit\n  is_blank\n  is_disabled\n  is_driver_disabled_parking\n  rotation\n}\n    `;\nexport const AddToFavoritesDocument = gql`\n    mutation AddToFavorites($uid: Int!, $parking_lot_id: Int!) {\n  insert_favorites_one(object: {user_id: $uid, parking_lot_id: $parking_lot_id}) {\n    user_id\n    parking_lot_id\n    user {\n      favorites {\n        parking_lot {\n          id\n        }\n      }\n    }\n  }\n}\n    `;\nexport type AddToFavoritesMutationFn = Apollo.MutationFunction<AddToFavoritesMutation, AddToFavoritesMutationVariables>;\n\n/**\n * __useAddToFavoritesMutation__\n *\n * To run a mutation, you first call `useAddToFavoritesMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddToFavoritesMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addToFavoritesMutation, { data, loading, error }] = useAddToFavoritesMutation({\n *   variables: {\n *      uid: // value for 'uid'\n *      parking_lot_id: // value for 'parking_lot_id'\n *   },\n * });\n */\nexport function useAddToFavoritesMutation(baseOptions?: Apollo.MutationHookOptions<AddToFavoritesMutation, AddToFavoritesMutationVariables>) {\n        return Apollo.useMutation<AddToFavoritesMutation, AddToFavoritesMutationVariables>(AddToFavoritesDocument, baseOptions);\n      }\nexport type AddToFavoritesMutationHookResult = ReturnType<typeof useAddToFavoritesMutation>;\nexport type AddToFavoritesMutationResult = Apollo.MutationResult<AddToFavoritesMutation>;\nexport type AddToFavoritesMutationOptions = Apollo.BaseMutationOptions<AddToFavoritesMutation, AddToFavoritesMutationVariables>;\nexport const UpdateParkingLotDocument = gql`\n    mutation UpdateParkingLot($id: Int!, $_set: parking_lot_set_input) {\n  update_parking_lot_by_pk(pk_columns: {id: $id}, _set: $_set) {\n    id\n    is_disabled\n  }\n}\n    `;\nexport type UpdateParkingLotMutationFn = Apollo.MutationFunction<UpdateParkingLotMutation, UpdateParkingLotMutationVariables>;\n\n/**\n * __useUpdateParkingLotMutation__\n *\n * To run a mutation, you first call `useUpdateParkingLotMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateParkingLotMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateParkingLotMutation, { data, loading, error }] = useUpdateParkingLotMutation({\n *   variables: {\n *      id: // value for 'id'\n *      _set: // value for '_set'\n *   },\n * });\n */\nexport function useUpdateParkingLotMutation(baseOptions?: Apollo.MutationHookOptions<UpdateParkingLotMutation, UpdateParkingLotMutationVariables>) {\n        return Apollo.useMutation<UpdateParkingLotMutation, UpdateParkingLotMutationVariables>(UpdateParkingLotDocument, baseOptions);\n      }\nexport type UpdateParkingLotMutationHookResult = ReturnType<typeof useUpdateParkingLotMutation>;\nexport type UpdateParkingLotMutationResult = Apollo.MutationResult<UpdateParkingLotMutation>;\nexport type UpdateParkingLotMutationOptions = Apollo.BaseMutationOptions<UpdateParkingLotMutation, UpdateParkingLotMutationVariables>;\nexport const UpdateParkingSpaceDocument = gql`\n    mutation UpdateParkingSpace($id: Int!, $_set: parking_space_set_input) {\n  update_parking_space_by_pk(pk_columns: {id: $id}, _set: $_set) {\n    ...ParkingSpaceInfo\n  }\n}\n    ${ParkingSpaceInfoFragmentDoc}`;\nexport type UpdateParkingSpaceMutationFn = Apollo.MutationFunction<UpdateParkingSpaceMutation, UpdateParkingSpaceMutationVariables>;\n\n/**\n * __useUpdateParkingSpaceMutation__\n *\n * To run a mutation, you first call `useUpdateParkingSpaceMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateParkingSpaceMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateParkingSpaceMutation, { data, loading, error }] = useUpdateParkingSpaceMutation({\n *   variables: {\n *      id: // value for 'id'\n *      _set: // value for '_set'\n *   },\n * });\n */\nexport function useUpdateParkingSpaceMutation(baseOptions?: Apollo.MutationHookOptions<UpdateParkingSpaceMutation, UpdateParkingSpaceMutationVariables>) {\n        return Apollo.useMutation<UpdateParkingSpaceMutation, UpdateParkingSpaceMutationVariables>(UpdateParkingSpaceDocument, baseOptions);\n      }\nexport type UpdateParkingSpaceMutationHookResult = ReturnType<typeof useUpdateParkingSpaceMutation>;\nexport type UpdateParkingSpaceMutationResult = Apollo.MutationResult<UpdateParkingSpaceMutation>;\nexport type UpdateParkingSpaceMutationOptions = Apollo.BaseMutationOptions<UpdateParkingSpaceMutation, UpdateParkingSpaceMutationVariables>;\nexport const AdminDashboardDocument = gql`\n    query AdminDashboard($id: Int!) {\n  user_by_pk(id: $id) {\n    user_institutions(where: {is_admin: {_eq: true}}) {\n      institution {\n        name\n        user_institutions_aggregate {\n          aggregate {\n            count\n          }\n        }\n        parking_lots {\n          name\n          vacant_space {\n            vacant_count\n          }\n        }\n        parking_lots_aggregate {\n          aggregate {\n            count\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminDashboardQuery__\n *\n * To run a query within a React component, call `useAdminDashboardQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminDashboardQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminDashboardQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useAdminDashboardQuery(baseOptions: Apollo.QueryHookOptions<AdminDashboardQuery, AdminDashboardQueryVariables>) {\n        return Apollo.useQuery<AdminDashboardQuery, AdminDashboardQueryVariables>(AdminDashboardDocument, baseOptions);\n      }\nexport function useAdminDashboardLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminDashboardQuery, AdminDashboardQueryVariables>) {\n          return Apollo.useLazyQuery<AdminDashboardQuery, AdminDashboardQueryVariables>(AdminDashboardDocument, baseOptions);\n        }\nexport type AdminDashboardQueryHookResult = ReturnType<typeof useAdminDashboardQuery>;\nexport type AdminDashboardLazyQueryHookResult = ReturnType<typeof useAdminDashboardLazyQuery>;\nexport type AdminDashboardQueryResult = Apollo.QueryResult<AdminDashboardQuery, AdminDashboardQueryVariables>;\nexport const DriversByInstitutionDocument = gql`\n    query DriversByInstitution($id: Int!) {\n  institution_by_pk(id: $id) {\n    user_institutions {\n      user_id\n      is_admin\n      user {\n        first_name\n        last_name\n        email\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useDriversByInstitutionQuery__\n *\n * To run a query within a React component, call `useDriversByInstitutionQuery` and pass it any options that fit your needs.\n * When your component renders, `useDriversByInstitutionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useDriversByInstitutionQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDriversByInstitutionQuery(baseOptions: Apollo.QueryHookOptions<DriversByInstitutionQuery, DriversByInstitutionQueryVariables>) {\n        return Apollo.useQuery<DriversByInstitutionQuery, DriversByInstitutionQueryVariables>(DriversByInstitutionDocument, baseOptions);\n      }\nexport function useDriversByInstitutionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<DriversByInstitutionQuery, DriversByInstitutionQueryVariables>) {\n          return Apollo.useLazyQuery<DriversByInstitutionQuery, DriversByInstitutionQueryVariables>(DriversByInstitutionDocument, baseOptions);\n        }\nexport type DriversByInstitutionQueryHookResult = ReturnType<typeof useDriversByInstitutionQuery>;\nexport type DriversByInstitutionLazyQueryHookResult = ReturnType<typeof useDriversByInstitutionLazyQuery>;\nexport type DriversByInstitutionQueryResult = Apollo.QueryResult<DriversByInstitutionQuery, DriversByInstitutionQueryVariables>;\nexport const FavoritesDocument = gql`\n    query Favorites($id: Int!) {\n  user_by_pk(id: $id) {\n    favorites {\n      parking_lot {\n        id\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useFavoritesQuery__\n *\n * To run a query within a React component, call `useFavoritesQuery` and pass it any options that fit your needs.\n * When your component renders, `useFavoritesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFavoritesQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useFavoritesQuery(baseOptions: Apollo.QueryHookOptions<FavoritesQuery, FavoritesQueryVariables>) {\n        return Apollo.useQuery<FavoritesQuery, FavoritesQueryVariables>(FavoritesDocument, baseOptions);\n      }\nexport function useFavoritesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FavoritesQuery, FavoritesQueryVariables>) {\n          return Apollo.useLazyQuery<FavoritesQuery, FavoritesQueryVariables>(FavoritesDocument, baseOptions);\n        }\nexport type FavoritesQueryHookResult = ReturnType<typeof useFavoritesQuery>;\nexport type FavoritesLazyQueryHookResult = ReturnType<typeof useFavoritesLazyQuery>;\nexport type FavoritesQueryResult = Apollo.QueryResult<FavoritesQuery, FavoritesQueryVariables>;\nexport const NearbySpacesDocument = gql`\n    query NearbySpaces($userLocation: NearbySpacesInput!) {\n  nearby_spaces(arg1: $userLocation) {\n    distance\n    parking_lot {\n      ...ParkingLotCardInfo\n    }\n  }\n}\n    ${ParkingLotCardInfoFragmentDoc}`;\n\n/**\n * __useNearbySpacesQuery__\n *\n * To run a query within a React component, call `useNearbySpacesQuery` and pass it any options that fit your needs.\n * When your component renders, `useNearbySpacesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNearbySpacesQuery({\n *   variables: {\n *      userLocation: // value for 'userLocation'\n *   },\n * });\n */\nexport function useNearbySpacesQuery(baseOptions: Apollo.QueryHookOptions<NearbySpacesQuery, NearbySpacesQueryVariables>) {\n        return Apollo.useQuery<NearbySpacesQuery, NearbySpacesQueryVariables>(NearbySpacesDocument, baseOptions);\n      }\nexport function useNearbySpacesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<NearbySpacesQuery, NearbySpacesQueryVariables>) {\n          return Apollo.useLazyQuery<NearbySpacesQuery, NearbySpacesQueryVariables>(NearbySpacesDocument, baseOptions);\n        }\nexport type NearbySpacesQueryHookResult = ReturnType<typeof useNearbySpacesQuery>;\nexport type NearbySpacesLazyQueryHookResult = ReturnType<typeof useNearbySpacesLazyQuery>;\nexport type NearbySpacesQueryResult = Apollo.QueryResult<NearbySpacesQuery, NearbySpacesQueryVariables>;\nexport const ParkingLotBottomBarByIdDocument = gql`\n    query ParkingLotBottomBarByID($id: Int!) {\n  parking_lot_by_pk(id: $id) {\n    id\n    name\n    location {\n      id\n      address\n      latitude\n      longitude\n    }\n    vacant_space {\n      vacant_count\n      capacity\n    }\n  }\n}\n    `;\n\n/**\n * __useParkingLotBottomBarByIdQuery__\n *\n * To run a query within a React component, call `useParkingLotBottomBarByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useParkingLotBottomBarByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useParkingLotBottomBarByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useParkingLotBottomBarByIdQuery(baseOptions: Apollo.QueryHookOptions<ParkingLotBottomBarByIdQuery, ParkingLotBottomBarByIdQueryVariables>) {\n        return Apollo.useQuery<ParkingLotBottomBarByIdQuery, ParkingLotBottomBarByIdQueryVariables>(ParkingLotBottomBarByIdDocument, baseOptions);\n      }\nexport function useParkingLotBottomBarByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ParkingLotBottomBarByIdQuery, ParkingLotBottomBarByIdQueryVariables>) {\n          return Apollo.useLazyQuery<ParkingLotBottomBarByIdQuery, ParkingLotBottomBarByIdQueryVariables>(ParkingLotBottomBarByIdDocument, baseOptions);\n        }\nexport type ParkingLotBottomBarByIdQueryHookResult = ReturnType<typeof useParkingLotBottomBarByIdQuery>;\nexport type ParkingLotBottomBarByIdLazyQueryHookResult = ReturnType<typeof useParkingLotBottomBarByIdLazyQuery>;\nexport type ParkingLotBottomBarByIdQueryResult = Apollo.QueryResult<ParkingLotBottomBarByIdQuery, ParkingLotBottomBarByIdQueryVariables>;\nexport const ParkingLotDetailsByIdDocument = gql`\n    query ParkingLotDetailsByID($id: Int!) {\n  parking_lot_by_pk(id: $id) {\n    id\n    name\n    is_disabled\n    vacant_space {\n      vacant_count\n    }\n    location {\n      latitude\n      longitude\n    }\n    lot_rows {\n      id\n      parking_spaces(order_by: {id: asc}) {\n        ...ParkingSpaceInfo\n      }\n    }\n  }\n}\n    ${ParkingSpaceInfoFragmentDoc}`;\n\n/**\n * __useParkingLotDetailsByIdQuery__\n *\n * To run a query within a React component, call `useParkingLotDetailsByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useParkingLotDetailsByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useParkingLotDetailsByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useParkingLotDetailsByIdQuery(baseOptions: Apollo.QueryHookOptions<ParkingLotDetailsByIdQuery, ParkingLotDetailsByIdQueryVariables>) {\n        return Apollo.useQuery<ParkingLotDetailsByIdQuery, ParkingLotDetailsByIdQueryVariables>(ParkingLotDetailsByIdDocument, baseOptions);\n      }\nexport function useParkingLotDetailsByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ParkingLotDetailsByIdQuery, ParkingLotDetailsByIdQueryVariables>) {\n          return Apollo.useLazyQuery<ParkingLotDetailsByIdQuery, ParkingLotDetailsByIdQueryVariables>(ParkingLotDetailsByIdDocument, baseOptions);\n        }\nexport type ParkingLotDetailsByIdQueryHookResult = ReturnType<typeof useParkingLotDetailsByIdQuery>;\nexport type ParkingLotDetailsByIdLazyQueryHookResult = ReturnType<typeof useParkingLotDetailsByIdLazyQuery>;\nexport type ParkingLotDetailsByIdQueryResult = Apollo.QueryResult<ParkingLotDetailsByIdQuery, ParkingLotDetailsByIdQueryVariables>;\nexport const ParkingLotListDocument = gql`\n    query ParkingLotList($uid: Int!, $userLocation: NearbySpacesInput!) {\n  nearby_spaces(arg1: $userLocation) {\n    distance\n    parking_lot {\n      favorites(where: {user_id: {_eq: $uid}}) {\n        user_id\n      }\n      id\n      ...ParkingLotCardInfo\n    }\n  }\n}\n    ${ParkingLotCardInfoFragmentDoc}`;\n\n/**\n * __useParkingLotListQuery__\n *\n * To run a query within a React component, call `useParkingLotListQuery` and pass it any options that fit your needs.\n * When your component renders, `useParkingLotListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useParkingLotListQuery({\n *   variables: {\n *      uid: // value for 'uid'\n *      userLocation: // value for 'userLocation'\n *   },\n * });\n */\nexport function useParkingLotListQuery(baseOptions: Apollo.QueryHookOptions<ParkingLotListQuery, ParkingLotListQueryVariables>) {\n        return Apollo.useQuery<ParkingLotListQuery, ParkingLotListQueryVariables>(ParkingLotListDocument, baseOptions);\n      }\nexport function useParkingLotListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ParkingLotListQuery, ParkingLotListQueryVariables>) {\n          return Apollo.useLazyQuery<ParkingLotListQuery, ParkingLotListQueryVariables>(ParkingLotListDocument, baseOptions);\n        }\nexport type ParkingLotListQueryHookResult = ReturnType<typeof useParkingLotListQuery>;\nexport type ParkingLotListLazyQueryHookResult = ReturnType<typeof useParkingLotListLazyQuery>;\nexport type ParkingLotListQueryResult = Apollo.QueryResult<ParkingLotListQuery, ParkingLotListQueryVariables>;\nexport const ParkingLotsDocument = gql`\n    query ParkingLots {\n  parking_lot {\n    ...ParkingLotMapInfo\n  }\n}\n    ${ParkingLotMapInfoFragmentDoc}`;\n\n/**\n * __useParkingLotsQuery__\n *\n * To run a query within a React component, call `useParkingLotsQuery` and pass it any options that fit your needs.\n * When your component renders, `useParkingLotsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useParkingLotsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useParkingLotsQuery(baseOptions?: Apollo.QueryHookOptions<ParkingLotsQuery, ParkingLotsQueryVariables>) {\n        return Apollo.useQuery<ParkingLotsQuery, ParkingLotsQueryVariables>(ParkingLotsDocument, baseOptions);\n      }\nexport function useParkingLotsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ParkingLotsQuery, ParkingLotsQueryVariables>) {\n          return Apollo.useLazyQuery<ParkingLotsQuery, ParkingLotsQueryVariables>(ParkingLotsDocument, baseOptions);\n        }\nexport type ParkingLotsQueryHookResult = ReturnType<typeof useParkingLotsQuery>;\nexport type ParkingLotsLazyQueryHookResult = ReturnType<typeof useParkingLotsLazyQuery>;\nexport type ParkingLotsQueryResult = Apollo.QueryResult<ParkingLotsQuery, ParkingLotsQueryVariables>;\nexport const ParkingLotsByInstitutionIdDocument = gql`\n    query ParkingLotsByInstitutionID($id: Int!) {\n  institution_by_pk(id: $id) {\n    parking_lots(order_by: {id: asc}) {\n      ...ParkingLotCardInfo\n    }\n  }\n}\n    ${ParkingLotCardInfoFragmentDoc}`;\n\n/**\n * __useParkingLotsByInstitutionIdQuery__\n *\n * To run a query within a React component, call `useParkingLotsByInstitutionIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useParkingLotsByInstitutionIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useParkingLotsByInstitutionIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useParkingLotsByInstitutionIdQuery(baseOptions: Apollo.QueryHookOptions<ParkingLotsByInstitutionIdQuery, ParkingLotsByInstitutionIdQueryVariables>) {\n        return Apollo.useQuery<ParkingLotsByInstitutionIdQuery, ParkingLotsByInstitutionIdQueryVariables>(ParkingLotsByInstitutionIdDocument, baseOptions);\n      }\nexport function useParkingLotsByInstitutionIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ParkingLotsByInstitutionIdQuery, ParkingLotsByInstitutionIdQueryVariables>) {\n          return Apollo.useLazyQuery<ParkingLotsByInstitutionIdQuery, ParkingLotsByInstitutionIdQueryVariables>(ParkingLotsByInstitutionIdDocument, baseOptions);\n        }\nexport type ParkingLotsByInstitutionIdQueryHookResult = ReturnType<typeof useParkingLotsByInstitutionIdQuery>;\nexport type ParkingLotsByInstitutionIdLazyQueryHookResult = ReturnType<typeof useParkingLotsByInstitutionIdLazyQuery>;\nexport type ParkingLotsByInstitutionIdQueryResult = Apollo.QueryResult<ParkingLotsByInstitutionIdQuery, ParkingLotsByInstitutionIdQueryVariables>;\nexport const PastLotOccupancyDocument = gql`\n    query PastLotOccupancy($id: Int!) {\n  past_lot_occupancy(\n    where: {parking_lot_id: {_eq: $id}}\n    order_by: {updated_at: asc}\n  ) {\n    occupied\n    updated_at\n  }\n}\n    `;\n\n/**\n * __usePastLotOccupancyQuery__\n *\n * To run a query within a React component, call `usePastLotOccupancyQuery` and pass it any options that fit your needs.\n * When your component renders, `usePastLotOccupancyQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePastLotOccupancyQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function usePastLotOccupancyQuery(baseOptions: Apollo.QueryHookOptions<PastLotOccupancyQuery, PastLotOccupancyQueryVariables>) {\n        return Apollo.useQuery<PastLotOccupancyQuery, PastLotOccupancyQueryVariables>(PastLotOccupancyDocument, baseOptions);\n      }\nexport function usePastLotOccupancyLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PastLotOccupancyQuery, PastLotOccupancyQueryVariables>) {\n          return Apollo.useLazyQuery<PastLotOccupancyQuery, PastLotOccupancyQueryVariables>(PastLotOccupancyDocument, baseOptions);\n        }\nexport type PastLotOccupancyQueryHookResult = ReturnType<typeof usePastLotOccupancyQuery>;\nexport type PastLotOccupancyLazyQueryHookResult = ReturnType<typeof usePastLotOccupancyLazyQuery>;\nexport type PastLotOccupancyQueryResult = Apollo.QueryResult<PastLotOccupancyQuery, PastLotOccupancyQueryVariables>;","import { Box, Flex, Icon, Heading, HStack, Text } from \"@chakra-ui/react\";\r\nimport React, { ReactElement } from \"react\";\r\nimport { MdLocalParking, MdPeople } from \"react-icons/md\";\r\nimport { BiTrafficCone } from \"react-icons/bi\";\r\nimport { FaParking } from \"react-icons/fa\";\r\nimport {\r\n  useAdminDashboardQuery,\r\n  usePastLotOccupancyQuery,\r\n} from \"../../generated/graphql\";\r\nimport { Line } from \"@reactchartjs/react-chart.js\";\r\n\r\nexport default function AdminHome(): ReactElement {\r\n  const { data } = useAdminDashboardQuery({\r\n    variables: { id: parseInt(localStorage.getItem(\"uid\")!!) },\r\n  });\r\n  const { data: pastData1 } = usePastLotOccupancyQuery({\r\n    variables: { id: 1 },\r\n  });\r\n  const { data: pastData2 } = usePastLotOccupancyQuery({\r\n    variables: { id: 2 },\r\n  });\r\n  const inst = data?.user_by_pk?.user_institutions[0];\r\n\r\n  return (\r\n    <Box p={8}>\r\n      <Heading mb={4}>{inst?.institution.name} Parking Lots</Heading>\r\n      <HStack\r\n        justify=\"center\"\r\n        spacing={16}\r\n        bg=\"white\"\r\n        p={4}\r\n        boxShadow=\"lg\"\r\n        rounded=\"lg\"\r\n      >\r\n        <Flex align=\"center\">\r\n          <Icon as={MdPeople} mr={1} />\r\n          <Text mr={1} fontSize=\"xl\" fontWeight=\"bold\">\r\n            {inst?.institution.user_institutions_aggregate.aggregate?.count}\r\n          </Text>\r\n          Registered Drivers\r\n        </Flex>\r\n        <Flex align=\"center\">\r\n          <Icon as={BiTrafficCone} mr={1} />\r\n          <Text mr={1} fontSize=\"xl\" fontWeight=\"bold\">\r\n            {inst?.institution.parking_lots_aggregate.aggregate?.count}\r\n          </Text>\r\n          Parking Lots\r\n        </Flex>\r\n        <Flex align=\"center\">\r\n          <Icon as={FaParking} mr={1} />\r\n          <Text mr={1} fontSize=\"xl\" fontWeight=\"bold\">\r\n            {inst?.institution.parking_lots.reduce((acc, lot) => {\r\n              if (lot?.vacant_space == null) {\r\n                return acc;\r\n              }\r\n              return acc + lot.vacant_space?.vacant_count;\r\n            }, 0)}\r\n          </Text>\r\n          Vacant Spaces\r\n        </Flex>\r\n      </HStack>\r\n      <HStack spacing={4} mt={4} justify=\"center\">\r\n        <Flex\r\n          direction=\"column\"\r\n          justify=\"center\"\r\n          spacing={16}\r\n          bg=\"white\"\r\n          p={4}\r\n          boxShadow=\"lg\"\r\n          rounded=\"lg\"\r\n          w=\"600px\"\r\n        >\r\n          <Text fontWeight=\"bold\">\r\n            Occupancy of {inst?.institution.parking_lots[0].name}\r\n          </Text>\r\n          <Line\r\n            type=\"line\"\r\n            data={{\r\n              labels: pastData1?.past_lot_occupancy.map(\r\n                (d) => `${new Date(d.updated_at).getHours()}.00`\r\n              ),\r\n              datasets: [\r\n                {\r\n                  label: \"# of occupied spaces\",\r\n                  data: pastData1?.past_lot_occupancy.map((d) => d.occupied),\r\n                  fill: false,\r\n                  backgroundColor: \"rgb(255, 99, 132)\",\r\n                  borderColor: \"rgba(255, 99, 132, 0.2)\",\r\n                },\r\n              ],\r\n            }}\r\n          />\r\n        </Flex>\r\n        <Flex\r\n          direction=\"column\"\r\n          justify=\"center\"\r\n          spacing={16}\r\n          bg=\"white\"\r\n          p={4}\r\n          boxShadow=\"lg\"\r\n          rounded=\"lg\"\r\n          w=\"600px\"\r\n        >\r\n          <Text fontWeight=\"bold\">\r\n            Occupancy of {inst?.institution.parking_lots[1].name}\r\n          </Text>\r\n          <Line\r\n            type=\"line\"\r\n            data={{\r\n              labels: pastData2?.past_lot_occupancy.map(\r\n                (d) => `${new Date(d.updated_at).getHours()}.00`\r\n              ),\r\n              datasets: [\r\n                {\r\n                  label: \"# of occupied spaces\",\r\n                  data: pastData2?.past_lot_occupancy.map((d) => d.occupied),\r\n                  fill: false,\r\n                  backgroundColor: \"rgb(38, 70, 83, 0.8)\",\r\n                  borderColor: \"rgba(42, 157, 143, 0.4)\",\r\n                },\r\n              ],\r\n            }}\r\n          />\r\n        </Flex>\r\n      </HStack>\r\n    </Box>\r\n  );\r\n}\r\n","import { Flex, Icon, Link, Stack, Text } from \"@chakra-ui/react\";\r\nimport React, { ReactElement } from \"react\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { AiOutlineDashboard } from \"react-icons/ai\";\r\nimport { FaParking } from \"react-icons/fa\";\r\nimport { GiSteeringWheel } from \"react-icons/gi\";\r\nimport { IconType } from \"react-icons\";\r\n\r\nfunction MenuLink({\r\n  path,\r\n  displayName,\r\n  selected,\r\n  icon,\r\n}: {\r\n  path: string;\r\n  displayName: string;\r\n  selected?: boolean;\r\n  icon: IconType;\r\n}) {\r\n  return (\r\n    <Link\r\n      as={RouterLink}\r\n      to={path}\r\n      display=\"flex\"\r\n      alignItems=\"center\"\r\n      style={{ textDecoration: \"none\" }}\r\n      rounded=\"lg\"\r\n      px={2}\r\n      transition=\"all 0.1s ease-out\"\r\n      h=\"45px\"\r\n      bg={selected ? \"blue.300\" : \"\"}\r\n      color={selected ? \"white\" : \"\"}\r\n      _hover={{\r\n        background: \"blue.300\",\r\n        color: \"white\",\r\n      }}\r\n    >\r\n      <Icon as={icon} mr={2} fontSize=\"xl\" />\r\n      {displayName}\r\n    </Link>\r\n  );\r\n}\r\n\r\nexport default function AdminSidebar(): ReactElement {\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <Stack borderRight=\"1px solid #ccc\">\r\n      <Flex mb={4} px={6} align=\"center\" h=\"65px\" borderBottom=\"1px solid #ccc\">\r\n        <Text fontSize=\"2xl\" fontWeight=\"bold\">\r\n          Parkhound\r\n        </Text>\r\n      </Flex>\r\n      <Stack px={4}>\r\n        <MenuLink\r\n          path=\"/admin\"\r\n          displayName=\"Dashboard\"\r\n          selected={location.pathname === \"/admin\"}\r\n          icon={AiOutlineDashboard}\r\n        />\r\n        <MenuLink\r\n          path=\"/admin/lots\"\r\n          displayName=\"Parking Lots\"\r\n          selected={location.pathname.includes(\"lot\")}\r\n          icon={FaParking}\r\n        />\r\n        <MenuLink\r\n          path=\"/admin/drivers\"\r\n          displayName=\"Registered Drivers\"\r\n          selected={location.pathname.includes(\"drivers\")}\r\n          icon={GiSteeringWheel}\r\n        />\r\n      </Stack>\r\n    </Stack>\r\n  );\r\n}\r\n","import { Grid, Box } from \"@chakra-ui/react\";\r\nimport React, { ReactElement } from \"react\";\r\nimport AdminSidebar from \"./AdminSidebar\";\r\n\r\ntype Props = {\r\n  children: React.ReactNode;\r\n};\r\n\r\nexport default function AdminLayout({ children }: Props): ReactElement {\r\n  return (\r\n    <Grid templateColumns=\"300px auto\" h=\"full\">\r\n      <AdminSidebar />\r\n      <Box\r\n        css={{\r\n          \"&::-webkit-scrollbar\": {\r\n            display: \"none\",\r\n          },\r\n        }}\r\n        overflow=\"scroll\"\r\n        bg=\"gray.50\"\r\n      >\r\n        {children}\r\n      </Box>\r\n    </Grid>\r\n  );\r\n}\r\n","import React, {\r\n  createContext,\r\n  ReactElement,\r\n  useCallback,\r\n  useContext,\r\n  useState,\r\n} from \"react\";\r\n\r\nexport type DirectionsContextType = {\r\n  destinationLotId: number | null;\r\n  destination: { lat: number; lng: number } | null;\r\n  directions: google.maps.DirectionsResult | null;\r\n  setDestinationLotId: (id: number | null) => void;\r\n  setDestination: (destination: { lat: number; lng: number } | null) => void;\r\n  setDirections: (directions: google.maps.DirectionsResult | null) => void;\r\n  cancelRoute: () => void;\r\n};\r\n\r\nexport const DirectionsContext = createContext<DirectionsContextType>({\r\n  destinationLotId: null,\r\n  destination: null,\r\n  directions: null,\r\n  setDestination: () => console.warn(\"No Directions Provider\"),\r\n  setDirections: () => console.warn(\"No Directions Provider\"),\r\n  setDestinationLotId: () => console.warn(\"No Directions Provider\"),\r\n  cancelRoute: () => console.warn(\"No Directions Provider\"),\r\n});\r\n\r\nexport default function DirectionsProvider({\r\n  children,\r\n}: {\r\n  children: ReactElement;\r\n}): ReactElement {\r\n  const [destination, setDestination] = useState<{\r\n    lat: number;\r\n    lng: number;\r\n  } | null>(null);\r\n  const [destinationLotId, setDestinationLotId] = useState<number | null>(null);\r\n  const [\r\n    directions,\r\n    setDirections,\r\n  ] = useState<google.maps.DirectionsResult | null>(null);\r\n\r\n  const cancelRoute = useCallback(() => {\r\n    setDestination(null);\r\n    setDirections(null);\r\n    setDestinationLotId(null);\r\n  }, [setDestination, setDirections]);\r\n\r\n  return (\r\n    <DirectionsContext.Provider\r\n      value={{\r\n        destination,\r\n        directions,\r\n        destinationLotId,\r\n        setDestination,\r\n        setDirections,\r\n        setDestinationLotId,\r\n        cancelRoute,\r\n      }}\r\n    >\r\n      {children}\r\n    </DirectionsContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useDirections = () => useContext(DirectionsContext);\r\n","export default function formatDistance(dist?: number) {\r\n  if (dist == null) {\r\n    return;\r\n  }\r\n  if (dist < 1) {\r\n    return Math.round(dist * 100) * 10 + \"m\";\r\n  } else {\r\n    return dist.toFixed(1) + \"km\";\r\n  }\r\n}\r\n","export function getDistanceBetweenTwoPoints(lat1: number, lon1: number, lat2:number, lon2:number): number {\r\n    var p = 0.017453292519943295; // Math.PI / 180\r\n    var c = Math.cos;\r\n    var a =\r\n      0.5 -\r\n      c((lat2 - lat1) * p) / 2 +\r\n      (c(lat1 * p) * c(lat2 * p) * (1 - c((lon2 - lon1) * p))) / 2;\r\n  \r\n    return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n  }\r\n  ","import { useState, useEffect } from \"react\";\r\nimport { GeolocationData } from \"../types\";\r\n\r\nexport default function useGeolocation(): [string, GeolocationData | null] {\r\n  const [error, setError] = useState(\"\");\r\n  const [position, setPosition] = useState<GeolocationData | null>(null);\r\n\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(\r\n      (pos) => {\r\n        setError(\"\");\r\n        setPosition({\r\n          lat: pos.coords.latitude,\r\n          lng: pos.coords.longitude,\r\n        });\r\n      },\r\n      (e) => setError(e.message),\r\n      {\r\n        // maximumAge: Infinity,\r\n        enableHighAccuracy: true,\r\n      }\r\n    );\r\n  }, []);\r\n\r\n  return [error, position];\r\n}\r\n","import {\r\n  Button,\r\n  Text,\r\n  Box,\r\n  Icon,\r\n  HStack,\r\n  Flex,\r\n  Grid,\r\n  Stack,\r\n} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { FaCompass } from \"react-icons/fa\";\r\nimport { GrLocation, GrCar } from \"react-icons/gr\";\r\nimport { HiOutlineViewGrid } from \"react-icons/hi\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { ParkingLotBottomBarByIdQuery } from \"../generated/graphql\";\r\nimport formatDistance from \"../utils/formatDistance\";\r\nimport { getDistanceBetweenTwoPoints } from \"../utils/getDistanceBetweenTwoPoints\";\r\nimport useGeolocation from \"../utils/useGeolocation\";\r\n\r\ntype Props = {\r\n  id: number;\r\n  address: string;\r\n  availableSpace: number;\r\n  capacity: number;\r\n  location?: NonNullable<\r\n    ParkingLotBottomBarByIdQuery[\"parking_lot_by_pk\"]\r\n  >[\"location\"];\r\n};\r\n\r\nexport default function BottomBarDetails({\r\n  id,\r\n  address,\r\n  availableSpace,\r\n  capacity,\r\n  location,\r\n}: Props) {\r\n  const [error, position] = useGeolocation();\r\n\r\n  if (error) {\r\n    console.error(error);\r\n  }\r\n\r\n  return (\r\n    <Flex direction=\"column\" p={3} h=\"full\">\r\n      <Grid mt=\"12px\" templateColumns=\"1fr 1fr 1fr\" placeItems=\"center\">\r\n        <Stack spacing={1}>\r\n          <HStack>\r\n            <Icon as={GrCar} />\r\n            <Text fontWeight=\"bold\">Available</Text>\r\n          </HStack>\r\n          <Flex align=\"flex-start\">\r\n            <Text\r\n              mr={1}\r\n              display=\"inline-block\"\r\n              lineHeight={1}\r\n              fontWeight=\"bold\"\r\n              fontSize=\"3xl\"\r\n            >\r\n              {availableSpace}\r\n            </Text>\r\n            <Text color=\"gray.500\" display=\"inline-block\">\r\n              /{capacity}\r\n            </Text>\r\n          </Flex>\r\n        </Stack>\r\n        <Stack align=\"center\">\r\n          <HStack>\r\n            <Icon as={GrLocation} />\r\n            <Text fontWeight=\"bold\">Address</Text>\r\n          </HStack>\r\n          <Text>{address}</Text>\r\n        </Stack>\r\n        <Stack align=\"center\">\r\n          <HStack>\r\n            <Icon as={FaCompass} />\r\n            <Text fontWeight=\"bold\">Distance</Text>\r\n          </HStack>\r\n          <Text>\r\n            {position != null &&\r\n              location != null &&\r\n              formatDistance(\r\n                getDistanceBetweenTwoPoints(\r\n                  position?.lat,\r\n                  position?.lng,\r\n                  location?.latitude,\r\n                  location?.longitude\r\n                )\r\n              )}\r\n          </Text>\r\n        </Stack>\r\n      </Grid>\r\n      <Box mt=\"auto\">\r\n        <Link to={`lot/${id}`}>\r\n          <Button\r\n            w=\"full\"\r\n            size=\"sm\"\r\n            leftIcon={<HiOutlineViewGrid />}\r\n            colorScheme=\"blue\"\r\n          >\r\n            View\r\n          </Button>\r\n        </Link>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}\r\n","import { Box, Divider, Flex, Grid, Icon, Stack } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { GrCycle } from \"react-icons/gr\";\r\nimport { FiCornerUpRight, FiCornerUpLeft } from \"react-icons/fi\";\r\nimport { useDirections } from \"../utils/DirectionsProvider\";\r\n\r\nfunction renderIcon(maneuver: string) {\r\n  switch (true) {\r\n    case maneuver.includes(\"roundabout\"):\r\n      return <Icon as={GrCycle} />;\r\n    case maneuver === \"turn-right\":\r\n      return <Icon as={FiCornerUpRight} />;\r\n    case maneuver === \"turn-left\":\r\n      return <Icon as={FiCornerUpLeft} />;\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\nexport default function BottomBarDirections() {\r\n  const { directions } = useDirections();\r\n\r\n  if (directions?.routes[0]?.legs == null) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Stack p={4} overflowY=\"scroll\" spacing={4} divider={<Divider />}>\r\n      {directions?.routes[0]?.legs[0].steps.map((step, i) => {\r\n        return (\r\n          <Box key={i}>\r\n            <Grid templateColumns=\"auto 40px\">\r\n              <Box>\r\n                {`${i + 1}.`}\r\n                <Box\r\n                  ml={1}\r\n                  display=\"inline\"\r\n                  dangerouslySetInnerHTML={{ __html: step.instructions }}\r\n                />\r\n              </Box>\r\n              <Flex align=\"center\" justify=\"center\">\r\n                {renderIcon((step as any).maneuver)}\r\n              </Flex>\r\n            </Grid>\r\n          </Box>\r\n        );\r\n      })}\r\n    </Stack>\r\n  );\r\n}\r\n","import { Box, Flex, HStack, Text } from \"@chakra-ui/react\";\r\nimport React, { ReactElement } from \"react\";\r\nimport { useNearbySpacesQuery } from \"../generated/graphql\";\r\nimport useGeolocation from \"../utils/useGeolocation\";\r\n\r\ntype Props = {\r\n  onCardClick: (parking_lot_id?: number) => void;\r\n};\r\n\r\nfunction formatDistance(dist?: number) {\r\n  if (dist == null) {\r\n    return;\r\n  }\r\n  if (dist < 1) {\r\n    return Math.round(dist * 100) * 10 + \" m\";\r\n  } else {\r\n    return dist.toFixed(1) + \" km\";\r\n  }\r\n}\r\n\r\nexport default function SpacesNearYou({ onCardClick }: Props): ReactElement {\r\n  const [error, position] = useGeolocation();\r\n  const { data } = useNearbySpacesQuery({\r\n    variables: {\r\n      userLocation: { lat: position?.lat || 0, lng: position?.lng || 0 },\r\n    },\r\n  });\r\n\r\n  if (error) {\r\n    return <Text>Error occured</Text>;\r\n  }\r\n\r\n  return (\r\n    <Flex h=\"150px\">\r\n      <HStack p={4} spacing={3} overflowX=\"scroll\">\r\n        {data?.nearby_spaces?.map((lot, i) => (\r\n          <Flex\r\n            onClick={() => onCardClick(lot?.parking_lot?.id)}\r\n            key={i}\r\n            p={2}\r\n            rounded=\"lg\"\r\n            direction=\"column\"\r\n            h=\"full\"\r\n            minW=\"175px\"\r\n            borderWidth=\"1px\"\r\n            borderColor={\r\n              lot?.parking_lot?.vacant_space?.vacant_count > 0\r\n                ? \"green.500\"\r\n                : \"gray.300\"\r\n            }\r\n          >\r\n            <Text fontWeight=\"bold\">{lot?.parking_lot?.name}</Text>\r\n            <Text color=\"gray.500\">{formatDistance(lot?.distance)}</Text>\r\n            <Box mt=\"auto\">\r\n              <Text display=\"inline\" mr={1} fontSize=\"xl\" fontWeight=\"bold\">\r\n                {lot?.parking_lot?.vacant_space?.vacant_count || 0}\r\n              </Text>\r\n              <Text display=\"inline\" color=\"gray.500\">\r\n                empty spaces\r\n              </Text>\r\n            </Box>\r\n          </Flex>\r\n        ))}\r\n      </HStack>\r\n    </Flex>\r\n  );\r\n}\r\n","import {\r\n  Text,\r\n  chakra,\r\n  Flex,\r\n  Grid,\r\n  IconButton,\r\n  Spacer,\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogContent,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogOverlay,\r\n  Button,\r\n} from \"@chakra-ui/react\";\r\nimport { motion, PanInfo, useAnimation } from \"framer-motion\";\r\nimport React, { useEffect, useRef } from \"react\";\r\nimport { MdCancel, MdChevronLeft } from \"react-icons/md\";\r\nimport { useParkingLotBottomBarByIdQuery } from \"../generated/graphql\";\r\nimport { useDirections } from \"../utils/DirectionsProvider\";\r\nimport BottomBarDetails from \"./BottomBarDetails\";\r\nimport BottomBarDirections from \"./BottomBarDirections\";\r\nimport SpacesNearYou from \"./SpacesNearYou\";\r\n\r\ntype DragEventType =\r\n  | MouseEvent\r\n  | TouchEvent\r\n  | PointerEvent\r\n  | React.DragEvent<HTMLDivElement>;\r\n\r\ntype Props = {\r\n  selectedLot: number | null;\r\n  setSelectedLot: React.Dispatch<React.SetStateAction<number | null>>;\r\n  isOpen: boolean;\r\n  setIsOpen: React.Dispatch<React.SetStateAction<boolean>>;\r\n};\r\n\r\nconst MotionBox = chakra(motion.div);\r\n\r\nconst spring = {\r\n  type: \"spring\",\r\n  stiffness: 700,\r\n  damping: 30,\r\n};\r\n\r\nfunction usePrevious(value: boolean) {\r\n  const previousValueRef = useRef<any>();\r\n\r\n  useEffect(() => {\r\n    previousValueRef.current = value;\r\n  }, [value]);\r\n\r\n  return previousValueRef.current;\r\n}\r\n\r\nexport default function MapBottomBar({\r\n  selectedLot,\r\n  setSelectedLot,\r\n  isOpen,\r\n  setIsOpen,\r\n}: Props) {\r\n  const { directions, cancelRoute } = useDirections();\r\n  const controls = useAnimation();\r\n  const prevIsOpen = usePrevious(isOpen);\r\n  const [alertIsOpen, setAlertIsOpen] = React.useState(false);\r\n  const cancelRef = React.useRef<HTMLButtonElement>(null);\r\n\r\n  const { data } = useParkingLotBottomBarByIdQuery({\r\n    variables: { id: selectedLot || 0 },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (prevIsOpen && !isOpen) {\r\n      controls.start(\"hidden\");\r\n    } else if (!prevIsOpen && isOpen) {\r\n      controls.start(\"visible\");\r\n    }\r\n  }, [controls, isOpen, prevIsOpen]);\r\n\r\n  function onDragEnd(event: DragEventType, info?: PanInfo): void {\r\n    const shouldClose =\r\n      info!.velocity.y > 20 || (info!.velocity.y >= 0 && info!.point.y > 45);\r\n    if (shouldClose) {\r\n      controls.start(\"hidden\");\r\n      setIsOpen(false);\r\n    } else {\r\n      controls.start(\"visible\");\r\n      setIsOpen(true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Flex\r\n      w=\"full\"\r\n      h=\"full\"\r\n      align=\"flex-end\"\r\n      pos=\"absolute\"\r\n      bottom=\"0\"\r\n      left=\"0\"\r\n      zIndex=\"999\"\r\n      overflowY=\"hidden\"\r\n      pointerEvents=\"none\"\r\n    >\r\n      <MotionBox\r\n        pointerEvents=\"auto\"\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        boxShadow=\"xs\"\r\n        borderTopLeftRadius=\"xl\"\r\n        borderTopRightRadius=\"xl\"\r\n        bg=\"white\"\r\n        h=\"200px\"\r\n        w=\"full\"\r\n        drag=\"y\"\r\n        initial=\"visible\"\r\n        animate={controls}\r\n        variants={{\r\n          visible: { y: 0 },\r\n          hidden: { y: 150 },\r\n        }}\r\n        transition={spring}\r\n        onDragEnd={onDragEnd}\r\n        dragConstraints={{ top: 0 }}\r\n      >\r\n        <Grid\r\n          placeItems=\"center\"\r\n          templateColumns=\"40px auto 40px\"\r\n          minH=\"50px\"\r\n          borderBottom=\"1px #ddd solid\"\r\n        >\r\n          {selectedLot ? (\r\n            <IconButton\r\n              rounded=\"full\"\r\n              variant=\"ghost\"\r\n              aria-label=\"Go back\"\r\n              icon={<MdChevronLeft />}\r\n              onClick={() => {\r\n                setSelectedLot(null);\r\n              }}\r\n            />\r\n          ) : (\r\n            <Spacer />\r\n          )}\r\n          <Text fontWeight=\"bold\" align=\"center\">\r\n            {directions\r\n              ? \"Directions\"\r\n              : selectedLot\r\n              ? data?.parking_lot_by_pk?.name\r\n              : \"Parking Lots Near You\"}\r\n          </Text>\r\n          {directions ? (\r\n            <IconButton\r\n              colorScheme=\"red\"\r\n              rounded=\"full\"\r\n              variant=\"ghost\"\r\n              aria-label=\"Cancel\"\r\n              icon={<MdCancel />}\r\n              onClick={() => {\r\n                setAlertIsOpen(true);\r\n              }}\r\n            />\r\n          ) : (\r\n            <Spacer />\r\n          )}\r\n        </Grid>\r\n        {directions ? (\r\n          <BottomBarDirections />\r\n        ) : selectedLot ? (\r\n          <BottomBarDetails\r\n            id={selectedLot}\r\n            address={data?.parking_lot_by_pk?.location.address || \"\"}\r\n            availableSpace={\r\n              data?.parking_lot_by_pk?.vacant_space?.vacant_count || 0\r\n            }\r\n            capacity={data?.parking_lot_by_pk?.vacant_space?.capacity}\r\n            location={data?.parking_lot_by_pk?.location}\r\n          />\r\n        ) : (\r\n          <SpacesNearYou\r\n            onCardClick={(id) => {\r\n              if (id == null) {\r\n                return;\r\n              }\r\n              setSelectedLot(id);\r\n            }}\r\n          />\r\n        )}\r\n      </MotionBox>\r\n      <AlertDialog\r\n        isOpen={alertIsOpen}\r\n        leastDestructiveRef={cancelRef}\r\n        onClose={() => setAlertIsOpen(false)}\r\n        motionPreset=\"slideInBottom\"\r\n        size=\"sm\"\r\n        preserveScrollBarGap\r\n      >\r\n        <AlertDialogOverlay>\r\n          <AlertDialogContent mt=\"auto\" mb={0}>\r\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n              Cancel Route\r\n            </AlertDialogHeader>\r\n            <AlertDialogBody>\r\n              Do you want to cancel the current route?\r\n            </AlertDialogBody>\r\n            <AlertDialogFooter>\r\n              <Button ref={cancelRef} onClick={() => setAlertIsOpen(false)}>\r\n                Close\r\n              </Button>\r\n              <Button\r\n                colorScheme=\"red\"\r\n                onClick={() => {\r\n                  cancelRoute();\r\n                  setAlertIsOpen(false);\r\n                }}\r\n                ml={3}\r\n              >\r\n                Cancel Route\r\n              </Button>\r\n            </AlertDialogFooter>\r\n          </AlertDialogContent>\r\n        </AlertDialogOverlay>\r\n      </AlertDialog>\r\n    </Flex>\r\n  );\r\n}\r\n","const styles: google.maps.MapTypeStyle[] = [\r\n  {\r\n    featureType: \"administrative.land_parcel\",\r\n    elementType: \"labels\",\r\n    stylers: [\r\n      {\r\n        visibility: \"off\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    featureType: \"poi\",\r\n    elementType: \"labels.text\",\r\n    stylers: [\r\n      {\r\n        visibility: \"off\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    featureType: \"poi.business\",\r\n    stylers: [\r\n      {\r\n        visibility: \"off\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    featureType: \"poi.park\",\r\n    elementType: \"labels.text\",\r\n    stylers: [\r\n      {\r\n        visibility: \"off\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    featureType: \"road.local\",\r\n    elementType: \"labels\",\r\n    stylers: [\r\n      {\r\n        visibility: \"off\",\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nexport default styles;\r\n","import React, { ReactElement, useEffect, useMemo, useState } from \"react\";\r\nimport {\r\n  GoogleMap,\r\n  LoadScript,\r\n  GoogleMapProps,\r\n  Marker,\r\n  MarkerProps,\r\n} from \"@react-google-maps/api\";\r\nimport { ParkingLotsQuery } from \"../generated/graphql\";\r\nimport styles from \"../utils/googleMapStyles\";\r\nimport { useDirections } from \"../utils/DirectionsProvider\";\r\nimport { GeolocationData } from \"../types\";\r\n\r\nfunction CurrentLocationMarker({ position }: MarkerProps) {\r\n  return (\r\n    <Marker\r\n      icon={{\r\n        path: 0, // 0 for circle\r\n        scale: 8,\r\n        fillOpacity: 1,\r\n        strokeWeight: 2,\r\n        fillColor: \"#5384ED\",\r\n        strokeColor: \"#ffffff\",\r\n      }}\r\n      position={position}\r\n    />\r\n  );\r\n}\r\n\r\ntype Props = {\r\n  lots: ParkingLotsQuery[\"parking_lot\"];\r\n  onMarkerClick: (id: number) => void;\r\n  children: ReactElement;\r\n  currentPos: GeolocationData;\r\n} & GoogleMapProps;\r\n\r\nfunction MapComponent({\r\n  center,\r\n  lots,\r\n  onMarkerClick,\r\n  children,\r\n  currentPos,\r\n}: Props) {\r\n  const [gmap, setGmap] = useState<google.maps.Map<Element> | null>(null);\r\n  const { destinationLotId } = useDirections();\r\n  const renderedMarkers = useMemo(() => {\r\n    if (destinationLotId == null) {\r\n      return lots.map(({ id, location, vacant_space }, i) => (\r\n        <CustomMarker\r\n          onClick={() => onMarkerClick(id)}\r\n          key={i}\r\n          position={{ lat: location.latitude, lng: location.longitude }}\r\n          is_full={\r\n            vacant_space?.vacant_count === 0 ||\r\n            vacant_space?.vacant_count == null\r\n          }\r\n        />\r\n      ));\r\n    } else {\r\n      return lots\r\n        .filter((lot) => lot.id === destinationLotId)\r\n        .map(({ id, location }, i) => (\r\n          <CustomMarker\r\n            onClick={() => onMarkerClick(id)}\r\n            key={i}\r\n            position={{ lat: location.latitude, lng: location.longitude }}\r\n          />\r\n        ));\r\n    }\r\n  }, [destinationLotId, lots, onMarkerClick]);\r\n\r\n  useEffect(() => {\r\n    gmap?.panTo(center!!);\r\n  }, [center, gmap]);\r\n\r\n  return (\r\n    <LoadScript googleMapsApiKey=\"AIzaSyBblBzZWcOK-HlyENdxgIwwwid0sVmseDk\">\r\n      <GoogleMap\r\n        onLoad={(map) => setGmap(map)}\r\n        options={{\r\n          disableDefaultUI: true,\r\n          clickableIcons: false,\r\n          styles: styles,\r\n        }}\r\n        mapContainerStyle={{\r\n          width: \"100vw\",\r\n          height: \"100vh\",\r\n        }}\r\n        center={center}\r\n        zoom={15}\r\n      >\r\n        <CurrentLocationMarker position={currentPos || { lat: 0, lng: 0 }} />\r\n        {renderedMarkers}\r\n        {children}\r\n      </GoogleMap>\r\n    </LoadScript>\r\n  );\r\n}\r\n\r\ntype ParkingLotMarkerProps = {\r\n  is_full?: boolean;\r\n} & MarkerProps;\r\n\r\nfunction CustomMarker({ is_full, ...props }: ParkingLotMarkerProps) {\r\n  return (\r\n    <Marker\r\n      icon={{\r\n        url: is_full ? \"/red_marker.svg\" : \"parking_marker.svg\",\r\n        anchor: new google.maps.Point(17, 46),\r\n        scaledSize: new google.maps.Size(37, 37),\r\n      }}\r\n      {...props}\r\n    ></Marker>\r\n  );\r\n}\r\n\r\nexport default React.memo(MapComponent);\r\n","import {\r\n  Box,\r\n  Link,\r\n  Divider,\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  IconButton,\r\n  Stack,\r\n  useDisclosure,\r\n  Flex,\r\n  Icon,\r\n  Button,\r\n} from \"@chakra-ui/react\";\r\nimport React, { ReactElement, useRef } from \"react\";\r\nimport { MdLocalParking, MdMap, MdMenu } from \"react-icons/md\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\n\r\nexport default function HomeOverlayButtons(): ReactElement {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const btnRef = useRef<HTMLButtonElement>(null);\r\n\r\n  return (\r\n    <>\r\n      <Box pos=\"absolute\" top=\"0\" left=\"0\" zIndex=\"999\">\r\n        <IconButton\r\n          boxShadow=\"lg\"\r\n          ref={btnRef}\r\n          aria-label=\"drawer\"\r\n          onClick={onOpen}\r\n          icon={<MdMenu />}\r\n          bg=\"white\"\r\n          rounded=\"full\"\r\n          height=\"40px\"\r\n          width=\"40px\"\r\n          mt=\"20px\"\r\n          ml=\"20px\"\r\n        />\r\n      </Box>\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement=\"left\"\r\n        onClose={onClose}\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay>\r\n          <DrawerContent>\r\n            <DrawerCloseButton />\r\n            <DrawerHeader>Parkhound</DrawerHeader>\r\n            <Divider />\r\n            <DrawerBody>\r\n              <Stack mt={4} spacing={4}>\r\n                <Flex align=\"center\">\r\n                  <Icon as={MdMap} mr={2} />\r\n                  <Link to=\"/\" as={RouterLink}>\r\n                    Map\r\n                  </Link>\r\n                </Flex>\r\n                <Flex align=\"center\">\r\n                  <Icon as={MdLocalParking} mr={2} />\r\n                  <Link to=\"/lot-list\" as={RouterLink}>\r\n                    Parking Lots\r\n                  </Link>\r\n                </Flex>\r\n              </Stack>\r\n            </DrawerBody>\r\n            <DrawerFooter>\r\n              <Button colorScheme=\"red\">Sign Out</Button>\r\n            </DrawerFooter>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n","import { Flex, Spinner } from \"@chakra-ui/react\";\r\nimport React, { ReactElement } from \"react\";\r\n\r\nexport default function FullPageLoading(): ReactElement {\r\n  return (\r\n    <Flex h=\"100vh\" justify=\"center\" align=\"center\">\r\n      <Spinner\r\n        color=\"blue.500\"\r\n        size=\"xl\"\r\n        thickness=\"4px\"\r\n        emptyColor=\"gray.200\"\r\n      />\r\n    </Flex>\r\n  );\r\n}\r\n","import { DirectionsRenderer, DirectionsService } from \"@react-google-maps/api\";\r\nimport React, { ReactElement } from \"react\";\r\nimport { useDirections } from \"../utils/DirectionsProvider\";\r\n\r\nexport default function MapDirections(): ReactElement {\r\n  const { destination, directions, setDirections } = useDirections();\r\n  return (\r\n    <>\r\n      {destination && (\r\n        <DirectionsService\r\n          // required\r\n          options={{\r\n            destination: destination,\r\n            origin: { lat: 38.4548244, lng: 27.1899767 },\r\n            travelMode: \"DRIVING\" as google.maps.TravelMode,\r\n          }}\r\n          // required\r\n          callback={(resp) => {\r\n            if (directions == null) {\r\n              console.log(resp);\r\n              setDirections(resp);\r\n            }\r\n          }}\r\n        />\r\n      )}\r\n      {directions && (\r\n        <DirectionsRenderer\r\n          options={{\r\n            suppressMarkers: true,\r\n            directions: directions,\r\n          }}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { Box } from \"@chakra-ui/react\";\r\nimport React, { useState } from \"react\";\r\nimport MapBottomBar from \"../components/MapBottomBar\";\r\nimport MapComponent from \"../components/MapComponent\";\r\nimport HomeOverlayButtons from \"../components/HomeOverlayButtons\";\r\nimport useGeolocation from \"../utils/useGeolocation\";\r\nimport { useParkingLotsQuery } from \"../generated/graphql\";\r\nimport FullPageLoading from \"../components/FullPageLoading\";\r\nimport MapDirections from \"../components/MapDirections\";\r\nimport { GeolocationData } from \"../types\";\r\n\r\nexport default function Home() {\r\n  const [error, position] = useGeolocation();\r\n  const { data, error: lot_error, loading } = useParkingLotsQuery();\r\n  const [selectedLot, setSelectedLot] = useState<number | null>(null);\r\n  const [isBottomBarOpen, setIsBottomBarOpen] = useState(true);\r\n  const [mapCenter, setMapCenter] = useState<GeolocationData | null>(null);\r\n\r\n  if (error !== \"\" || lot_error) {\r\n    return <Box>Error: {error || lot_error}</Box>;\r\n  }\r\n\r\n  if (loading || data?.parking_lot == null || position == null) {\r\n    return <FullPageLoading />;\r\n  }\r\n\r\n  function handleMarkerClick(id: number) {\r\n    const lot = data?.parking_lot.find((lot) => lot.id === id);\r\n    setSelectedLot(id);\r\n    setIsBottomBarOpen(true);\r\n    setMapCenter({\r\n      lat: lot?.location.latitude || 0,\r\n      lng: lot?.location.longitude || 0,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Box pos=\"relative\">\r\n      <MapBottomBar\r\n        selectedLot={selectedLot}\r\n        setSelectedLot={setSelectedLot}\r\n        isOpen={isBottomBarOpen}\r\n        setIsOpen={setIsBottomBarOpen}\r\n      />\r\n      {position && (\r\n        <MapComponent\r\n          currentPos={position}\r\n          center={mapCenter ?? position}\r\n          lots={data?.parking_lot}\r\n          onMarkerClick={handleMarkerClick}\r\n        >\r\n          <MapDirections />\r\n        </MapComponent>\r\n      )}\r\n      <HomeOverlayButtons />\r\n    </Box>\r\n  );\r\n}\r\n","import { IconButton, Grid, Text, Flex, Box, GridProps } from \"@chakra-ui/react\";\r\nimport React, { ReactElement } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { MdChevronLeft, MdFavorite, MdFavoriteBorder } from \"react-icons/md\";\r\nimport {\r\n  useAddToFavoritesMutation,\r\n  useFavoritesQuery,\r\n} from \"../generated/graphql\";\r\n\r\ntype Props = {\r\n  lot_id: number;\r\n  lot_name: string;\r\n  vacant_space: number;\r\n  is_admin?: boolean;\r\n} & GridProps;\r\n\r\nexport default function ParkingSpacesHeader({\r\n  lot_name,\r\n  vacant_space,\r\n  children,\r\n  lot_id,\r\n  is_admin = false,\r\n  ...props\r\n}: Props): ReactElement {\r\n  const history = useHistory();\r\n  const { data, refetch } = useFavoritesQuery({\r\n    variables: {\r\n      id: parseInt(localStorage.getItem(\"uid\")!!),\r\n    },\r\n  });\r\n  const [addFavorite] = useAddToFavoritesMutation({\r\n    variables: {\r\n      uid: parseInt(localStorage.getItem(\"uid\")!!),\r\n      parking_lot_id: lot_id,\r\n    },\r\n    onCompleted: () => {\r\n      refetch();\r\n    },\r\n  });\r\n  return (\r\n    <Grid\r\n      position=\"fixed\"\r\n      top=\"0\"\r\n      left={is_admin ? \"300px\" : 0}\r\n      {...props}\r\n      placeItems=\"center\"\r\n      templateColumns=\"40px auto 40px\"\r\n      p={2}\r\n      borderBottom=\"1px solid #eee\"\r\n      bg=\"white\"\r\n      w={is_admin ? \"80%\" : \"full\"}\r\n      zIndex=\"999\"\r\n    >\r\n      <IconButton\r\n        rounded=\"full\"\r\n        variant=\"ghost\"\r\n        aria-label=\"Back button\"\r\n        icon={<MdChevronLeft />}\r\n        onClick={() => {\r\n          history.goBack();\r\n        }}\r\n      />\r\n      <Flex direction=\"column\" justify=\"center\" align=\"center\">\r\n        <Text fontWeight=\"bold\">{lot_name}</Text>\r\n        <Flex>\r\n          {children}\r\n          <Box>\r\n            <Text mr={1} display=\"inline\" fontWeight=\"bold\">\r\n              {vacant_space}\r\n            </Text>\r\n            <Text display=\"inline\" color=\"gray.500\">\r\n              vacant spaces\r\n            </Text>\r\n          </Box>\r\n        </Flex>\r\n      </Flex>\r\n      {!is_admin && (\r\n        <IconButton\r\n          rounded=\"full\"\r\n          variant=\"ghost\"\r\n          aria-label=\"Favorite\"\r\n          icon={\r\n            data?.user_by_pk?.favorites.find(\r\n              (lot) => lot.parking_lot.id === lot_id\r\n            ) != null ? (\r\n              <MdFavorite color=\"red\" />\r\n            ) : (\r\n              <MdFavoriteBorder />\r\n            )\r\n          }\r\n          onClick={() => {\r\n            data?.user_by_pk?.favorites.find(\r\n              (lot) => lot.parking_lot.id === lot_id\r\n            ) == null && addFavorite();\r\n          }}\r\n        />\r\n      )}\r\n    </Grid>\r\n  );\r\n}\r\n","import { Flex, Icon, Text } from \"@chakra-ui/react\";\r\nimport React, { ReactElement } from \"react\";\r\nimport { RiEmotionSadLine } from \"react-icons/ri\";\r\n\r\ntype Props = {\r\n  message: string;\r\n  children: ReactElement;\r\n};\r\n\r\nexport default function FullPageError({\r\n  message,\r\n  children,\r\n}: Props): ReactElement {\r\n  return (\r\n    <Flex p={4} direction=\"column\" justify=\"center\" align=\"center\" h=\"100%\">\r\n      <Icon boxSize={24} as={RiEmotionSadLine} />\r\n      <Text my={4}>{message}</Text>\r\n      {children}\r\n    </Flex>\r\n  );\r\n}\r\n","import { Box, BoxProps, Flex, Icon, Text } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { MdArrowDownward, MdArrowUpward, MdErrorOutline } from \"react-icons/md\";\r\nimport { ParkingLotDetailsByIdQuery } from \"../generated/graphql\";\r\n\r\ntype Props = {\r\n  space: NonNullable<\r\n    ParkingLotDetailsByIdQuery[\"parking_lot_by_pk\"]\r\n  >[\"lot_rows\"][0][\"parking_spaces\"][0];\r\n  is_down: boolean;\r\n  is_selected?: boolean;\r\n} & BoxProps;\r\n\r\nfunction ParkingSpace({\r\n  space: {\r\n    id,\r\n    is_entry,\r\n    is_exit,\r\n    is_occupied,\r\n    is_road,\r\n    is_blank,\r\n    space_id,\r\n    is_disabled,\r\n    rotation,\r\n  },\r\n  is_down,\r\n  is_selected,\r\n  ...props\r\n}: Props) {\r\n  if (is_blank) {\r\n    return <Box bg=\"transparent\" h=\"24px\" w=\"48px\" m={2} />;\r\n  }\r\n  if (is_road) {\r\n    return (\r\n      <Box\r\n        fontWeight=\"bold\"\r\n        transform={`rotate(${rotation}deg)`}\r\n        color=\"gray.500\"\r\n        bg=\"transparent\"\r\n        h=\"24px\"\r\n        w=\"48px\"\r\n        m={2}\r\n        textAlign=\"center\"\r\n        userSelect=\"none\"\r\n      >\r\n        |\r\n      </Box>\r\n    );\r\n  }\r\n  if (is_entry || is_exit) {\r\n    return (\r\n      <Flex\r\n        direction=\"column\"\r\n        justify=\"center\"\r\n        align=\"center\"\r\n        bg=\"transparent\"\r\n        h=\"24px\"\r\n        w=\"48px\"\r\n        m={2}\r\n        userSelect=\"none\"\r\n      >\r\n        {!is_down && <Icon as={MdArrowUpward} />}\r\n        <Text fontWeight=\"bold\">{is_entry ? \"Entry\" : \"Exit\"}</Text>\r\n        {is_down && <Icon as={MdArrowDownward} />}\r\n      </Flex>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Flex\r\n      transform={`rotate(${rotation}deg)`}\r\n      {...props}\r\n      align=\"center\"\r\n      justify=\"center\"\r\n      bg={is_disabled ? \"red.500\" : is_occupied ? \"gray.300\" : \"green.400\"}\r\n      h=\"24px\"\r\n      w=\"48px\"\r\n      rounded=\"lg\"\r\n      m={2}\r\n      border={is_selected ? \"3px solid black\" : \"none\"}\r\n    >\r\n      {is_disabled ? (\r\n        <Icon as={MdErrorOutline} />\r\n      ) : (\r\n        <Text\r\n          align=\"center\"\r\n          color={is_occupied ? \"black\" : \"white\"}\r\n          fontWeight=\"bold\"\r\n          userSelect=\"none\"\r\n        >\r\n          {space_id}\r\n        </Text>\r\n      )}\r\n    </Flex>\r\n  );\r\n}\r\n\r\nexport default React.memo(ParkingSpace);\r\n","import { Box, Grid, GridProps } from \"@chakra-ui/react\";\r\nimport { motion, MotionValue } from \"framer-motion\";\r\nimport React, { ReactElement, useEffect, useRef } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ParkingLotDetailsByIdQuery } from \"../generated/graphql\";\r\nimport { SpaceData } from \"../types\";\r\nimport ParkingSpace from \"./ParkingSpace\";\r\n\r\nconst SPACE_WIDTH = 60;\r\nconst SPACE_HEIGHT = 36;\r\n\r\ntype Props = {\r\n  lot_rows: NonNullable<\r\n    ParkingLotDetailsByIdQuery[\"parking_lot_by_pk\"]\r\n  >[\"lot_rows\"];\r\n  onSpaceClick?: (data: SpaceData) => void;\r\n  scale: MotionValue<number>;\r\n  selectedSpaceId: number | null;\r\n} & GridProps;\r\n\r\nexport default function ParkingLotMap({\r\n  lot_rows,\r\n  onSpaceClick,\r\n  selectedSpaceId,\r\n  scale,\r\n  ...props\r\n}: Props): ReactElement {\r\n  const history = useHistory();\r\n  const is_admin = history.location.pathname.includes(\"admin\");\r\n  const gridRef = useRef<HTMLDivElement>(null);\r\n  function handleClick(data: SpaceData) {\r\n    if (onSpaceClick) {\r\n      onSpaceClick(data);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (gridRef == null || gridRef.current == null || !is_admin) {\r\n      return;\r\n    }\r\n\r\n    const ele = gridRef.current;\r\n    let pos = { top: 0, left: 0, x: 0, y: 0 };\r\n\r\n    const mouseMoveHandler = function (e: MouseEvent) {\r\n      // How far the mouse has been moved\r\n      const dx = e.clientX - pos.x;\r\n      const dy = e.clientY - pos.y;\r\n\r\n      // Scroll the element\r\n      ele.scrollTop = pos.top - dy;\r\n      ele.scrollLeft = pos.left - dx;\r\n\r\n      console.log(ele.scrollTop);\r\n    };\r\n\r\n    const mouseUpHandler = function () {\r\n      ele.style.cursor = \"grab\";\r\n      ele.style.removeProperty(\"user-select\");\r\n\r\n      console.log(\"Removing mousemove & mouseup\");\r\n      document.removeEventListener(\"mousemove\", mouseMoveHandler);\r\n      document.removeEventListener(\"mouseup\", mouseUpHandler);\r\n    };\r\n\r\n    const mouseDownHandler = function (e: MouseEvent) {\r\n      ele.style.cursor = \"grabbing\";\r\n      ele.style.userSelect = \"none\";\r\n\r\n      pos = {\r\n        // The current scroll\r\n        left: ele.scrollLeft,\r\n        top: ele.scrollTop,\r\n        // Get the current mouse position\r\n        x: e.clientX,\r\n        y: e.clientY,\r\n      };\r\n\r\n      console.log(\"Adding mousemove & mouseup\");\r\n      document.addEventListener(\"mousemove\", mouseMoveHandler);\r\n      document.addEventListener(\"mouseup\", mouseUpHandler);\r\n    };\r\n\r\n    document.addEventListener(\"mousedown\", mouseDownHandler);\r\n\r\n    return () => {\r\n      console.log(\"Unmount\");\r\n      document.removeEventListener(\"mousemove\", mouseMoveHandler);\r\n      document.removeEventListener(\"mouseup\", mouseUpHandler);\r\n      document.removeEventListener(\"mousedown\", mouseDownHandler);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <Grid\r\n      {...props}\r\n      justifyContent={\r\n        lot_rows[0].parking_spaces.length > 10 ? \"normal\" : \"center\"\r\n      }\r\n      mt={is_admin ? 0 : \"130px\"}\r\n      ref={gridRef}\r\n      cursor=\"grab\"\r\n      overflow=\"scroll\"\r\n      bg=\"white\"\r\n      border=\"2px solid black\"\r\n      gridTemplateRows={`repeat(${lot_rows.length}, ${SPACE_HEIGHT}px)`}\r\n      gridTemplateColumns={`repeat(${lot_rows[0].parking_spaces.length}, ${SPACE_WIDTH}px)`}\r\n      padding=\"16px\"\r\n      h=\"full\"\r\n      css={{\r\n        \"&::-webkit-scrollbar\": {\r\n          display: \"none\",\r\n        },\r\n      }}\r\n    >\r\n      {lot_rows.map((row, i) => {\r\n        return row.parking_spaces.map((space, j) => {\r\n          return (\r\n            <ParkingSpace\r\n              onClick={() => handleClick(space)}\r\n              key={i + \"\" + j}\r\n              space={space}\r\n              is_down={\r\n                (i < row.parking_spaces.length / 2 && space.is_entry) ||\r\n                (i > row.parking_spaces.length / 2 && space.is_exit)\r\n              }\r\n              is_selected={\r\n                selectedSpaceId != null && selectedSpaceId === space.id\r\n              }\r\n            />\r\n          );\r\n        });\r\n      })}\r\n    </Grid>\r\n  );\r\n}\r\n","import {\r\n  Box,\r\n  GridProps,\r\n  Flex,\r\n  Button,\r\n  Divider,\r\n  IconButton,\r\n} from \"@chakra-ui/react\";\r\nimport { useMotionValue } from \"framer-motion\";\r\nimport React, { ReactElement, useState } from \"react\";\r\nimport { useRef } from \"react\";\r\nimport { MdAdd, MdRemove } from \"react-icons/md\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ParkingLotDetailsByIdQuery } from \"../generated/graphql\";\r\nimport { SpaceData } from \"../types\";\r\nimport FullPageError from \"./FullPageError\";\r\nimport ParkingLotMap from \"./ParkingLotMap\";\r\n\r\ntype Props = {\r\n  lot_rows: NonNullable<\r\n    ParkingLotDetailsByIdQuery[\"parking_lot_by_pk\"]\r\n  >[\"lot_rows\"];\r\n  onSpaceClick?: (data: SpaceData) => void;\r\n  is_disabled: boolean;\r\n} & GridProps;\r\n\r\nexport default function ParkingSpacesDetails({\r\n  lot_rows,\r\n  onSpaceClick,\r\n  is_disabled,\r\n  ...props\r\n}: Props): ReactElement {\r\n  const history = useHistory();\r\n  const [selectedSpaceId, setSelectedSpaceId] = useState<number | null>(null);\r\n  const scale = useMotionValue<number>(1);\r\n\r\n  if (is_disabled && !history.location.pathname.includes(\"admin\")) {\r\n    return (\r\n      <FullPageError message=\"Sorry, this parking lot is currently disabled\">\r\n        <Button\r\n          onClick={() => {\r\n            history.goBack();\r\n          }}\r\n        >\r\n          Return to map\r\n        </Button>\r\n      </FullPageError>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Flex\r\n      justify=\"center\"\r\n      align=\"center\"\r\n      h=\"full\"\r\n      pb={history.location.pathname.includes(\"admin\") ? \"150px\" : 0}\r\n      {...props}\r\n    >\r\n      <ParkingLotMap\r\n        lot_rows={lot_rows}\r\n        onSpaceClick={(data) => {\r\n          if (onSpaceClick) {\r\n            setSelectedSpaceId(data.id);\r\n            onSpaceClick(data);\r\n          }\r\n        }}\r\n        scale={scale}\r\n        selectedSpaceId={selectedSpaceId}\r\n      />\r\n    </Flex>\r\n  );\r\n}\r\n\r\n{\r\n  /* <Box\r\n  rounded=\"md\"\r\n  bg=\"white\"\r\n  position=\"absolute\"\r\n  top=\"75px\"\r\n  right=\"5px\"\r\n  zIndex=\"999\"\r\n  boxShadow=\"lg\"\r\n>\r\n  <Flex direction=\"column\">\r\n    <IconButton\r\n      aria-label=\"Zoom In\"\r\n      icon={<MdAdd />}\r\n      fontSize=\"lg\"\r\n      bg=\"white\"\r\n      fontWeight=\"bold\"\r\n      mb={1}\r\n      size=\"sm\"\r\n      onClick={() => {\r\n        scale.set(Math.min(2, scale.get() + 0.2));\r\n      }}\r\n    />\r\n    <Divider />\r\n    <IconButton\r\n      aria-label=\"Zoom Out\"\r\n      icon={<MdRemove />}\r\n      fontSize=\"lg\"\r\n      bg=\"white\"\r\n      fontWeight=\"bold\"\r\n      size=\"sm\"\r\n      onClick={() => {\r\n        scale.set(Math.max(0.5, scale.get() - 0.2));\r\n      }}\r\n    />\r\n  </Flex>\r\n</Box> */\r\n}\r\n","import { Box, Button, Flex } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { useParkingLotDetailsByIdQuery } from \"../generated/graphql\";\r\nimport ParkingSpacesHeader from \"../components/ParkingSpacesHeader\";\r\nimport ParkingSpacesDetails from \"../components/ParkingSpacesDetails\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport FullPageError from \"../components/FullPageError\";\r\nimport FullPageLoading from \"../components/FullPageLoading\";\r\nimport { useDirections } from \"../utils/DirectionsProvider\";\r\n\r\ntype RouteParams = {\r\n  lot_id?: string;\r\n};\r\n\r\nexport default function ParkingLotSpaces() {\r\n  const { lot_id } = useParams<RouteParams>();\r\n  const history = useHistory();\r\n  const { setDestination, setDestinationLotId } = useDirections();\r\n  const { data, loading } = useParkingLotDetailsByIdQuery({\r\n    variables: { id: parseInt(lot_id || \"0\") },\r\n  });\r\n\r\n  if (loading) {\r\n    return <FullPageLoading />;\r\n  }\r\n\r\n  if (data?.parking_lot_by_pk?.lot_rows == null) {\r\n    return (\r\n      <FullPageError message=\"Sorry, there is no map for this parking lot\">\r\n        <Button\r\n          onClick={() => {\r\n            history.goBack();\r\n          }}\r\n        >\r\n          Return to map\r\n        </Button>\r\n      </FullPageError>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box\r\n      pos=\"relative\"\r\n      m={{ md: \"auto\" }}\r\n      w={{ md: \"850px\" }}\r\n      h=\"full\"\r\n      overflowY=\"hidden\"\r\n      bg=\"gray.200\"\r\n    >\r\n      <ParkingSpacesHeader\r\n        lot_id={data?.parking_lot_by_pk.id}\r\n        lot_name={data?.parking_lot_by_pk.name}\r\n        vacant_space={data.parking_lot_by_pk.vacant_space?.vacant_count}\r\n        position=\"fixed\"\r\n        top={0}\r\n        left={0}\r\n        w=\"full\"\r\n        zIndex=\"999\"\r\n      />\r\n      {data?.parking_lot_by_pk.lot_rows.length > 0 ? (\r\n        <ParkingSpacesDetails\r\n          is_disabled={data?.parking_lot_by_pk.is_disabled}\r\n          pb=\"125px\"\r\n          lot_rows={data?.parking_lot_by_pk.lot_rows}\r\n        />\r\n      ) : (\r\n        <FullPageError message=\"Sorry, there is no map for this parking lot\">\r\n          <Button\r\n            onClick={() => {\r\n              history.goBack();\r\n            }}\r\n          >\r\n            Return to zones\r\n          </Button>\r\n        </FullPageError>\r\n      )}\r\n      <Flex\r\n        borderTop=\"1px\"\r\n        borderColor=\"gray.300\"\r\n        borderTopRadius=\"6px\"\r\n        h=\"60px\"\r\n        bg=\"white\"\r\n        w=\"full\"\r\n        pos=\"fixed\"\r\n        bottom={0}\r\n        left={0}\r\n        justify=\"center\"\r\n        align=\"center\"\r\n      >\r\n        <Button\r\n          rounded=\"full\"\r\n          colorScheme=\"blue\"\r\n          w={1 / 2}\r\n          onClick={() => {\r\n            if (\r\n              data?.parking_lot_by_pk?.location == null ||\r\n              data?.parking_lot_by_pk.id == null\r\n            ) {\r\n              return;\r\n            }\r\n            const { latitude, longitude } = data.parking_lot_by_pk.location;\r\n            setDestination({ lat: latitude, lng: longitude });\r\n            setDestinationLotId(data.parking_lot_by_pk.id);\r\n            history.push(\"/\");\r\n          }}\r\n        >\r\n          Navigate\r\n        </Button>\r\n      </Flex>\r\n    </Box>\r\n  );\r\n}\r\n","import { Box, Button, Heading, Input, Stack, Text, Link } from \"@chakra-ui/react\";\r\nimport React, { ChangeEvent, FormEvent, useState } from \"react\";\r\n\r\ntype Form_data = {\r\n  firstname: string;\r\n  lastname: string;\r\n  email: string;\r\n  password: string;\r\n  rpt_password: string;\r\n};\r\n\r\nexport default function Register() {\r\n  const [data, setData] = useState<Form_data>({\r\n    firstname: \"\",\r\n    lastname: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    rpt_password: \"\",\r\n  });\r\n\r\n  function handleChange(event: ChangeEvent<HTMLInputElement>) {\r\n    const name = event.target.name;\r\n    setData({\r\n      ...data,\r\n      [name]: event.target.value,\r\n    });\r\n  }\r\n  function handleSubmit(event: FormEvent<HTMLFormElement>) {\r\n    event.preventDefault();\r\n    console.log(data);\r\n\r\n    //\r\n  }\r\n\r\n  return (\r\n    <Box m=\"50px\" h=\"full\">\r\n      <form onSubmit={handleSubmit}>\r\n        <Stack spacing=\"3\" alignItems=\"center\">\r\n        <Heading fontSize=\"5xl\">Park{\" \"}<Text color=\"yellow.500\">hound</Text></Heading>\r\n          <Text fontSize=\"lg\">Create an account!</Text>\r\n\r\n          <Input\r\n            variant=\"flushed\"\r\n            name=\"firstname\"\r\n            onChange={handleChange}\r\n            value={data.firstname}\r\n            placeholder=\"First Name\"\r\n            size=\"lg\"\r\n            height=\"60px\"\r\n          />\r\n          <Input\r\n            variant=\"flushed\"\r\n            name=\"lastname\"\r\n            onChange={handleChange}\r\n            value={data.lastname}\r\n            placeholder=\"Last Name\"\r\n            size=\"lg\"\r\n            height=\"60px\"\r\n          />\r\n          <Input\r\n            variant=\"flushed\"\r\n            name=\"email\"\r\n            onChange={handleChange}\r\n            value={data.email}\r\n            placeholder=\"Email\"\r\n            size=\"lg\"\r\n            height=\"60px\"\r\n          />\r\n          <Input\r\n            variant=\"flushed\"\r\n            name=\"password\"\r\n            onChange={handleChange}\r\n            value={data.password}\r\n            placeholder=\"Password\"\r\n            size=\"lg\"\r\n            height=\"60px\"\r\n          />\r\n          <Input\r\n            variant=\"flushed\"\r\n            name=\"rpt_password\"\r\n            onChange={handleChange}\r\n            value={data.rpt_password}\r\n            placeholder=\"Repeat Password\"\r\n            size=\"lg\"\r\n            height=\"60px\"\r\n          />\r\n\r\n          <Button type=\"submit\" colorScheme=\"yellow\" size=\"lg\">\r\n            Sign Up\r\n          </Button>\r\n          <Text alignitem=\"center\" fontSize=\"sm\">Already have an account?{\" \"} <Link color=\"blue.500\">Sign In</Link> </Text> \r\n        </Stack>\r\n      </form>\r\n    </Box>\r\n  );\r\n}\r\n","import { Box, Button, Heading, Input, Stack,Checkbox,Link,Text } from \"@chakra-ui/react\";\r\nimport React, { ChangeEvent, FormEvent } from \"react\";\r\nimport { useState } from \"react\";\r\ntype Form_data = { email: string; password: string };\r\n\r\nexport default function Login() {\r\n  const [data, setData] = useState<Form_data>({ email: \"\", password: \"\" });\r\n\r\n  function handleChange(event: ChangeEvent<HTMLInputElement>) {\r\n    const name = event.target.name;\r\n    setData({\r\n      ...data,\r\n      [name]: event.target.value,\r\n    });\r\n  }\r\n  function handleSubmit(event: FormEvent<HTMLFormElement>) {\r\n    event.preventDefault();\r\n\r\n    console.log(data);\r\n  }\r\n  return (\r\n    <Box m=\"90px\" h=\"full\">\r\n      <form onSubmit={handleSubmit}>\r\n        <Stack spacing=\"3\">\r\n          <Heading fontSize=\"5xl\">Park{\" \"}<Text color=\"yellow.500\">hound</Text></Heading>\r\n          <Text fontSize=\"lg\" height=\"20px\" >Sign in to continue</Text>\r\n\r\n          <Input\r\n            variant=\"flushed\"\r\n            name=\"email\"\r\n            value={data.email}\r\n            onChange={handleChange}\r\n            placeholder=\"Email\"\r\n            size=\"60px\"\r\n            height=\"90px\"\r\n          />\r\n          <Input\r\n            variant=\"flushed\"\r\n            name=\"password\"\r\n            value={data.password}\r\n            onChange={handleChange}\r\n            placeholder=\"Password\"\r\n            size=\"60px\"\r\n            height=\"90px\"\r\n          />\r\n          <Checkbox defaultIsChecked height=\"100px\">Remember Me</Checkbox>\r\n          <Button type=\"submit\" colorScheme=\"yellow\" size=\"40px\" height=\"70px\">\r\n            Sign In\r\n          </Button>\r\n\r\n          <Text alignitem=\"center\" fontSize=\"sm\">Don't have an account?{\" \"} <Link color=\"blue.500\">Sign Up</Link> </Text> \r\n        </Stack>\r\n      </form>\r\n    </Box>\r\n  );\r\n}\r\n","import { Box, Heading, Stack, Image, Flex, Text } from \"@chakra-ui/react\";\r\nimport React, { ReactElement } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useParkingLotsByInstitutionIdQuery } from \"../../generated/graphql\";\r\n\r\nexport default function AdminLotList(): ReactElement {\r\n  const { data, error } = useParkingLotsByInstitutionIdQuery({\r\n    variables: { id: 1 },\r\n  });\r\n  const history = useHistory();\r\n\r\n  if (error) {\r\n    return <Box>{error.stack}</Box>;\r\n  }\r\n\r\n  return (\r\n    <Box p={4}>\r\n      <Heading mb={4}>Parking Lots</Heading>\r\n      <Stack spacing={2} maxW=\"600px\">\r\n        {data?.institution_by_pk?.parking_lots.map((lot) => (\r\n          <Flex\r\n            key={lot.id}\r\n            bg=\"white\"\r\n            p={4}\r\n            rounded=\"md\"\r\n            boxShadow=\"md\"\r\n            onClick={() => {\r\n              history.replace(\"lot/\" + lot.id);\r\n            }}\r\n          >\r\n            <Image\r\n              rounded=\"md\"\r\n              boxSize=\"75px\"\r\n              src={lot.lot_image!!}\r\n              fallbackSrc=\"/lot_placeholder.png\"\r\n              mr={3}\r\n            />\r\n            <Stack spacing={1} w=\"full\">\r\n              <Text fontWeight=\"bold\">{lot.name}</Text>\r\n              <Flex>\r\n                <Text fontWeight=\"bold\" mr={1}>\r\n                  {lot.vacant_space?.vacant_count || 0}\r\n                </Text>\r\n                <Text>spaces available</Text>\r\n              </Flex>\r\n            </Stack>\r\n          </Flex>\r\n        ))}\r\n      </Stack>\r\n    </Box>\r\n  );\r\n}\r\n","import {\r\n  Box,\r\n  Button,\r\n  Divider,\r\n  Flex,\r\n  HStack,\r\n  Center,\r\n  Text,\r\n  useDisclosure,\r\n  Modal,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  ModalContent,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\nimport React, { ReactElement, useState } from \"react\";\r\nimport { MdImage } from \"react-icons/md\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport FullPageLoading from \"../../components/FullPageLoading\";\r\nimport ParkingSpacesDetails from \"../../components/ParkingSpacesDetails\";\r\nimport ParkingSpacesHeader from \"../../components/ParkingSpacesHeader\";\r\nimport {\r\n  useParkingLotDetailsByIdQuery,\r\n  useUpdateParkingSpaceMutation,\r\n  useUpdateParkingLotMutation,\r\n} from \"../../generated/graphql\";\r\nimport { SpaceData } from \"../../types\";\r\n\r\ntype RouteParams = {\r\n  lot_id: string;\r\n};\r\nexport default function AdminLot(): ReactElement {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const { lot_id } = useParams<RouteParams>();\r\n  const [selectedSpace, setSelectedSpace] = useState<SpaceData | null>(null);\r\n  const { data, loading: pageLoading } = useParkingLotDetailsByIdQuery({\r\n    variables: { id: parseInt(lot_id) },\r\n  });\r\n  const [\r\n    updateSpace,\r\n    { loading: spaceLoading },\r\n  ] = useUpdateParkingSpaceMutation({\r\n    onCompleted: (data) => {\r\n      setSelectedSpace(data.update_parking_space_by_pk!!);\r\n    },\r\n  });\r\n  const [updateLot, { loading: lotLoading }] = useUpdateParkingLotMutation();\r\n  const [showProcessed, setShowProcessed] = useState(false);\r\n\r\n  if (pageLoading) {\r\n    return <FullPageLoading />;\r\n  }\r\n\r\n  if (\r\n    data?.parking_lot_by_pk == null ||\r\n    data?.parking_lot_by_pk.lot_rows.length === 0\r\n  ) {\r\n    return <Box>Error. No Lot Data</Box>;\r\n  }\r\n\r\n  return (\r\n    <Box pos=\"relative\" pt=\"65px\" h=\"full\">\r\n      <ParkingSpacesHeader\r\n        lot_id={data?.parking_lot_by_pk.id}\r\n        is_admin\r\n        lot_name={data?.parking_lot_by_pk.name}\r\n        vacant_space={data.parking_lot_by_pk.vacant_space?.vacant_count}\r\n        bg=\"white\"\r\n      >\r\n        {data.parking_lot_by_pk.is_disabled && (\r\n          <Text fontWeight=\"bold\" mr={2}>\r\n            DISABLED -\r\n          </Text>\r\n        )}\r\n      </ParkingSpacesHeader>\r\n      <ParkingSpacesDetails\r\n        is_disabled={data?.parking_lot_by_pk.is_disabled}\r\n        onSpaceClick={(spaceData: SpaceData) => {\r\n          setSelectedSpace(spaceData);\r\n        }}\r\n        lot_rows={data?.parking_lot_by_pk.lot_rows}\r\n        // pb=\"150px\"\r\n      />\r\n      <Flex\r\n        pos=\"fixed\"\r\n        bottom={0}\r\n        w=\"1620px\"\r\n        h=\"150px\"\r\n        bg=\"white\"\r\n        p={4}\r\n        borderTop=\"1px solid #ccc\"\r\n      >\r\n        <Flex>\r\n          <Flex direction=\"column\">\r\n            <Text fontSize=\"lg\" fontWeight=\"bold\">\r\n              Lot Actions\r\n            </Text>\r\n            <HStack mt={4}>\r\n              {data.parking_lot_by_pk.is_disabled ? (\r\n                <Button\r\n                  colorScheme=\"green\"\r\n                  onClick={async () => {\r\n                    updateLot({\r\n                      variables: {\r\n                        id: parseInt(lot_id),\r\n                        _set: { is_disabled: false },\r\n                      },\r\n                    });\r\n                  }}\r\n                >\r\n                  Enable Lot\r\n                </Button>\r\n              ) : (\r\n                <Button\r\n                  onClick={async () => {\r\n                    updateLot({\r\n                      variables: {\r\n                        id: parseInt(lot_id),\r\n                        _set: { is_disabled: true },\r\n                      },\r\n                    });\r\n                  }}\r\n                >\r\n                  Disable Lot\r\n                </Button>\r\n              )}\r\n            </HStack>\r\n          </Flex>\r\n          <Center w=\"32px\">\r\n            <Divider orientation=\"vertical\" />\r\n          </Center>\r\n          {selectedSpace ? (\r\n            <Flex direction=\"column\">\r\n              <Text fontSize=\"lg\" fontWeight=\"bold\">\r\n                Parking Space {selectedSpace?.space_id}\r\n              </Text>\r\n              <HStack mt={4}>\r\n                {selectedSpace.is_disabled ? (\r\n                  <Button\r\n                    colorScheme=\"green\"\r\n                    isLoading={spaceLoading}\r\n                    onClick={async () => {\r\n                      await updateSpace({\r\n                        variables: {\r\n                          id: selectedSpace.id,\r\n                          _set: { is_disabled: false },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    Enable Space\r\n                  </Button>\r\n                ) : (\r\n                  <Button\r\n                    isLoading={spaceLoading}\r\n                    onClick={async () => {\r\n                      await updateSpace({\r\n                        variables: {\r\n                          id: selectedSpace.id,\r\n                          _set: { is_disabled: true },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    Disable Space\r\n                  </Button>\r\n                )}\r\n              </HStack>\r\n            </Flex>\r\n          ) : (\r\n            <Box w=\"142px\"></Box>\r\n          )}\r\n        </Flex>\r\n        <Flex ml=\"auto\" direction=\"column\" textAlign=\"end\">\r\n          <Text fontSize=\"lg\" fontWeight=\"bold\">\r\n            View Latest Image\r\n          </Text>\r\n          <HStack mt={4} justify=\"flex-end\">\r\n            <Button onClick={onOpen} colorScheme=\"blue\" leftIcon={<MdImage />}>\r\n              View\r\n            </Button>\r\n          </HStack>\r\n        </Flex>\r\n      </Flex>\r\n      <Modal size=\"5xl\" isOpen={isOpen} onClose={onClose}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Latest Lot Image</ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n            {showProcessed ? (\r\n              <Image w=\"1280px\" h=\"720px\" src={`/${lot_id}/processed.jpg`} />\r\n            ) : (\r\n              <Image w=\"1280px\" h=\"720px\" src={`/${lot_id}/latest.jpg`} />\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={() => setShowProcessed(!showProcessed)}>\r\n              {showProcessed ? \"Show original\" : \"Show processed\"}\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </Box>\r\n  );\r\n}\r\n","import {\r\n  Box,\r\n  Flex,\r\n  Heading,\r\n  IconButton,\r\n  Stack,\r\n  Image,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport React, { ReactElement } from \"react\";\r\nimport { MdChevronLeft } from \"react-icons/md\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useParkingLotListQuery } from \"../generated/graphql\";\r\nimport formatDistance from \"../utils/formatDistance\";\r\nimport useGeolocation from \"../utils/useGeolocation\";\r\n\r\nexport default function ParkingLotList(): ReactElement {\r\n  const history = useHistory();\r\n  const [error, position] = useGeolocation();\r\n  const { data } = useParkingLotListQuery({\r\n    variables: {\r\n      uid: parseInt(localStorage.getItem(\"uid\")!!),\r\n      userLocation: { lat: position?.lat || 0, lng: position?.lng || 0 },\r\n    },\r\n  });\r\n\r\n  if (data?.nearby_spaces?.length === 0) {\r\n    return <Box>No lots</Box>;\r\n  }\r\n\r\n  return (\r\n    <Box p={4} h=\"full\">\r\n      <Flex mb={4} align=\"center\">\r\n        <IconButton\r\n          mr={1}\r\n          variant=\"ghost\"\r\n          aria-label=\"Go Back\"\r\n          icon={<MdChevronLeft />}\r\n          onClick={() => history.goBack()}\r\n        />\r\n        <Heading>Parking Lots</Heading>\r\n      </Flex>\r\n      <Stack>\r\n        {/* {data?.favorites?.map((lot, key) => (\r\n          <Flex\r\n            key={key}\r\n            bg=\"white\"\r\n            p={4}\r\n            rounded=\"md\"\r\n            boxShadow=\"md\"\r\n            onClick={() => {\r\n              history.push(\"/lot/\" + lot?.parking_lot?.id);\r\n            }}\r\n          >\r\n            <Image\r\n              rounded=\"md\"\r\n              boxSize=\"75px\"\r\n              src={lot?.parking_lot?.lot_image!!}\r\n              fallbackSrc=\"/lot_placeholder.png\"\r\n              mr={3}\r\n            />\r\n            <Stack spacing={1} w=\"full\">\r\n              <Text fontWeight=\"bold\">{lot?.parking_lot?.name}</Text>\r\n              <Flex>\r\n                <Text fontWeight=\"bold\" mr={1}>\r\n                  {lot?.parking_lot?.vacant_space?.count || 0}\r\n                </Text>\r\n                <Text>spaces available</Text>\r\n              </Flex>\r\n            </Stack>\r\n          </Flex>\r\n        ))} */}\r\n        {data?.nearby_spaces?.map((lot, key) => (\r\n          <Flex\r\n            key={key}\r\n            bg=\"white\"\r\n            p={4}\r\n            rounded=\"md\"\r\n            boxShadow=\"md\"\r\n            onClick={() => {\r\n              history.push(\"/lot/\" + lot?.parking_lot?.id);\r\n            }}\r\n          >\r\n            <Image\r\n              rounded=\"md\"\r\n              boxSize=\"75px\"\r\n              src={lot?.parking_lot?.lot_image!!}\r\n              fallbackSrc=\"/lot_placeholder.png\"\r\n              mr={3}\r\n            />\r\n            <Stack spacing={1} w=\"full\">\r\n              <Text fontWeight=\"bold\">{lot?.parking_lot?.name}</Text>\r\n              <Flex>\r\n                <Text fontWeight=\"bold\" mr={1}>\r\n                  {lot?.parking_lot?.vacant_space?.vacant_count || 0}\r\n                </Text>\r\n                <Text>spaces available</Text>\r\n              </Flex>\r\n              <Flex justify=\"flex-end\">\r\n                <Text fontWeight=\"bold\">{formatDistance(lot?.distance)}</Text>\r\n              </Flex>\r\n            </Stack>\r\n          </Flex>\r\n        ))}\r\n      </Stack>\r\n    </Box>\r\n  );\r\n}\r\n","import React, { ReactElement } from \"react\";\r\nimport { Flex, Grid, Heading, Box, IconButton } from \"@chakra-ui/react\";\r\nimport { useDriversByInstitutionQuery } from \"../../generated/graphql\";\r\nimport { BiCrown } from \"react-icons/bi\";\r\nimport { RiForbid2Line } from \"react-icons/ri\";\r\n\r\nexport default function AdminDrivers(): ReactElement {\r\n  const { data } = useDriversByInstitutionQuery({ variables: { id: 1 } });\r\n  return (\r\n    <Box p={4}>\r\n      <Heading mb={4}>Drivers</Heading>\r\n      <Grid placeItems=\"center\">\r\n        <Flex color=\"gray.500\" px={4} py={2} w=\"800px\">\r\n          <Box width=\"250px\">Name</Box>\r\n          <Box width=\"250px\">Email</Box>\r\n          <Box width=\"250px\">Role</Box>\r\n          <Box width=\"250px\">Actions</Box>\r\n        </Flex>\r\n        {data?.institution_by_pk?.user_institutions.map(\r\n          ({ user, is_admin, user_id }) => (\r\n            <Flex\r\n              key={user_id}\r\n              p={8}\r\n              align=\"center\"\r\n              bg=\"white\"\r\n              w=\"800px\"\r\n              h=\"50px\"\r\n              border=\"1px solid #ccc\"\r\n            >\r\n              <Box width=\"250px\">\r\n                {user.first_name} {user.last_name}\r\n              </Box>\r\n              <Box width=\"250px\">{user.email}</Box>\r\n              <Box width=\"250px\">{is_admin ? \"Admin\" : \"Driver\"}</Box>\r\n              <Box width=\"250px\">\r\n                {!is_admin && (\r\n                  <IconButton\r\n                    colorScheme=\"yellow\"\r\n                    mr={2}\r\n                    aria-label=\"Promote\"\r\n                    icon={<BiCrown />}\r\n                  />\r\n                )}\r\n                <IconButton\r\n                  colorScheme=\"red\"\r\n                  aria-label=\"Ban\"\r\n                  icon={<RiForbid2Line />}\r\n                />\r\n              </Box>\r\n            </Flex>\r\n          )\r\n        )}\r\n      </Grid>\r\n    </Box>\r\n  );\r\n}\r\n","import { Box } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport AdminHome from \"./pages/Admin/AdminHome\";\r\nimport AdminLayout from \"./pages/Admin/AdminLayout\";\r\nimport Home from \"./pages/Home\";\r\nimport ParkingLotSpaces from \"./pages/ParkingLotSpaces\";\r\nimport Register from \"./pages/Register\";\r\nimport Login from \"./pages/Login\";\r\nimport AdminLotList from \"./pages/Admin/AdminLotList\";\r\nimport AdminLot from \"./pages/Admin/AdminLot\";\r\nimport ParkingLotList from \"./pages/ParkingLotList\";\r\nimport AdminDrivers from \"./pages/Admin/AdminDrivers\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <Box h=\"100vh\">\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/lot/:lot_id\">\r\n            <ParkingLotSpaces />\r\n          </Route>\r\n          <Route path=\"/lot-list\">\r\n            <ParkingLotList />\r\n          </Route>\r\n          <Route path=\"/admin/lot/:lot_id\">\r\n            <AdminLayout>\r\n              <AdminLot />\r\n            </AdminLayout>\r\n          </Route>\r\n          <Route path=\"/admin/lots\">\r\n            <AdminLayout>\r\n              <AdminLotList />\r\n            </AdminLayout>\r\n          </Route>\r\n          <Route path=\"/admin/drivers\">\r\n            <AdminLayout>\r\n              <AdminDrivers />\r\n            </AdminLayout>\r\n          </Route>\r\n          <Route exact path=\"/admin\">\r\n            <AdminLayout>\r\n              <AdminHome />\r\n            </AdminLayout>\r\n          </Route>\r\n          <Route path=\"/register\">\r\n            <Register />\r\n          </Route>\r\n          <Route path=\"/login\">\r\n            <Login />\r\n          </Route>\r\n          <Route exact path=\"/\">\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </Box>\r\n  );\r\n}\r\n","import { ReportHandler } from \"web-vitals\"\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry)\r\n      getFID(onPerfEntry)\r\n      getFCP(onPerfEntry)\r\n      getLCP(onPerfEntry)\r\n      getTTFB(onPerfEntry)\r\n    })\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n)\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://cra.link/PWA\",\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It is the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\")\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\")\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\",\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister()\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message)\r\n      })\r\n  }\r\n}\r\n","import { Global } from \"@emotion/react\";\r\nimport React from \"react\";\r\n\r\nconst Fonts = () => (\r\n  <Global\r\n    styles={`\r\n      /* latin-ext */\r\n      @font-face {\r\n        font-family: 'Open Sans';\r\n        font-style: normal;\r\n        font-weight: 700;\r\n        font-display: swap;\r\n        src: url(https://fonts.gstatic.com/s/opensans/v18/mem5YaGs126MiZpBA-UN7rgOXOhpKKSTj5PW.woff2) format('woff2');\r\n        unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\r\n      }\r\n      /* latin */\r\n      @font-face {\r\n        font-family: 'Open Sans';\r\n        font-style: normal;\r\n        font-weight: 700;\r\n        font-display: swap;\r\n        src: url(https://fonts.gstatic.com/s/opensans/v18/mem5YaGs126MiZpBA-UN7rgOUuhpKKSTjw.woff2) format('woff2');\r\n        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\r\n      }\r\n      /* latin-ext */\r\n      @font-face {\r\n        font-family: 'PT Sans';\r\n        font-style: normal;\r\n        font-weight: 400;\r\n        font-display: swap;\r\n        src: url(https://fonts.gstatic.com/s/ptsans/v12/jizaRExUiTo99u79D0yExdGM.woff2) format('woff2');\r\n        unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\r\n      }\r\n      /* latin */\r\n      @font-face {\r\n        font-family: 'PT Sans';\r\n        font-style: normal;\r\n        font-weight: 400;\r\n        font-display: swap;\r\n        src: url(https://fonts.gstatic.com/s/ptsans/v12/jizaRExUiTo99u79D0KExQ.woff2) format('woff2');\r\n        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\r\n      }\r\n      `}\r\n  />\r\n);\r\n\r\nexport default Fonts;\r\n","import { ChakraProvider } from \"@chakra-ui/react\";\r\nimport * as React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\r\nimport DirectionsProvider from \"./utils/DirectionsProvider\";\r\nimport { extendTheme } from \"@chakra-ui/react\";\r\nimport Fonts from \"./Fonts\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: \"http://localhost:8080/v1/graphql\",\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\n//Set current user\r\nlocalStorage.setItem(\"uid\", \"1\");\r\nconsole.log(\"Current user is 1\");\r\n\r\nconst theme = extendTheme({\r\n  fonts: {\r\n    heading: \"Open Sans\",\r\n    body: \"PT Sans\",\r\n  },\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ApolloProvider client={client}>\r\n      <ChakraProvider theme={theme}>\r\n        <Fonts />\r\n        <DirectionsProvider>\r\n          <App />\r\n        </DirectionsProvider>\r\n      </ChakraProvider>\r\n    </ApolloProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorker.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}